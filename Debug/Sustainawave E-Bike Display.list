
Sustainawave E-Bike Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006030  080091c8  080091c8  000191c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1f8  0800f1f8  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800f1f8  0800f1f8  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f1f8  0800f1f8  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1f8  0800f1f8  0001f1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f1fc  0800f1fc  0001f1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800f200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b890  200000ec  0800f2ec  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000b97c  0800f2ec  0002b97c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d50  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b6d  00000000  00000000  00038e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001698  00000000  00000000  0003c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00029397  00000000  00000000  0003e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a170  00000000  00000000  0006740f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f749a  00000000  00000000  0008157f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00178a19  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000014a0  00000000  00000000  00178a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ffc  00000000  00000000  00179f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000ec 	.word	0x200000ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091b0 	.word	0x080091b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f0 	.word	0x200000f0
 80001cc:	080091b0 	.word	0x080091b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f003 fd7e 	bl	8003d74 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f816 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f924 	bl	80004c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000280:	f000 f8ec 	bl	800045c <MX_DMA_Init>
  MX_TIM2_Init();
 8000284:	f000 f898 	bl	80003b8 <MX_TIM2_Init>
  MX_CAN1_Init();
 8000288:	f000 f860 	bl	800034c <MX_CAN1_Init>
  MX_DISPLAY_Init();
 800028c:	f001 fcee 	bl	8001c6c <MX_DISPLAY_Init>
  /* USER CODE BEGIN 2 */

  /* Start VESC communication */
  vesc_init(&hcan1);
 8000290:	4804      	ldr	r0, [pc, #16]	; (80002a4 <main+0x34>)
 8000292:	f001 fb4d 	bl	8001930 <vesc_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 8000296:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800029a:	f003 fde7 	bl	8003e6c <HAL_Delay>
    /* USER CODE END WHILE */

  MX_DISPLAY_Process();
 800029e:	f001 fd3b 	bl	8001d18 <MX_DISPLAY_Process>
	  HAL_Delay(500);
 80002a2:	e7f8      	b.n	8000296 <main+0x26>
 80002a4:	20000108 	.word	0x20000108

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b096      	sub	sp, #88	; 0x58
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0314 	add.w	r3, r7, #20
 80002b2:	2244      	movs	r2, #68	; 0x44
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f008 faf0 	bl	800889c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	463b      	mov	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80002ce:	f005 fac3 	bl	8005858 <HAL_PWREx_ControlVoltageScaling>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002d8:	f000 f99a 	bl	8000610 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002dc:	2302      	movs	r3, #2
 80002de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e6:	2310      	movs	r3, #16
 80002e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ea:	2302      	movs	r3, #2
 80002ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ee:	2302      	movs	r3, #2
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002f6:	230a      	movs	r3, #10
 80002f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002fa:	2307      	movs	r3, #7
 80002fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002fe:	2302      	movs	r3, #2
 8000300:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000302:	2302      	movs	r3, #2
 8000304:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000306:	f107 0314 	add.w	r3, r7, #20
 800030a:	4618      	mov	r0, r3
 800030c:	f005 fafa 	bl	8005904 <HAL_RCC_OscConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000316:	f000 f97b 	bl	8000610 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800031a:	230f      	movs	r3, #15
 800031c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031e:	2303      	movs	r3, #3
 8000320:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800032e:	463b      	mov	r3, r7
 8000330:	2104      	movs	r1, #4
 8000332:	4618      	mov	r0, r3
 8000334:	f005 fec2 	bl	80060bc <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800033e:	f000 f967 	bl	8000610 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3758      	adds	r7, #88	; 0x58
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000352:	4a18      	ldr	r2, [pc, #96]	; (80003b4 <MX_CAN1_Init+0x68>)
 8000354:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000356:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000358:	2210      	movs	r2, #16
 800035a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <MX_CAN1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_CAN1_Init+0x64>)
 800036a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800036e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000372:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000376:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_CAN1_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_CAN1_Init+0x64>)
 800038c:	2201      	movs	r2, #1
 800038e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000392:	2200      	movs	r2, #0
 8000394:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_CAN1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_CAN1_Init+0x64>)
 800039e:	f003 fd89 	bl	8003eb4 <HAL_CAN_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80003a8:	f000 f932 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000108 	.word	0x20000108
 80003b4:	40006400 	.word	0x40006400

080003b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003be:	f107 0310 	add.w	r3, r7, #16
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
 80003d2:	605a      	str	r2, [r3, #4]
 80003d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2520;
 80003de:	4b1e      	ldr	r3, [pc, #120]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003e0:	f640 12d8 	movw	r2, #2520	; 0x9d8
 80003e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e6:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003ec:	4b1a      	ldr	r3, [pc, #104]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <MX_TIM2_Init+0xa0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000400:	4815      	ldr	r0, [pc, #84]	; (8000458 <MX_TIM2_Init+0xa0>)
 8000402:	f007 fedb 	bl	80081bc <HAL_TIM_Base_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800040c:	f000 f900 	bl	8000610 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000414:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4619      	mov	r1, r3
 800041c:	480e      	ldr	r0, [pc, #56]	; (8000458 <MX_TIM2_Init+0xa0>)
 800041e:	f007 ff8d 	bl	800833c <HAL_TIM_ConfigClockSource>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000428:	f000 f8f2 	bl	8000610 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800042c:	2310      	movs	r3, #16
 800042e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000434:	1d3b      	adds	r3, r7, #4
 8000436:	4619      	mov	r1, r3
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <MX_TIM2_Init+0xa0>)
 800043a:	f008 f97d 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000444:	f000 f8e4 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <MX_TIM2_Init+0xa0>)
 800044a:	f007 ff0f 	bl	800826c <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	3720      	adds	r7, #32
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000130 	.word	0x20000130

0800045c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_DMA_Init+0x68>)
 8000464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000466:	4a17      	ldr	r2, [pc, #92]	; (80004c4 <MX_DMA_Init+0x68>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6493      	str	r3, [r2, #72]	; 0x48
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_DMA_Init+0x68>)
 8000470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 800047a:	2200      	movs	r2, #0
 800047c:	2102      	movs	r1, #2
 800047e:	200c      	movs	r0, #12
 8000480:	f004 fb7d 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000484:	200c      	movs	r0, #12
 8000486:	f004 fb96 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 800048a:	2200      	movs	r2, #0
 800048c:	2102      	movs	r1, #2
 800048e:	200d      	movs	r0, #13
 8000490:	f004 fb75 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000494:	200d      	movs	r0, #13
 8000496:	f004 fb8e 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2103      	movs	r1, #3
 800049e:	200e      	movs	r0, #14
 80004a0:	f004 fb6d 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004a4:	200e      	movs	r0, #14
 80004a6:	f004 fb86 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2103      	movs	r1, #3
 80004ae:	200f      	movs	r0, #15
 80004b0:	f004 fb65 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004b4:	200f      	movs	r0, #15
 80004b6:	f004 fb7e 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

}
 80004ba:	bf00      	nop
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b49      	ldr	r3, [pc, #292]	; (8000604 <MX_GPIO_Init+0x13c>)
 80004e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e2:	4a48      	ldr	r2, [pc, #288]	; (8000604 <MX_GPIO_Init+0x13c>)
 80004e4:	f043 0304 	orr.w	r3, r3, #4
 80004e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ea:	4b46      	ldr	r3, [pc, #280]	; (8000604 <MX_GPIO_Init+0x13c>)
 80004ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ee:	f003 0304 	and.w	r3, r3, #4
 80004f2:	60bb      	str	r3, [r7, #8]
 80004f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b43      	ldr	r3, [pc, #268]	; (8000604 <MX_GPIO_Init+0x13c>)
 80004f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fa:	4a42      	ldr	r2, [pc, #264]	; (8000604 <MX_GPIO_Init+0x13c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000502:	4b40      	ldr	r3, [pc, #256]	; (8000604 <MX_GPIO_Init+0x13c>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	4b3d      	ldr	r3, [pc, #244]	; (8000604 <MX_GPIO_Init+0x13c>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000512:	4a3c      	ldr	r2, [pc, #240]	; (8000604 <MX_GPIO_Init+0x13c>)
 8000514:	f043 0302 	orr.w	r3, r3, #2
 8000518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800051a:	4b3a      	ldr	r3, [pc, #232]	; (8000604 <MX_GPIO_Init+0x13c>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051e:	f003 0302 	and.w	r3, r3, #2
 8000522:	603b      	str	r3, [r7, #0]
 8000524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	f240 3102 	movw	r1, #770	; 0x302
 800052c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000530:	f005 f96c 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIA_DCX_GPIO_Port, SPIA_DCX_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	4833      	ldr	r0, [pc, #204]	; (8000608 <MX_GPIO_Init+0x140>)
 800053c:	f005 f966 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_USER_Pin JOY_UP_Pin JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|JOY_UP_Pin|JOY_CENTER_Pin;
 8000540:	f242 0381 	movw	r3, #8321	; 0x2081
 8000544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	2300      	movs	r3, #0
 8000548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	482d      	ldr	r0, [pc, #180]	; (800060c <MX_GPIO_Init+0x144>)
 8000556:	f004 fea3 	bl	80052a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_TE_Pin */
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800055e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	4619      	mov	r1, r3
 800056e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000572:	f004 fe95 	bl	80052a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_NRESET_Pin */
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 8000576:	2302      	movs	r3, #2
 8000578:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057a:	2301      	movs	r3, #1
 800057c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057e:	2301      	movs	r3, #1
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000582:	2302      	movs	r3, #2
 8000584:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 030c 	add.w	r3, r7, #12
 800058a:	4619      	mov	r1, r3
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f004 fe86 	bl	80052a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_DOWN_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_DOWN_Pin|JOY_LEFT_Pin;
 8000594:	2351      	movs	r3, #81	; 0x51
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	4818      	ldr	r0, [pc, #96]	; (8000608 <MX_GPIO_Init+0x140>)
 80005a8:	f004 fe7a 	bl	80052a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIA_DCX_Pin */
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4810      	ldr	r0, [pc, #64]	; (8000608 <MX_GPIO_Init+0x140>)
 80005c6:	f004 fe6b 	bl	80052a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIB_NCS_Pin SPIA_NCS_Pin */
  GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 80005ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d8:	2303      	movs	r3, #3
 80005da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	4619      	mov	r1, r3
 80005e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e6:	f004 fe5b 	bl	80052a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2104      	movs	r1, #4
 80005ee:	2006      	movs	r0, #6
 80005f0:	f004 fac5 	bl	8004b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f4:	2006      	movs	r0, #6
 80005f6:	f004 fade 	bl	8004bb6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005fa:	bf00      	nop
 80005fc:	3720      	adds	r7, #32
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000
 8000608:	48000400 	.word	0x48000400
 800060c:	48000800 	.word	0x48000800

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
}
 8000616:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000618:	e7fe      	b.n	8000618 <Error_Handler+0x8>
	...

0800061c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800062a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000632:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4a1e      	ldr	r2, [pc, #120]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800063a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000642:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	691b      	ldr	r3, [r3, #16]
 8000648:	4a1a      	ldr	r2, [pc, #104]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800064a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	4a18      	ldr	r2, [pc, #96]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000652:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800065a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	69db      	ldr	r3, [r3, #28]
 8000660:	4a14      	ldr	r2, [pc, #80]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000662:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6a1b      	ldr	r3, [r3, #32]
 8000668:	4a12      	ldr	r2, [pc, #72]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800066a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000670:	4a10      	ldr	r2, [pc, #64]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000672:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800067a:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <UTIL_LCD_SetFuncDriver+0x9c>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8000682:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <UTIL_LCD_SetFuncDriver+0x9c>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8000688:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <UTIL_LCD_SetFuncDriver+0xa0>)
 800068e:	4611      	mov	r1, r2
 8000690:	2000      	movs	r0, #0
 8000692:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 8000696:	6a1b      	ldr	r3, [r3, #32]
 8000698:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <UTIL_LCD_SetFuncDriver+0xa4>)
 800069a:	4611      	mov	r1, r2
 800069c:	2000      	movs	r0, #0
 800069e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <UTIL_LCD_SetFuncDriver+0x98>)
 80006a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006a4:	4a07      	ldr	r2, [pc, #28]	; (80006c4 <UTIL_LCD_SetFuncDriver+0xa8>)
 80006a6:	4611      	mov	r1, r2
 80006a8:	2000      	movs	r0, #0
 80006aa:	4798      	blx	r3
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001bc 	.word	0x200001bc
 80006b8:	2000017c 	.word	0x2000017c
 80006bc:	20000190 	.word	0x20000190
 80006c0:	20000194 	.word	0x20000194
 80006c4:	20000198 	.word	0x20000198

080006c8 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <UTIL_LCD_SetTextColor+0x24>)
 80006d2:	68db      	ldr	r3, [r3, #12]
 80006d4:	4a05      	ldr	r2, [pc, #20]	; (80006ec <UTIL_LCD_SetTextColor+0x24>)
 80006d6:	015b      	lsls	r3, r3, #5
 80006d8:	4413      	add	r3, r2
 80006da:	687a      	ldr	r2, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	2000017c 	.word	0x2000017c

080006f0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <UTIL_LCD_SetBackColor+0x24>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	4a05      	ldr	r2, [pc, #20]	; (8000714 <UTIL_LCD_SetBackColor+0x24>)
 80006fe:	015b      	lsls	r3, r3, #5
 8000700:	4413      	add	r3, r2
 8000702:	3304      	adds	r3, #4
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	601a      	str	r2, [r3, #0]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	2000017c 	.word	0x2000017c

08000718 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <UTIL_LCD_SetFont+0x24>)
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <UTIL_LCD_SetFont+0x24>)
 8000726:	015b      	lsls	r3, r3, #5
 8000728:	4413      	add	r3, r2
 800072a:	3308      	adds	r3, #8
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	601a      	str	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	2000017c 	.word	0x2000017c

08000740 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	af02      	add	r7, sp, #8
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
 800074c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <UTIL_LCD_FillRGBRect+0x30>)
 8000750:	685c      	ldr	r4, [r3, #4]
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <UTIL_LCD_FillRGBRect+0x34>)
 8000754:	6918      	ldr	r0, [r3, #16]
 8000756:	6a3b      	ldr	r3, [r7, #32]
 8000758:	9301      	str	r3, [sp, #4]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	68f9      	ldr	r1, [r7, #12]
 8000764:	47a0      	blx	r4
}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	bf00      	nop
 8000770:	200001bc 	.word	0x200001bc
 8000774:	2000017c 	.word	0x2000017c

08000778 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af02      	add	r7, sp, #8
 800077e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <UTIL_LCD_Clear+0x28>)
 8000782:	695a      	ldr	r2, [r3, #20]
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <UTIL_LCD_Clear+0x28>)
 8000786:	6999      	ldr	r1, [r3, #24]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	9300      	str	r3, [sp, #0]
 800078c:	460b      	mov	r3, r1
 800078e:	2100      	movs	r1, #0
 8000790:	2000      	movs	r0, #0
 8000792:	f000 f8eb 	bl	800096c <UTIL_LCD_FillRect>
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000017c 	.word	0x2000017c

080007a4 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	60f8      	str	r0, [r7, #12]
 80007ac:	60b9      	str	r1, [r7, #8]
 80007ae:	4613      	mov	r3, r2
 80007b0:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007b4:	68db      	ldr	r3, [r3, #12]
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007b8:	015b      	lsls	r3, r3, #5
 80007ba:	4413      	add	r3, r2
 80007bc:	3308      	adds	r3, #8
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80007c6:	4911      	ldr	r1, [pc, #68]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007c8:	68c9      	ldr	r1, [r1, #12]
 80007ca:	4810      	ldr	r0, [pc, #64]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007cc:	0149      	lsls	r1, r1, #5
 80007ce:	4401      	add	r1, r0
 80007d0:	3108      	adds	r1, #8
 80007d2:	6809      	ldr	r1, [r1, #0]
 80007d4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80007d6:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007dc:	68db      	ldr	r3, [r3, #12]
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <UTIL_LCD_DisplayChar+0x68>)
 80007e0:	015b      	lsls	r3, r3, #5
 80007e2:	4403      	add	r3, r0
 80007e4:	3308      	adds	r3, #8
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	889b      	ldrh	r3, [r3, #4]
 80007ea:	3307      	adds	r3, #7
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <UTIL_LCD_DisplayChar+0x4e>
 80007f0:	3307      	adds	r3, #7
 80007f2:	10db      	asrs	r3, r3, #3
 80007f4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80007f8:	4413      	add	r3, r2
 80007fa:	461a      	mov	r2, r3
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f000 f8ee 	bl	80009e0 <DrawChar>
}
 8000804:	bf00      	nop
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000017c 	.word	0x2000017c

08000810 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 800081e:	2301      	movs	r3, #1
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
 8000822:	2300      	movs	r3, #0
 8000824:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8000832:	e002      	b.n	800083a <UTIL_LCD_DisplayStringAt+0x2a>
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3301      	adds	r3, #1
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	61ba      	str	r2, [r7, #24]
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f6      	bne.n	8000834 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a47      	ldr	r2, [pc, #284]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 800084c:	68d2      	ldr	r2, [r2, #12]
 800084e:	4946      	ldr	r1, [pc, #280]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000850:	0152      	lsls	r2, r2, #5
 8000852:	440a      	add	r2, r1
 8000854:	3208      	adds	r2, #8
 8000856:	6812      	ldr	r2, [r2, #0]
 8000858:	8892      	ldrh	r2, [r2, #4]
 800085a:	fbb3 f3f2 	udiv	r3, r3, r2
 800085e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b03      	cmp	r3, #3
 8000864:	d018      	beq.n	8000898 <UTIL_LCD_DisplayStringAt+0x88>
 8000866:	2b03      	cmp	r3, #3
 8000868:	dc2a      	bgt.n	80008c0 <UTIL_LCD_DisplayStringAt+0xb0>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d002      	beq.n	8000874 <UTIL_LCD_DisplayStringAt+0x64>
 800086e:	2b02      	cmp	r3, #2
 8000870:	d015      	beq.n	800089e <UTIL_LCD_DisplayStringAt+0x8e>
 8000872:	e025      	b.n	80008c0 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4a3b      	ldr	r2, [pc, #236]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 800087c:	68d2      	ldr	r2, [r2, #12]
 800087e:	493a      	ldr	r1, [pc, #232]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000880:	0152      	lsls	r2, r2, #5
 8000882:	440a      	add	r2, r1
 8000884:	3208      	adds	r2, #8
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	8892      	ldrh	r2, [r2, #4]
 800088a:	fb02 f303 	mul.w	r3, r2, r3
 800088e:	085b      	lsrs	r3, r3, #1
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	4413      	add	r3, r2
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8000896:	e016      	b.n	80008c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800089c:	e013      	b.n	80008c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 800089e:	697a      	ldr	r2, [r7, #20]
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4a30      	ldr	r2, [pc, #192]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 80008a6:	68d2      	ldr	r2, [r2, #12]
 80008a8:	492f      	ldr	r1, [pc, #188]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 80008aa:	0152      	lsls	r2, r2, #5
 80008ac:	440a      	add	r2, r1
 80008ae:	3208      	adds	r2, #8
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	8892      	ldrh	r2, [r2, #4]
 80008b4:	fb03 f202 	mul.w	r2, r3, r2
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	1ad3      	subs	r3, r2, r3
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80008be:	e002      	b.n	80008c6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80008c4:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80008c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <UTIL_LCD_DisplayStringAt+0xc4>
 80008cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008d2:	d31b      	bcc.n	800090c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80008d4:	2301      	movs	r3, #1
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80008d8:	e018      	b.n	800090c <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	461a      	mov	r2, r3
 80008e0:	68b9      	ldr	r1, [r7, #8]
 80008e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80008e4:	f7ff ff5e 	bl	80007a4 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	4a1e      	ldr	r2, [pc, #120]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 80008ee:	015b      	lsls	r3, r3, #5
 80008f0:	4413      	add	r3, r2
 80008f2:	3308      	adds	r3, #8
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	889b      	ldrh	r3, [r3, #4]
 80008f8:	461a      	mov	r2, r3
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	4413      	add	r3, r2
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	3301      	adds	r3, #1
 8000904:	607b      	str	r3, [r7, #4]
    i++;
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	3301      	adds	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 800091c:	6959      	ldr	r1, [r3, #20]
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	4811      	ldr	r0, [pc, #68]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000924:	015b      	lsls	r3, r3, #5
 8000926:	4403      	add	r3, r0
 8000928:	3308      	adds	r3, #8
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	889b      	ldrh	r3, [r3, #4]
 800092e:	4618      	mov	r0, r3
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	fb00 f303 	mul.w	r3, r0, r3
 8000936:	1acb      	subs	r3, r1, r3
 8000938:	b29b      	uxth	r3, r3
 800093a:	490b      	ldr	r1, [pc, #44]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 800093c:	68c9      	ldr	r1, [r1, #12]
 800093e:	480a      	ldr	r0, [pc, #40]	; (8000968 <UTIL_LCD_DisplayStringAt+0x158>)
 8000940:	0149      	lsls	r1, r1, #5
 8000942:	4401      	add	r1, r0
 8000944:	3108      	adds	r1, #8
 8000946:	6809      	ldr	r1, [r1, #0]
 8000948:	8889      	ldrh	r1, [r1, #4]
 800094a:	428b      	cmp	r3, r1
 800094c:	bf2c      	ite	cs
 800094e:	2301      	movcs	r3, #1
 8000950:	2300      	movcc	r3, #0
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4013      	ands	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1be      	bne.n	80008da <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000017c 	.word	0x2000017c

0800096c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b087      	sub	sp, #28
 8000970:	af02      	add	r7, sp, #8
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
 8000978:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <UTIL_LCD_FillRect+0x6c>)
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	2b02      	cmp	r3, #2
 8000980:	d11a      	bne.n	80009b8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8000982:	4b16      	ldr	r3, [pc, #88]	; (80009dc <UTIL_LCD_FillRect+0x70>)
 8000984:	691c      	ldr	r4, [r3, #16]
 8000986:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <UTIL_LCD_FillRect+0x6c>)
 8000988:	6918      	ldr	r0, [r3, #16]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	08db      	lsrs	r3, r3, #3
 800098e:	f003 021f 	and.w	r2, r3, #31
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	0a9b      	lsrs	r3, r3, #10
 8000996:	015b      	lsls	r3, r3, #5
 8000998:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 800099c:	431a      	orrs	r2, r3
 800099e:	6a3b      	ldr	r3, [r7, #32]
 80009a0:	0cdb      	lsrs	r3, r3, #19
 80009a2:	02db      	lsls	r3, r3, #11
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68ba      	ldr	r2, [r7, #8]
 80009b2:	68f9      	ldr	r1, [r7, #12]
 80009b4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80009b6:	e00b      	b.n	80009d0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <UTIL_LCD_FillRect+0x70>)
 80009ba:	691c      	ldr	r4, [r3, #16]
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <UTIL_LCD_FillRect+0x6c>)
 80009be:	6918      	ldr	r0, [r3, #16]
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	68f9      	ldr	r1, [r7, #12]
 80009ce:	47a0      	blx	r4
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	2000017c 	.word	0x2000017c
 80009dc:	200001bc 	.word	0x200001bc

080009e0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0b2      	sub	sp, #200	; 0xc8
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 80009ec:	2300      	movs	r3, #0
 80009ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80009f2:	2300      	movs	r3, #0
 80009f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 80009f8:	4bb4      	ldr	r3, [pc, #720]	; (8000ccc <DrawChar+0x2ec>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	4ab3      	ldr	r2, [pc, #716]	; (8000ccc <DrawChar+0x2ec>)
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	4413      	add	r3, r2
 8000a02:	3308      	adds	r3, #8
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	88db      	ldrh	r3, [r3, #6]
 8000a08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8000a0c:	4baf      	ldr	r3, [pc, #700]	; (8000ccc <DrawChar+0x2ec>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	4aae      	ldr	r2, [pc, #696]	; (8000ccc <DrawChar+0x2ec>)
 8000a12:	015b      	lsls	r3, r3, #5
 8000a14:	4413      	add	r3, r2
 8000a16:	3308      	adds	r3, #8
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	889b      	ldrh	r3, [r3, #4]
 8000a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8000a20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a24:	3307      	adds	r3, #7
 8000a26:	f023 0207 	bic.w	r2, r3, #7
 8000a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000a3a:	e1d5      	b.n	8000de8 <DrawChar+0x408>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8000a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a40:	3307      	adds	r3, #7
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000a48:	fb02 f303 	mul.w	r3, r2, r3
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8000a54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a58:	3307      	adds	r3, #7
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d002      	beq.n	8000a66 <DrawChar+0x86>
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	d006      	beq.n	8000a72 <DrawChar+0x92>
 8000a64:	e011      	b.n	8000a8a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8000a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8000a70:	e01d      	b.n	8000aae <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8000a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000a7e:	3201      	adds	r2, #1
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	4313      	orrs	r3, r2
 8000a84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8000a88:	e011      	b.n	8000aae <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8000a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	041a      	lsls	r2, r3, #16
 8000a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a96:	3301      	adds	r3, #1
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	021b      	lsls	r3, r3, #8
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000aa2:	3202      	adds	r2, #2
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8000aac:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8000aae:	4b87      	ldr	r3, [pc, #540]	; (8000ccc <DrawChar+0x2ec>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	4a86      	ldr	r2, [pc, #536]	; (8000ccc <DrawChar+0x2ec>)
 8000ab4:	015b      	lsls	r3, r3, #5
 8000ab6:	4413      	add	r3, r2
 8000ab8:	331c      	adds	r3, #28
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	f040 80f7 	bne.w	8000cb0 <DrawChar+0x2d0>
    {
      /* Transparent Text */
      if(DrawProp[DrawProp->LcdLayer].BackColor == UTIL_LCD_COLOR_TRANSPARENT)
 8000ac2:	4b82      	ldr	r3, [pc, #520]	; (8000ccc <DrawChar+0x2ec>)
 8000ac4:	68db      	ldr	r3, [r3, #12]
 8000ac6:	4a81      	ldr	r2, [pc, #516]	; (8000ccc <DrawChar+0x2ec>)
 8000ac8:	015b      	lsls	r3, r3, #5
 8000aca:	4413      	add	r3, r2
 8000acc:	3304      	adds	r3, #4
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d161      	bne.n	8000b98 <DrawChar+0x1b8>
      {
        for (j = 0; j < width; j++)
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000ada:	e053      	b.n	8000b84 <DrawChar+0x1a4>
        {
          if(line & (1 << (width- j + offset- 1)))
 8000adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ae4:	1ad2      	subs	r2, r2, r3
 8000ae6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aea:	4413      	add	r3, r2
 8000aec:	3b01      	subs	r3, #1
 8000aee:	2201      	movs	r2, #1
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000afa:	4013      	ands	r3, r2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d03c      	beq.n	8000b7a <DrawChar+0x19a>
          {
            rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8000b00:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <DrawChar+0x2ec>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4a71      	ldr	r2, [pc, #452]	; (8000ccc <DrawChar+0x2ec>)
 8000b06:	015b      	lsls	r3, r3, #5
 8000b08:	4413      	add	r3, r2
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	08db      	lsrs	r3, r3, #3
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <DrawChar+0x2ec>)
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	496c      	ldr	r1, [pc, #432]	; (8000ccc <DrawChar+0x2ec>)
 8000b1c:	015b      	lsls	r3, r3, #5
 8000b1e:	440b      	add	r3, r1
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	0a9b      	lsrs	r3, r3, #10
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	015b      	lsls	r3, r3, #5
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	4313      	orrs	r3, r2
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b65      	ldr	r3, [pc, #404]	; (8000ccc <DrawChar+0x2ec>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4964      	ldr	r1, [pc, #400]	; (8000ccc <DrawChar+0x2ec>)
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	440b      	add	r3, r1
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	0cdb      	lsrs	r3, r3, #19
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	02db      	lsls	r3, r3, #11
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	33c0      	adds	r3, #192	; 0xc0
 8000b54:	443b      	add	r3, r7
 8000b56:	f823 2c4c 	strh.w	r2, [r3, #-76]
            UTIL_LCD_FillRGBRect(Xpos+j,  Ypos, (uint8_t*)&rgb565[j], 1, 1);
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b60:	18d0      	adds	r0, r2, r3
 8000b62:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000b66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	441a      	add	r2, r3
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2301      	movs	r3, #1
 8000b74:	68b9      	ldr	r1, [r7, #8]
 8000b76:	f7ff fde3 	bl	8000740 <UTIL_LCD_FillRGBRect>
        for (j = 0; j < width; j++)
 8000b7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000b84:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000b88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d3a5      	bcc.n	8000adc <DrawChar+0xfc>
          }
        }
        Ypos++;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	e122      	b.n	8000dde <DrawChar+0x3fe>
      }
      else
      {
        for (j = 0; j < width; j++)
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000b9e:	e074      	b.n	8000c8a <DrawChar+0x2aa>
        {
          if(line & (1 << (width- j + offset- 1)))
 8000ba0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ba8:	1ad2      	subs	r2, r2, r3
 8000baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000bae:	4413      	add	r3, r2
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d02d      	beq.n	8000c20 <DrawChar+0x240>
          {
            rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8000bc4:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <DrawChar+0x2ec>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4a40      	ldr	r2, [pc, #256]	; (8000ccc <DrawChar+0x2ec>)
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4413      	add	r3, r2
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <DrawChar+0x2ec>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	493b      	ldr	r1, [pc, #236]	; (8000ccc <DrawChar+0x2ec>)
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	440b      	add	r3, r1
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	0a9b      	lsrs	r3, r3, #10
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	015b      	lsls	r3, r3, #5
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	4b34      	ldr	r3, [pc, #208]	; (8000ccc <DrawChar+0x2ec>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	4933      	ldr	r1, [pc, #204]	; (8000ccc <DrawChar+0x2ec>)
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	440b      	add	r3, r1
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0cdb      	lsrs	r3, r3, #19
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	02db      	lsls	r3, r3, #11
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	33c0      	adds	r3, #192	; 0xc0
 8000c18:	443b      	add	r3, r7
 8000c1a:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8000c1e:	e02f      	b.n	8000c80 <DrawChar+0x2a0>
          }
          else
          {
            rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8000c20:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <DrawChar+0x2ec>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	4a29      	ldr	r2, [pc, #164]	; (8000ccc <DrawChar+0x2ec>)
 8000c26:	015b      	lsls	r3, r3, #5
 8000c28:	4413      	add	r3, r2
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	f003 031f 	and.w	r3, r3, #31
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <DrawChar+0x2ec>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	4923      	ldr	r1, [pc, #140]	; (8000ccc <DrawChar+0x2ec>)
 8000c3e:	015b      	lsls	r3, r3, #5
 8000c40:	440b      	add	r3, r1
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	0a9b      	lsrs	r3, r3, #10
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	015b      	lsls	r3, r3, #5
 8000c4c:	b29b      	uxth	r3, r3
 8000c4e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <DrawChar+0x2ec>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	491b      	ldr	r1, [pc, #108]	; (8000ccc <DrawChar+0x2ec>)
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	440b      	add	r3, r1
 8000c62:	3304      	adds	r3, #4
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	0cdb      	lsrs	r3, r3, #19
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	02db      	lsls	r3, r3, #11
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	33c0      	adds	r3, #192	; 0xc0
 8000c7a:	443b      	add	r3, r7
 8000c7c:	f823 2c4c 	strh.w	r2, [r3, #-76]
        for (j = 0; j < width; j++)
 8000c80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000c84:	3301      	adds	r3, #1
 8000c86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000c8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d384      	bcc.n	8000ba0 <DrawChar+0x1c0>
          }
        }
        UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8000c96:	68b9      	ldr	r1, [r7, #8]
 8000c98:	1c4b      	adds	r3, r1, #1
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f7ff fd49 	bl	8000740 <UTIL_LCD_FillRGBRect>
 8000cae:	e096      	b.n	8000dde <DrawChar+0x3fe>
      }
    }
    else
    {
      /* Transparent Text */
      if(DrawProp[DrawProp->LcdLayer].BackColor == UTIL_LCD_COLOR_TRANSPARENT)
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <DrawChar+0x2ec>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <DrawChar+0x2ec>)
 8000cb6:	015b      	lsls	r3, r3, #5
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d144      	bne.n	8000d4c <DrawChar+0x36c>
      {
        for (j = 0; j < width; j++)
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000cc8:	e036      	b.n	8000d38 <DrawChar+0x358>
 8000cca:	bf00      	nop
 8000ccc:	2000017c 	.word	0x2000017c
        {
          if(line & (1 << (width- j + offset- 1)))
 8000cd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000cd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000cde:	4413      	add	r3, r2
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	461a      	mov	r2, r3
 8000cea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d01c      	beq.n	8000d2e <DrawChar+0x34e>
          {
            argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8000cf4:	4b42      	ldr	r3, [pc, #264]	; (8000e00 <DrawChar+0x420>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	4a41      	ldr	r2, [pc, #260]	; (8000e00 <DrawChar+0x420>)
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	33c0      	adds	r3, #192	; 0xc0
 8000d08:	443b      	add	r3, r7
 8000d0a:	f843 2cac 	str.w	r2, [r3, #-172]
            UTIL_LCD_FillRGBRect(Xpos+j,  Ypos, (uint8_t*)&argb8888[j], 1, 1);
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d14:	18d0      	adds	r0, r2, r3
 8000d16:	f107 0214 	add.w	r2, r7, #20
 8000d1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	441a      	add	r2, r3
 8000d22:	2301      	movs	r3, #1
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	2301      	movs	r3, #1
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	f7ff fd09 	bl	8000740 <UTIL_LCD_FillRGBRect>
        for (j = 0; j < width; j++)
 8000d2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d32:	3301      	adds	r3, #1
 8000d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000d38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000d3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d3c5      	bcc.n	8000cd0 <DrawChar+0x2f0>
          }
        }
        Ypos++;
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	3301      	adds	r3, #1
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	e048      	b.n	8000dde <DrawChar+0x3fe>
      }
      else
      {
        for (j = 0; j < width; j++)
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000d52:	e032      	b.n	8000dba <DrawChar+0x3da>
        {
          if(line & (1 << (width- j + offset- 1)))
 8000d54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000d58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000d62:	4413      	add	r3, r2
 8000d64:	3b01      	subs	r3, #1
 8000d66:	2201      	movs	r2, #1
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d72:	4013      	ands	r3, r2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00d      	beq.n	8000d94 <DrawChar+0x3b4>
          {
            argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8000d78:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <DrawChar+0x420>)
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	4a20      	ldr	r2, [pc, #128]	; (8000e00 <DrawChar+0x420>)
 8000d7e:	015b      	lsls	r3, r3, #5
 8000d80:	4413      	add	r3, r2
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	33c0      	adds	r3, #192	; 0xc0
 8000d8c:	443b      	add	r3, r7
 8000d8e:	f843 2cac 	str.w	r2, [r3, #-172]
 8000d92:	e00d      	b.n	8000db0 <DrawChar+0x3d0>
          }
          else
          {
            argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <DrawChar+0x420>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	4a19      	ldr	r2, [pc, #100]	; (8000e00 <DrawChar+0x420>)
 8000d9a:	015b      	lsls	r3, r3, #5
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3304      	adds	r3, #4
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	33c0      	adds	r3, #192	; 0xc0
 8000daa:	443b      	add	r3, r7
 8000dac:	f843 2cac 	str.w	r2, [r3, #-172]
        for (j = 0; j < width; j++)
 8000db0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000db4:	3301      	adds	r3, #1
 8000db6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000dba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000dbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d3c6      	bcc.n	8000d54 <DrawChar+0x374>
          }
        }
        UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8000dc6:	68b9      	ldr	r1, [r7, #8]
 8000dc8:	1c4b      	adds	r3, r1, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	f107 0214 	add.w	r2, r7, #20
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff fcb1 	bl	8000740 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 8000dde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000de2:	3301      	adds	r3, #1
 8000de4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000de8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000dec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000df0:	429a      	cmp	r2, r3
 8000df2:	f4ff ae23 	bcc.w	8000a3c <DrawChar+0x5c>
      }
    }
  }
}
 8000df6:	bf00      	nop
 8000df8:	bf00      	nop
 8000dfa:	37c0      	adds	r7, #192	; 0xc0
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	2000017c 	.word	0x2000017c

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6613      	str	r3, [r2, #96]	; 0x60
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_MspInit+0x44>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_CAN_MspInit+0xa0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d139      	bne.n	8000ee2 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a1f      	ldr	r2, [pc, #124]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_CAN_MspInit+0xa4>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f004 f9ef 	bl	80052a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 13, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	210d      	movs	r1, #13
 8000ec6:	2013      	movs	r0, #19
 8000ec8:	f003 fe59 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ecc:	2013      	movs	r0, #19
 8000ece:	f003 fe72 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 14, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	210e      	movs	r1, #14
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f003 fe51 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000edc:	2014      	movs	r0, #20
 8000ede:	f003 fe6a 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40006400 	.word	0x40006400
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f04:	d10b      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x38>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_TIM_Base_MspInit+0x38>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_TIM_Base_MspInit+0x38>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <NMI_Handler+0x4>

08000f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <HardFault_Handler+0x4>

08000f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <MemManage_Handler+0x4>

08000f42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <BusFault_Handler+0x4>

08000f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <UsageFault_Handler+0x4>

08000f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f7c:	f002 ff56 	bl	8003e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <EXTI0_IRQHandler+0x10>)
 8000f8a:	f004 f935 	bl	80051f8 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000b874 	.word	0x2000b874

08000f98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <DMA1_Channel2_IRQHandler+0x10>)
 8000f9e:	f004 f81e 	bl	8004fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200003e8 	.word	0x200003e8

08000fac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <DMA1_Channel3_IRQHandler+0x10>)
 8000fb2:	f004 f814 	bl	8004fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200003a0 	.word	0x200003a0

08000fc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000fc4:	4802      	ldr	r0, [pc, #8]	; (8000fd0 <DMA1_Channel4_IRQHandler+0x10>)
 8000fc6:	f004 f80a 	bl	8004fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000310 	.word	0x20000310

08000fd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel5_IRQHandler+0x10>)
 8000fda:	f004 f800 	bl	8004fde <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000358 	.word	0x20000358

08000fe8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <CAN1_TX_IRQHandler+0x10>)
 8000fee:	f003 faa2 	bl	8004536 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000108 	.word	0x20000108

08000ffc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <CAN1_RX0_IRQHandler+0x10>)
 8001002:	f003 fa98 	bl	8004536 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000108 	.word	0x20000108

08001010 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <SPI1_IRQHandler+0x10>)
 8001016:	f006 fc5d 	bl	80078d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000274 	.word	0x20000274

08001024 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <SPI2_IRQHandler+0x10>)
 800102a:	f006 fc53 	bl	80078d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001e8 	.word	0x200001e8

08001038 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <BSP_SPI2_Init+0x64>)
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <BSP_SPI2_Init+0x68>)
 8001046:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <BSP_SPI2_Init+0x6c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	4915      	ldr	r1, [pc, #84]	; (80010a4 <BSP_SPI2_Init+0x6c>)
 8001050:	600a      	str	r2, [r1, #0]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d11d      	bne.n	8001092 <BSP_SPI2_Init+0x5a>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <BSP_SPI2_Init+0x64>)
 8001058:	f006 fd8c 	bl	8007b74 <HAL_SPI_GetState>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d117      	bne.n	8001092 <BSP_SPI2_Init+0x5a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
#else
        if(IsSPI2MspCbValid == 0U)
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <BSP_SPI2_Init+0x70>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <BSP_SPI2_Init+0x42>
        {
            if(BSP_SPI2_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 800106a:	f000 f965 	bl	8001338 <BSP_SPI2_RegisterDefaultMspCallbacks>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <BSP_SPI2_Init+0x42>
            {
                return BSP_ERROR_MSP_FAILURE;
 8001074:	f06f 0309 	mvn.w	r3, #9
 8001078:	e00c      	b.n	8001094 <BSP_SPI2_Init+0x5c>
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d108      	bne.n	8001092 <BSP_SPI2_Init+0x5a>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <BSP_SPI2_Init+0x64>)
 8001082:	f000 f9bd 	bl	8001400 <MX_SPI2_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d002      	beq.n	8001092 <BSP_SPI2_Init+0x5a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800108c:	f06f 0307 	mvn.w	r3, #7
 8001090:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8001092:	687b      	ldr	r3, [r7, #4]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001e8 	.word	0x200001e8
 80010a0:	40003800 	.word	0x40003800
 80010a4:	20000304 	.word	0x20000304
 80010a8:	20000300 	.word	0x20000300

080010ac <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80010b2:	f06f 0307 	mvn.w	r3, #7
 80010b6:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <BSP_SPI2_DeInit+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d010      	beq.n	80010e2 <BSP_SPI2_DeInit+0x36>
  {
    if (--SPI2InitCounter == 0)
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <BSP_SPI2_DeInit+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <BSP_SPI2_DeInit+0x40>)
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <BSP_SPI2_DeInit+0x40>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d107      	bne.n	80010e2 <BSP_SPI2_DeInit+0x36>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 80010d2:	4807      	ldr	r0, [pc, #28]	; (80010f0 <BSP_SPI2_DeInit+0x44>)
 80010d4:	f005 fab8 	bl	8006648 <HAL_SPI_DeInit>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <BSP_SPI2_DeInit+0x36>
      {
        ret = BSP_ERROR_NONE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000304 	.word	0x20000304
 80010f0:	200001e8 	.word	0x200001e8

080010f4 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4806      	ldr	r0, [pc, #24]	; (8001128 <BSP_SPI2_Send+0x34>)
 800110e:	f005 fb8b 	bl	8006828 <HAL_SPI_Transmit>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d002      	beq.n	800111e <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001118:	f06f 0305 	mvn.w	r3, #5
 800111c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200001e8 	.word	0x200001e8

0800112c <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <BSP_SPI2_Recv+0x34>)
 8001146:	f005 fcdd 	bl	8006b04 <HAL_SPI_Receive>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d002      	beq.n	8001156 <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001150:	f06f 0305 	mvn.w	r3, #5
 8001154:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001156:	68fb      	ldr	r3, [r7, #12]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200001e8 	.word	0x200001e8

08001164 <BSP_SPI2_Send_DMA>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send_DMA(uint8_t *pData, uint16_t Length)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit_DMA(&hspi2, pData, Length) != HAL_OK)
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	461a      	mov	r2, r3
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <BSP_SPI2_Send_DMA+0x34>)
 800117c:	f006 f806 	bl	800718c <HAL_SPI_Transmit_DMA>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <BSP_SPI2_Send_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001186:	f06f 0305 	mvn.w	r3, #5
 800118a:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800118c:	68fb      	ldr	r3, [r7, #12]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001e8 	.word	0x200001e8

0800119c <BSP_SPI2_Recv_DMA>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv_DMA(uint8_t *pData, uint16_t Length)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive_DMA(&hspi2, pData, Length) != HAL_OK)
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	461a      	mov	r2, r3
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <BSP_SPI2_Recv_DMA+0x34>)
 80011b4:	f006 f8de 	bl	8007374 <HAL_SPI_Receive_DMA>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <BSP_SPI2_Recv_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80011be:	f06f 0305 	mvn.w	r3, #5
 80011c2:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80011c4:	68fb      	ldr	r3, [r7, #12]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001e8 	.word	0x200001e8

080011d4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <BSP_SPI1_Init+0x64>)
 80011e0:	4a16      	ldr	r2, [pc, #88]	; (800123c <BSP_SPI1_Init+0x68>)
 80011e2:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <BSP_SPI1_Init+0x6c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1c5a      	adds	r2, r3, #1
 80011ea:	4915      	ldr	r1, [pc, #84]	; (8001240 <BSP_SPI1_Init+0x6c>)
 80011ec:	600a      	str	r2, [r1, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11d      	bne.n	800122e <BSP_SPI1_Init+0x5a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <BSP_SPI1_Init+0x64>)
 80011f4:	f006 fcbe 	bl	8007b74 <HAL_SPI_GetState>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d117      	bne.n	800122e <BSP_SPI1_Init+0x5a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
#else
        if(IsSPI1MspCbValid == 0U)
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <BSP_SPI1_Init+0x70>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d107      	bne.n	8001216 <BSP_SPI1_Init+0x42>
        {
            if(BSP_SPI1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 8001206:	f000 f8c9 	bl	800139c <BSP_SPI1_RegisterDefaultMspCallbacks>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <BSP_SPI1_Init+0x42>
            {
                return BSP_ERROR_MSP_FAILURE;
 8001210:	f06f 0309 	mvn.w	r3, #9
 8001214:	e00c      	b.n	8001230 <BSP_SPI1_Init+0x5c>
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d108      	bne.n	800122e <BSP_SPI1_Init+0x5a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800121c:	4806      	ldr	r0, [pc, #24]	; (8001238 <BSP_SPI1_Init+0x64>)
 800121e:	f000 fa1f 	bl	8001660 <MX_SPI1_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <BSP_SPI1_Init+0x5a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001228:	f06f 0307 	mvn.w	r3, #7
 800122c:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000274 	.word	0x20000274
 800123c:	40013000 	.word	0x40013000
 8001240:	2000030c 	.word	0x2000030c
 8001244:	20000308 	.word	0x20000308

08001248 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 800124e:	f06f 0307 	mvn.w	r3, #7
 8001252:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <BSP_SPI1_DeInit+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <BSP_SPI1_DeInit+0x36>
  {
    if (--SPI1InitCounter == 0)
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <BSP_SPI1_DeInit+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	3b01      	subs	r3, #1
 8001262:	4a09      	ldr	r2, [pc, #36]	; (8001288 <BSP_SPI1_DeInit+0x40>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <BSP_SPI1_DeInit+0x40>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d107      	bne.n	800127e <BSP_SPI1_DeInit+0x36>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 800126e:	4807      	ldr	r0, [pc, #28]	; (800128c <BSP_SPI1_DeInit+0x44>)
 8001270:	f005 f9ea 	bl	8006648 <HAL_SPI_DeInit>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <BSP_SPI1_DeInit+0x36>
      {
        ret = BSP_ERROR_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800127e:	687b      	ldr	r3, [r7, #4]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	2000030c 	.word	0x2000030c
 800128c:	20000274 	.word	0x20000274

08001290 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80012a0:	887a      	ldrh	r2, [r7, #2]
 80012a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <BSP_SPI1_Send+0x34>)
 80012aa:	f005 fabd 	bl	8006828 <HAL_SPI_Transmit>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80012b4:	f06f 0305 	mvn.w	r3, #5
 80012b8:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000274 	.word	0x20000274

080012c8 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80012d8:	887a      	ldrh	r2, [r7, #2]
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <BSP_SPI1_Recv+0x34>)
 80012e2:	f005 fc0f 	bl	8006b04 <HAL_SPI_Receive>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80012ec:	f06f 0305 	mvn.w	r3, #5
 80012f0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000274 	.word	0x20000274

08001300 <BSP_SPI1_Send_DMA>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send_DMA(uint8_t *pData, uint16_t Length)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit_DMA(&hspi1, pData, Length) != HAL_OK)
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	461a      	mov	r2, r3
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <BSP_SPI1_Send_DMA+0x34>)
 8001318:	f005 ff38 	bl	800718c <HAL_SPI_Transmit_DMA>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d002      	beq.n	8001328 <BSP_SPI1_Send_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8001322:	f06f 0305 	mvn.w	r3, #5
 8001326:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8001328:	68fb      	ldr	r3, [r7, #12]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000274 	.word	0x20000274

08001338 <BSP_SPI2_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP SPI2 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_SPI2_RegisterDefaultMspCallbacks (void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  __HAL_SPI_RESET_HANDLE_STATE(&hspi2);
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 800133e:	2200      	movs	r2, #0
 8001340:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8001346:	2200      	movs	r2, #0
 8001348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 800134e:	2200      	movs	r2, #0
 8001350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Register MspInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPINIT_CB_ID, SPI2_MspInit)  != HAL_OK)
 8001354:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <BSP_SPI2_RegisterDefaultMspCallbacks+0x58>)
 8001356:	2108      	movs	r1, #8
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 800135a:	f005 f9bf 	bl	80066dc <HAL_SPI_RegisterCallback>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <BSP_SPI2_RegisterDefaultMspCallbacks+0x32>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8001364:	f06f 0303 	mvn.w	r3, #3
 8001368:	e00e      	b.n	8001388 <BSP_SPI2_RegisterDefaultMspCallbacks+0x50>
  }

  /* Register MspDeInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPDEINIT_CB_ID, SPI2_MspDeInit) != HAL_OK)
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <BSP_SPI2_RegisterDefaultMspCallbacks+0x5c>)
 800136c:	2109      	movs	r1, #9
 800136e:	4807      	ldr	r0, [pc, #28]	; (800138c <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8001370:	f005 f9b4 	bl	80066dc <HAL_SPI_RegisterCallback>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d002      	beq.n	8001380 <BSP_SPI2_RegisterDefaultMspCallbacks+0x48>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800137a:	f06f 0303 	mvn.w	r3, #3
 800137e:	e003      	b.n	8001388 <BSP_SPI2_RegisterDefaultMspCallbacks+0x50>
  }
  IsSPI2MspCbValid = 1;
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <BSP_SPI2_RegisterDefaultMspCallbacks+0x60>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200001e8 	.word	0x200001e8
 8001390:	08001485 	.word	0x08001485
 8001394:	08001605 	.word	0x08001605
 8001398:	20000300 	.word	0x20000300

0800139c <BSP_SPI1_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP SPI1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_SPI1_RegisterDefaultMspCallbacks (void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0

  __HAL_SPI_RESET_HANDLE_STATE(&hspi1);
 80013a0:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Register MspInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPINIT_CB_ID, SPI1_MspInit)  != HAL_OK)
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <BSP_SPI1_RegisterDefaultMspCallbacks+0x58>)
 80013ba:	2108      	movs	r1, #8
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 80013be:	f005 f98d 	bl	80066dc <HAL_SPI_RegisterCallback>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d002      	beq.n	80013ce <BSP_SPI1_RegisterDefaultMspCallbacks+0x32>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80013c8:	f06f 0303 	mvn.w	r3, #3
 80013cc:	e00e      	b.n	80013ec <BSP_SPI1_RegisterDefaultMspCallbacks+0x50>
  }

  /* Register MspDeInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPDEINIT_CB_ID, SPI1_MspDeInit) != HAL_OK)
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <BSP_SPI1_RegisterDefaultMspCallbacks+0x5c>)
 80013d0:	2109      	movs	r1, #9
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 80013d4:	f005 f982 	bl	80066dc <HAL_SPI_RegisterCallback>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <BSP_SPI1_RegisterDefaultMspCallbacks+0x48>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80013de:	f06f 0303 	mvn.w	r3, #3
 80013e2:	e003      	b.n	80013ec <BSP_SPI1_RegisterDefaultMspCallbacks+0x50>
  }
  IsSPI1MspCbValid = 1;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <BSP_SPI1_RegisterDefaultMspCallbacks+0x60>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000274 	.word	0x20000274
 80013f4:	080016e5 	.word	0x080016e5
 80013f8:	08001849 	.word	0x08001849
 80013fc:	20000308 	.word	0x20000308

08001400 <MX_SPI2_Init>:
}

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <MX_SPI2_Init+0x80>)
 8001410:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001418:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001426:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800143a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2207      	movs	r2, #7
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f005 f814 	bl	8006494 <HAL_SPI_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_SPI2_Init+0x76>
  {
    ret = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001476:	7bfb      	ldrb	r3, [r7, #15]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40003800 	.word	0x40003800

08001484 <SPI2_MspInit>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800148c:	4b56      	ldr	r3, [pc, #344]	; (80015e8 <SPI2_MspInit+0x164>)
 800148e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001490:	4a55      	ldr	r2, [pc, #340]	; (80015e8 <SPI2_MspInit+0x164>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001496:	6593      	str	r3, [r2, #88]	; 0x58
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <SPI2_MspInit+0x164>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <SPI2_MspInit+0x164>)
 80014a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a8:	4a4f      	ldr	r2, [pc, #316]	; (80015e8 <SPI2_MspInit+0x164>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b0:	4b4d      	ldr	r3, [pc, #308]	; (80015e8 <SPI2_MspInit+0x164>)
 80014b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b4a      	ldr	r3, [pc, #296]	; (80015e8 <SPI2_MspInit+0x164>)
 80014be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c0:	4a49      	ldr	r2, [pc, #292]	; (80015e8 <SPI2_MspInit+0x164>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c8:	4b47      	ldr	r3, [pc, #284]	; (80015e8 <SPI2_MspInit+0x164>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 80014d4:	2304      	movs	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d8:	2302      	movs	r3, #2
 80014da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014dc:	2302      	movs	r3, #2
 80014de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e0:	2303      	movs	r3, #3
 80014e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 80014e4:	2305      	movs	r3, #5
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	483f      	ldr	r0, [pc, #252]	; (80015ec <SPI2_MspInit+0x168>)
 80014f0:	f003 fed6 	bl	80052a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 80014f4:	2308      	movs	r3, #8
 80014f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001504:	2305      	movs	r3, #5
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	4837      	ldr	r0, [pc, #220]	; (80015ec <SPI2_MspInit+0x168>)
 8001510:	f003 fec6 	bl	80052a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800151e:	2302      	movs	r3, #2
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8001526:	2305      	movs	r3, #5
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <SPI2_MspInit+0x16c>)
 8001532:	f003 feb5 	bl	80052a0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_spi2_rx.Instance = DMA1_Channel4;
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <SPI2_MspInit+0x170>)
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <SPI2_MspInit+0x174>)
 800153a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <SPI2_MspInit+0x170>)
 800153e:	2201      	movs	r2, #1
 8001540:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001542:	4b2c      	ldr	r3, [pc, #176]	; (80015f4 <SPI2_MspInit+0x170>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	4b2a      	ldr	r3, [pc, #168]	; (80015f4 <SPI2_MspInit+0x170>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800154e:	4b29      	ldr	r3, [pc, #164]	; (80015f4 <SPI2_MspInit+0x170>)
 8001550:	2280      	movs	r2, #128	; 0x80
 8001552:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <SPI2_MspInit+0x170>)
 8001556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800155a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800155c:	4b25      	ldr	r3, [pc, #148]	; (80015f4 <SPI2_MspInit+0x170>)
 800155e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001562:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <SPI2_MspInit+0x170>)
 8001566:	2200      	movs	r2, #0
 8001568:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800156a:	4b22      	ldr	r3, [pc, #136]	; (80015f4 <SPI2_MspInit+0x170>)
 800156c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001570:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi2_rx);
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <SPI2_MspInit+0x170>)
 8001574:	f003 fb48 	bl	8004c08 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <SPI2_MspInit+0x170>)
 800157c:	659a      	str	r2, [r3, #88]	; 0x58
 800157e:	4a1d      	ldr	r2, [pc, #116]	; (80015f4 <SPI2_MspInit+0x170>)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_spi2_tx.Instance = DMA1_Channel5;
 8001584:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <SPI2_MspInit+0x178>)
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <SPI2_MspInit+0x17c>)
 8001588:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 800158a:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <SPI2_MspInit+0x178>)
 800158c:	2201      	movs	r2, #1
 800158e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <SPI2_MspInit+0x178>)
 8001592:	2210      	movs	r2, #16
 8001594:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <SPI2_MspInit+0x178>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800159c:	4b17      	ldr	r3, [pc, #92]	; (80015fc <SPI2_MspInit+0x178>)
 800159e:	2280      	movs	r2, #128	; 0x80
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015a2:	4b16      	ldr	r3, [pc, #88]	; (80015fc <SPI2_MspInit+0x178>)
 80015a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015a8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015aa:	4b14      	ldr	r3, [pc, #80]	; (80015fc <SPI2_MspInit+0x178>)
 80015ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015b0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <SPI2_MspInit+0x178>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <SPI2_MspInit+0x178>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi2_tx);
 80015be:	480f      	ldr	r0, [pc, #60]	; (80015fc <SPI2_MspInit+0x178>)
 80015c0:	f003 fb22 	bl	8004c08 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <SPI2_MspInit+0x178>)
 80015c8:	655a      	str	r2, [r3, #84]	; 0x54
 80015ca:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <SPI2_MspInit+0x178>)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2103      	movs	r1, #3
 80015d4:	2024      	movs	r0, #36	; 0x24
 80015d6:	f003 fad2 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80015da:	2024      	movs	r0, #36	; 0x24
 80015dc:	f003 faeb 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000
 80015ec:	48000800 	.word	0x48000800
 80015f0:	48000400 	.word	0x48000400
 80015f4:	20000310 	.word	0x20000310
 80015f8:	40020044 	.word	0x40020044
 80015fc:	20000358 	.word	0x20000358
 8001600:	40020058 	.word	0x40020058

08001604 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800160c:	4b11      	ldr	r3, [pc, #68]	; (8001654 <SPI2_MspDeInit+0x50>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a10      	ldr	r2, [pc, #64]	; (8001654 <SPI2_MspDeInit+0x50>)
 8001612:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8001618:	2104      	movs	r1, #4
 800161a:	480f      	ldr	r0, [pc, #60]	; (8001658 <SPI2_MspDeInit+0x54>)
 800161c:	f003 ffea 	bl	80055f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8001620:	2108      	movs	r1, #8
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <SPI2_MspDeInit+0x54>)
 8001624:	f003 ffe6 	bl	80055f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 8001628:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162c:	480b      	ldr	r0, [pc, #44]	; (800165c <SPI2_MspDeInit+0x58>)
 800162e:	f003 ffe1 	bl	80055f4 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	4618      	mov	r0, r3
 8001638:	f003 fb9e 	bl	8004d78 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	4618      	mov	r0, r3
 8001642:	f003 fb99 	bl	8004d78 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8001646:	2024      	movs	r0, #36	; 0x24
 8001648:	f003 fac3 	bl	8004bd2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	48000800 	.word	0x48000800
 800165c:	48000400 	.word	0x48000400

08001660 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <MX_SPI1_Init+0x80>)
 8001670:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001678:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001686:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2207      	movs	r2, #7
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f004 fee4 	bl	8006494 <HAL_SPI_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40013000 	.word	0x40013000

080016e4 <SPI1_MspInit>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <SPI1_MspInit+0x150>)
 80016ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <SPI1_MspInit+0x150>)
 80016f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016f6:	6613      	str	r3, [r2, #96]	; 0x60
 80016f8:	4b4e      	ldr	r3, [pc, #312]	; (8001834 <SPI1_MspInit+0x150>)
 80016fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <SPI1_MspInit+0x150>)
 8001706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001708:	4a4a      	ldr	r2, [pc, #296]	; (8001834 <SPI1_MspInit+0x150>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001710:	4b48      	ldr	r3, [pc, #288]	; (8001834 <SPI1_MspInit+0x150>)
 8001712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800171c:	2320      	movs	r3, #32
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001724:	2302      	movs	r3, #2
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800172c:	2305      	movs	r3, #5
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f003 fdb1 	bl	80052a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800173e:	2340      	movs	r3, #64	; 0x40
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001746:	2302      	movs	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800174e:	2305      	movs	r3, #5
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175c:	f003 fda0 	bl	80052a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176c:	2303      	movs	r3, #3
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001770:	2305      	movs	r3, #5
 8001772:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177e:	f003 fd8f 	bl	80052a0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <SPI1_MspInit+0x154>)
 8001784:	4a2d      	ldr	r2, [pc, #180]	; (800183c <SPI1_MspInit+0x158>)
 8001786:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8001788:	4b2b      	ldr	r3, [pc, #172]	; (8001838 <SPI1_MspInit+0x154>)
 800178a:	2201      	movs	r2, #1
 800178c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <SPI1_MspInit+0x154>)
 8001790:	2210      	movs	r2, #16
 8001792:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001794:	4b28      	ldr	r3, [pc, #160]	; (8001838 <SPI1_MspInit+0x154>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <SPI1_MspInit+0x154>)
 800179c:	2280      	movs	r2, #128	; 0x80
 800179e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017a0:	4b25      	ldr	r3, [pc, #148]	; (8001838 <SPI1_MspInit+0x154>)
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017a8:	4b23      	ldr	r3, [pc, #140]	; (8001838 <SPI1_MspInit+0x154>)
 80017aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ae:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <SPI1_MspInit+0x154>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80017b6:	4b20      	ldr	r3, [pc, #128]	; (8001838 <SPI1_MspInit+0x154>)
 80017b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017bc:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi1_tx);
 80017be:	481e      	ldr	r0, [pc, #120]	; (8001838 <SPI1_MspInit+0x154>)
 80017c0:	f003 fa22 	bl	8004c08 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <SPI1_MspInit+0x154>)
 80017c8:	655a      	str	r2, [r3, #84]	; 0x54
 80017ca:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <SPI1_MspInit+0x154>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_spi1_rx.Instance = DMA1_Channel2;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <SPI1_MspInit+0x15c>)
 80017d2:	4a1c      	ldr	r2, [pc, #112]	; (8001844 <SPI1_MspInit+0x160>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <SPI1_MspInit+0x15c>)
 80017d8:	2201      	movs	r2, #1
 80017da:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017dc:	4b18      	ldr	r3, [pc, #96]	; (8001840 <SPI1_MspInit+0x15c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e2:	4b17      	ldr	r3, [pc, #92]	; (8001840 <SPI1_MspInit+0x15c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <SPI1_MspInit+0x15c>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ee:	4b14      	ldr	r3, [pc, #80]	; (8001840 <SPI1_MspInit+0x15c>)
 80017f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017f4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017f6:	4b12      	ldr	r3, [pc, #72]	; (8001840 <SPI1_MspInit+0x15c>)
 80017f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <SPI1_MspInit+0x15c>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <SPI1_MspInit+0x15c>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi1_rx);
 800180a:	480d      	ldr	r0, [pc, #52]	; (8001840 <SPI1_MspInit+0x15c>)
 800180c:	f003 f9fc 	bl	8004c08 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <SPI1_MspInit+0x15c>)
 8001814:	659a      	str	r2, [r3, #88]	; 0x58
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SPI1_MspInit+0x15c>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800181c:	2200      	movs	r2, #0
 800181e:	2102      	movs	r1, #2
 8001820:	2023      	movs	r0, #35	; 0x23
 8001822:	f003 f9ac 	bl	8004b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001826:	2023      	movs	r0, #35	; 0x23
 8001828:	f003 f9c5 	bl	8004bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 800182c:	bf00      	nop
 800182e:	3728      	adds	r7, #40	; 0x28
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021000 	.word	0x40021000
 8001838:	200003a0 	.word	0x200003a0
 800183c:	40020030 	.word	0x40020030
 8001840:	200003e8 	.word	0x200003e8
 8001844:	4002001c 	.word	0x4002001c

08001848 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <SPI1_MspDeInit+0x54>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <SPI1_MspDeInit+0x54>)
 8001856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800185a:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 800185c:	2120      	movs	r1, #32
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f003 fec7 	bl	80055f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8001866:	2140      	movs	r1, #64	; 0x40
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f003 fec2 	bl	80055f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f003 febd 	bl	80055f4 <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	4618      	mov	r0, r3
 8001880:	f003 fa7a 	bl	8004d78 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fa75 	bl	8004d78 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 800188e:	2023      	movs	r0, #35	; 0x23
 8001890:	f003 f99f 	bl	8004bd2 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000

080018a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a8:	4a14      	ldr	r2, [pc, #80]	; (80018fc <_sbrk+0x5c>)
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <_sbrk+0x60>)
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d102      	bne.n	80018c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018bc:	4b11      	ldr	r3, [pc, #68]	; (8001904 <_sbrk+0x64>)
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <_sbrk+0x68>)
 80018c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <_sbrk+0x64>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d207      	bcs.n	80018e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018d0:	f006 ffba 	bl	8008848 <__errno>
 80018d4:	4603      	mov	r3, r0
 80018d6:	220c      	movs	r2, #12
 80018d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	e009      	b.n	80018f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <_sbrk+0x64>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <_sbrk+0x64>)
 80018f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20018000 	.word	0x20018000
 8001900:	00000400 	.word	0x00000400
 8001904:	20000430 	.word	0x20000430
 8001908:	2000b980 	.word	0x2000b980

0800190c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SystemInit+0x20>)
 8001912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001916:	4a05      	ldr	r2, [pc, #20]	; (800192c <SystemInit+0x20>)
 8001918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800191c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <vesc_init>:

static CAN_HandleTypeDef *vesc_can;
static VESC_Status status;

void vesc_init(CAN_HandleTypeDef *can_handle)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	/* Get pointer to the CAN handle */
	vesc_can = can_handle;
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <vesc_init+0x58>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  /* CAN filter to receive all messages */
  CAN_FilterTypeDef filter;
  filter.FilterActivation = CAN_FILTER_ENABLE;
 800193e:	2301      	movs	r3, #1
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  filter.FilterBank = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  filter.FilterMaskIdHigh = 0;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  filter.FilterMaskIdLow = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001956:	2301      	movs	r3, #1
 8001958:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(vesc_can, &filter);
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <vesc_init+0x58>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f107 0208 	add.w	r2, r7, #8
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f002 fba0 	bl	80040aa <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(vesc_can);
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <vesc_init+0x58>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f002 fc65 	bl	800423e <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(vesc_can, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <vesc_init+0x58>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2102      	movs	r1, #2
 800197a:	4618      	mov	r0, r3
 800197c:	f002 fdb5 	bl	80044ea <HAL_CAN_ActivateNotification>
}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000444 	.word	0x20000444

0800198c <HAL_CAN_TxMailbox1CompleteCallback>:
	  __asm__("nop");
  }
}

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	__asm__("nop");
 8001994:	bf00      	nop
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, RxData) != HAL_OK)
 80019ac:	f107 0208 	add.w	r2, r7, #8
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f002 fc86 	bl	80042c6 <HAL_CAN_GetRxMessage>
  {
    // Error occurred while receiving CAN message
  }

  // Check if the received message is from the VESC (assuming VESC has a specific CAN ID) - using 101 -> change to actual ID
  if ((rxHeader.ExtId & 0x00FF) == vesc_id)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d111      	bne.n	80019ea <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
    // Copy the received VESC message to vescMessage array
    for (int i = 0; i < 8; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e00b      	b.n	80019e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
    {
      vescMessage[i] = RxData[i];
 80019cc:	4a09      	ldr	r2, [pc, #36]	; (80019f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	4413      	add	r3, r2
 80019d2:	7819      	ldrb	r1, [r3, #0]
 80019d4:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	4413      	add	r3, r2
 80019da:	460a      	mov	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	2b07      	cmp	r3, #7
 80019e8:	ddf0      	ble.n	80019cc <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
  }
}
 80019ea:	bf00      	nop
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000434 	.word	0x20000434
 80019f8:	2000001c 	.word	0x2000001c
 80019fc:	2000043c 	.word	0x2000043c

08001a00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff ff82 	bl	800190c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f006 ff11 	bl	8008854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a32:	f7fe fc1d 	bl	8000270 <main>

08001a36 <LoopForever>:

LoopForever:
    b LoopForever
 8001a36:	e7fe      	b.n	8001a36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a40:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8001a44:	0800f200 	.word	0x0800f200
  ldr r2, =_sbss
 8001a48:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8001a4c:	2000b97c 	.word	0x2000b97c

08001a50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC1_2_IRQHandler>
	...

08001a54 <BSP_LCD_FillRGBRect2>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static int32_t BSP_LCD_FillRGBRect2(uint32_t Instance, uint32_t Xpos,
		uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af04      	add	r7, sp, #16
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
	while (1) {
		uint16_t current_display_line = (
				tearing_effect_counter > 0 ?
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <BSP_LCD_FillRGBRect2+0x58>)
 8001a64:	881b      	ldrh	r3, [r3, #0]
 8001a66:	b29b      	uxth	r3, r3
		uint16_t current_display_line = (
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d104      	bne.n	8001a76 <BSP_LCD_FillRGBRect2+0x22>
						0xFFFF : ((uint16_t) hLCDTIM.Instance->CNT));
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <BSP_LCD_FillRGBRect2+0x5c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		uint16_t current_display_line = (
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	e001      	b.n	8001a7a <BSP_LCD_FillRGBRect2+0x26>
 8001a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7a:	82fb      	strh	r3, [r7, #22]
		if ((Ypos + Height) < current_display_line) {
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	441a      	add	r2, r3
 8001a82:	8afb      	ldrh	r3, [r7, #22]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d2ec      	bcs.n	8001a62 <BSP_LCD_FillRGBRect2+0xe>
			return BSP_LCD_FillRGBRect(Instance, 0, pData, Xpos, Ypos, Width,
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	9302      	str	r3, [sp, #8]
 8001a8c:	6a3b      	ldr	r3, [r7, #32]
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	2100      	movs	r1, #0
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f000 fd6c 	bl	8002578 <BSP_LCD_FillRGBRect>
 8001aa0:	4603      	mov	r3, r0
					Height);
		}
	}
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2000b86c 	.word	0x2000b86c
 8001ab0:	20000130 	.word	0x20000130

08001ab4 <BSP_LCD_FillRect>:
  * @param  Ypos Y position
  * @param  Width Rectangle width
  * @param  Height Rectangle height
  */
static int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  uint32_t size;
  uint32_t CacheLinesCnt, CacheLinesSz;
  uint32_t offset = 0, line_cnt = Ypos;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	61fb      	str	r3, [r7, #28]

  size = (2*Width*Height);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	61bb      	str	r3, [r7, #24]
  CacheLinesCnt = (Height > BUFFER_CACHE_LINES ? BUFFER_CACHE_LINES : Height);
 8001ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad8:	2b18      	cmp	r3, #24
 8001ada:	bf28      	it	cs
 8001adc:	2318      	movcs	r3, #24
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
  CacheLinesSz = (2*Width*CacheLinesCnt);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	fb02 f303 	mul.w	r3, r2, r3
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	617b      	str	r3, [r7, #20]
  memset(CacheBuffer[0], Color, CacheLinesSz);
 8001aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	4619      	mov	r1, r3
 8001af2:	4839      	ldr	r0, [pc, #228]	; (8001bd8 <BSP_LCD_FillRect+0x124>)
 8001af4:	f006 fed2 	bl	800889c <memset>

  while(line_cnt < (Ypos + Height))
 8001af8:	e061      	b.n	8001bbe <BSP_LCD_FillRect+0x10a>
  {
    uint16_t current_display_line = (tearing_effect_counter > 0 ? 0xFFFF : ((uint16_t)hLCDTIM.Instance->CNT));
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <BSP_LCD_FillRect+0x128>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d104      	bne.n	8001b0e <BSP_LCD_FillRect+0x5a>
 8001b04:	4b36      	ldr	r3, [pc, #216]	; (8001be0 <BSP_LCD_FillRect+0x12c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	e001      	b.n	8001b12 <BSP_LCD_FillRect+0x5e>
 8001b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b12:	827b      	strh	r3, [r7, #18]
    if((line_cnt + CacheLinesCnt) < current_display_line)
 8001b14:	69fa      	ldr	r2, [r7, #28]
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	441a      	add	r2, r3
 8001b1a:	8a7b      	ldrh	r3, [r7, #18]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d216      	bcs.n	8001b4e <BSP_LCD_FillRect+0x9a>
    {
      if(BSP_LCD_FillRGBRect(Instance, 0, CacheBuffer[0], Xpos, line_cnt, Width, CacheLinesCnt) == BSP_ERROR_NONE)
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	9302      	str	r3, [sp, #8]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <BSP_LCD_FillRect+0x124>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 fd20 	bl	8002578 <BSP_LCD_FillRGBRect>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d107      	bne.n	8001b4e <BSP_LCD_FillRect+0x9a>
      {
        line_cnt += CacheLinesCnt;
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	4413      	add	r3, r2
 8001b44:	61fb      	str	r3, [r7, #28]
        offset += CacheLinesSz;
 8001b46:	6a3a      	ldr	r2, [r7, #32]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4413      	add	r3, r2
 8001b4c:	623b      	str	r3, [r7, #32]
      }
    }
    /* Check remaining data size */
    if(offset == size)
 8001b4e:	6a3a      	ldr	r2, [r7, #32]
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d03a      	beq.n	8001bcc <BSP_LCD_FillRect+0x118>
    {
      /* last block transfer was done, so exit */
      break;
    }
    else if((offset + CacheLinesSz) > size)
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d22d      	bcs.n	8001bbe <BSP_LCD_FillRect+0x10a>
    {
      /* Transfer last block and exit */
      CacheLinesCnt = ((size - offset)/ (2*Width));
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	1ad2      	subs	r2, r2, r3
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
      current_display_line = (tearing_effect_counter > 0 ? 0xFFFF : ((uint16_t)hLCDTIM.Instance->CNT));
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <BSP_LCD_FillRect+0x128>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d104      	bne.n	8001b86 <BSP_LCD_FillRect+0xd2>
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <BSP_LCD_FillRect+0x12c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e001      	b.n	8001b8a <BSP_LCD_FillRect+0xd6>
 8001b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8a:	827b      	strh	r3, [r7, #18]
      if((line_cnt + CacheLinesCnt) < current_display_line)
 8001b8c:	69fa      	ldr	r2, [r7, #28]
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	441a      	add	r2, r3
 8001b92:	8a7b      	ldrh	r3, [r7, #18]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d212      	bcs.n	8001bbe <BSP_LCD_FillRect+0x10a>
      {
        if(BSP_LCD_FillRGBRect(Instance, 0, CacheBuffer[0], Xpos, line_cnt, Width, CacheLinesCnt) == BSP_ERROR_NONE)
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a0c      	ldr	r2, [pc, #48]	; (8001bd8 <BSP_LCD_FillRect+0x124>)
 8001ba8:	2100      	movs	r1, #0
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 fce4 	bl	8002578 <BSP_LCD_FillRGBRect>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <BSP_LCD_FillRect+0x10a>
        {
          line_cnt += CacheLinesCnt;
 8001bb6:	69fa      	ldr	r2, [r7, #28]
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	4413      	add	r3, r2
 8001bbc:	61fb      	str	r3, [r7, #28]
  while(line_cnt < (Ypos + Height))
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc2:	4413      	add	r3, r2
 8001bc4:	69fa      	ldr	r2, [r7, #28]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d397      	bcc.n	8001afa <BSP_LCD_FillRect+0x46>
 8001bca:	e000      	b.n	8001bce <BSP_LCD_FillRect+0x11a>
      break;
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  return BSP_ERROR_NONE;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3728      	adds	r7, #40	; 0x28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000448 	.word	0x20000448
 8001bdc:	2000b86c 	.word	0x2000b86c
 8001be0:	20000130 	.word	0x20000130

08001be4 <BSP_LCD_GetPixelFormat>:

static int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat) {
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	int32_t ret = BSP_ERROR_NONE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]

	if (Instance >= LCD_INSTANCES_NBR) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <BSP_LCD_GetPixelFormat+0x1c>
		ret = BSP_ERROR_WRONG_PARAM;
 8001bf8:	f06f 0301 	mvn.w	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	e002      	b.n	8001c06 <BSP_LCD_GetPixelFormat+0x22>
	} else {
		/* Only RGB565 format is supported */
		*PixelFormat = LCD_PIXEL_FORMAT_RGB565;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2202      	movs	r2, #2
 8001c04:	601a      	str	r2, [r3, #0]
	}

	return ret;
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <BSP_LCD_Clear>:

static void BSP_LCD_Clear(uint32_t Instance, uint32_t Xpos, uint32_t Ypos,
		uint32_t Width, uint32_t Height) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af02      	add	r7, sp, #8
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
 8001c20:	603b      	str	r3, [r7, #0]
	BSP_LCD_FillRect(Instance, Xpos, Ypos, Width, Height, 0);
 8001c22:	2300      	movs	r3, #0
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f7ff ff3f 	bl	8001ab4 <BSP_LCD_FillRect>
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <handleButtonClick>:

void handleButtonClick() {
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
    // Increment the current screen
    currentScreen++;
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <handleButtonClick+0x28>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <handleButtonClick+0x28>)
 8001c4e:	701a      	strb	r2, [r3, #0]

    // If the current screen exceeds the maximum screen, wrap back to the first screen
    if (currentScreen > POWER_SCREEN) {
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <handleButtonClick+0x28>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d902      	bls.n	8001c5e <handleButtonClick+0x1e>
        currentScreen = SPEED_SCREEN;
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <handleButtonClick+0x28>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    }
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	2000b86e 	.word	0x2000b86e

08001c6c <MX_DISPLAY_Init>:

/**
 * Initialize DISPLAY application
 */
void MX_DISPLAY_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN MX_DISPLAY_Init 0 */

  /* USER CODE END MX_DISPLAY_Init 0 */
  if(BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 8001c72:	2100      	movs	r1, #0
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 facf 	bl	8002218 <BSP_LCD_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_DISPLAY_Init+0x18>
  {
    Error_Handler();
 8001c80:	f7fe fcc6 	bl	8000610 <Error_Handler>
  }
  if(BSP_MEM_Init(0) != BSP_ERROR_NONE)
 8001c84:	2000      	movs	r0, #0
 8001c86:	f000 fefd 	bl	8002a84 <BSP_MEM_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_DISPLAY_Init+0x28>
  {
    Error_Handler();
 8001c90:	f7fe fcbe 	bl	8000610 <Error_Handler>
  }
  if(BSP_KEY_Init(0, KEY_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f000 f9d6 	bl	8002048 <BSP_KEY_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_DISPLAY_Init+0x3a>
  {
    Error_Handler();
 8001ca2:	f7fe fcb5 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN MX_DISPLAY_Init 1 */
	if ((BSP_LCD_GetXSize(0, &LCD_Width) != BSP_ERROR_NONE)
 8001ca6:	4918      	ldr	r1, [pc, #96]	; (8001d08 <MX_DISPLAY_Init+0x9c>)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 fb11 	bl	80022d0 <BSP_LCD_GetXSize>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10d      	bne.n	8001cd0 <MX_DISPLAY_Init+0x64>
			|| (BSP_LCD_GetYSize(0, &LCD_Height) != BSP_ERROR_NONE)
 8001cb4:	4915      	ldr	r1, [pc, #84]	; (8001d0c <MX_DISPLAY_Init+0xa0>)
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f000 fb40 	bl	800233c <BSP_LCD_GetYSize>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <MX_DISPLAY_Init+0x64>
			|| (BSP_LCD_GetOrientation(0, &LCD_Orientation) != BSP_ERROR_NONE)) {
 8001cc2:	4913      	ldr	r1, [pc, #76]	; (8001d10 <MX_DISPLAY_Init+0xa4>)
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f000 facd 	bl	8002264 <BSP_LCD_GetOrientation>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_DISPLAY_Init+0x68>
		Error_Handler();
 8001cd0:	f7fe fc9e 	bl	8000610 <Error_Handler>
	}
	BSP_LCD_Clear(0, 0, 0, LCD_Width, LCD_Height);
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_DISPLAY_Init+0x9c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_DISPLAY_Init+0xa0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f7ff ff95 	bl	8001c14 <BSP_LCD_Clear>
	if (BSP_LCD_DisplayOn(0) != BSP_ERROR_NONE) {
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 fb5c 	bl	80023a8 <BSP_LCD_DisplayOn>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_DISPLAY_Init+0x8e>
		Error_Handler();
 8001cf6:	f7fe fc8b 	bl	8000610 <Error_Handler>
	}

	UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_DISPLAY_Init+0xa8>)
 8001cfc:	f7fe fc8e 	bl	800061c <UTIL_LCD_SetFuncDriver>
  /* USER CODE END MX_DISPLAY_Init 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2000b84c 	.word	0x2000b84c
 8001d0c:	2000b850 	.word	0x2000b850
 8001d10:	2000b854 	.word	0x2000b854
 8001d14:	0800f164 	.word	0x0800f164

08001d18 <MX_DISPLAY_Process>:

/**
 * DISPLAY application entry function
 */
void MX_DISPLAY_Process(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN MX_DISPLAY_Process */
	if (BSP_KEY_GetState(0, &key) == BSP_ERROR_NONE) {
 8001d1e:	49ad      	ldr	r1, [pc, #692]	; (8001fd4 <MX_DISPLAY_Process+0x2bc>)
 8001d20:	2000      	movs	r0, #0
 8001d22:	f000 f9a7 	bl	8002074 <BSP_KEY_GetState>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <MX_DISPLAY_Process+0x26>
			if (key == BSP_KEY_CENTER) {
 8001d2c:	4ba9      	ldr	r3, [pc, #676]	; (8001fd4 <MX_DISPLAY_Process+0x2bc>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d104      	bne.n	8001d3e <MX_DISPLAY_Process+0x26>
				handleButtonClick();
 8001d34:	f7ff ff84 	bl	8001c40 <handleButtonClick>
				UTIL_LCD_Clear(UTIL_LCD_COLOR_TRANSPARENT);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7fe fd1d 	bl	8000778 <UTIL_LCD_Clear>
			}
		}

			// Update and display the current screen
			switch (currentScreen) {
 8001d3e:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <MX_DISPLAY_Process+0x2c0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b03      	cmp	r3, #3
 8001d44:	f200 8105 	bhi.w	8001f52 <MX_DISPLAY_Process+0x23a>
 8001d48:	a201      	add	r2, pc, #4	; (adr r2, 8001d50 <MX_DISPLAY_Process+0x38>)
 8001d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d4e:	bf00      	nop
 8001d50:	08001d61 	.word	0x08001d61
 8001d54:	08001def 	.word	0x08001def
 8001d58:	08001e5d 	.word	0x08001e5d
 8001d5c:	08001ed7 	.word	0x08001ed7
			case SPEED_SCREEN:
				UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_TRANSPARENT);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe fcc5 	bl	80006f0 <UTIL_LCD_SetBackColor>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8001d66:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001d6a:	f7fe fcad 	bl	80006c8 <UTIL_LCD_SetTextColor>

				UTIL_LCD_SetFont(&Font24);
 8001d6e:	489b      	ldr	r0, [pc, #620]	; (8001fdc <MX_DISPLAY_Process+0x2c4>)
 8001d70:	f7fe fcd2 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(posx, posy, COMPANY_NAME, CENTER_MODE);
 8001d74:	4b9a      	ldr	r3, [pc, #616]	; (8001fe0 <MX_DISPLAY_Process+0x2c8>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4b9a      	ldr	r3, [pc, #616]	; (8001fe4 <MX_DISPLAY_Process+0x2cc>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2301      	movs	r3, #1
 8001d82:	4a99      	ldr	r2, [pc, #612]	; (8001fe8 <MX_DISPLAY_Process+0x2d0>)
 8001d84:	f7fe fd44 	bl	8000810 <UTIL_LCD_DisplayStringAt>

				snprintf(buffer, sizeof(buffer), "%d", vescMessage[8]);
 8001d88:	4b98      	ldr	r3, [pc, #608]	; (8001fec <MX_DISPLAY_Process+0x2d4>)
 8001d8a:	7a1b      	ldrb	r3, [r3, #8]
 8001d8c:	4a98      	ldr	r2, [pc, #608]	; (8001ff0 <MX_DISPLAY_Process+0x2d8>)
 8001d8e:	2110      	movs	r1, #16
 8001d90:	4898      	ldr	r0, [pc, #608]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001d92:	f006 fd8b 	bl	80088ac <sniprintf>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9a:	f7fe fc95 	bl	80006c8 <UTIL_LCD_SetTextColor>
				UTIL_LCD_SetFont(&Font20);
 8001d9e:	4896      	ldr	r0, [pc, #600]	; (8001ff8 <MX_DISPLAY_Process+0x2e0>)
 8001da0:	f7fe fcba 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "SPEED", LEFT_MODE);
 8001da4:	2303      	movs	r3, #3
 8001da6:	4a95      	ldr	r2, [pc, #596]	; (8001ffc <MX_DISPLAY_Process+0x2e4>)
 8001da8:	2150      	movs	r1, #80	; 0x50
 8001daa:	200f      	movs	r0, #15
 8001dac:	f7fe fd30 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "KM/H", RIGHT_MODE);
 8001db0:	2302      	movs	r3, #2
 8001db2:	4a93      	ldr	r2, [pc, #588]	; (8002000 <MX_DISPLAY_Process+0x2e8>)
 8001db4:	2150      	movs	r1, #80	; 0x50
 8001db6:	200f      	movs	r0, #15
 8001db8:	f7fe fd2a 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetFont(&Font48);
 8001dbc:	4891      	ldr	r0, [pc, #580]	; (8002004 <MX_DISPLAY_Process+0x2ec>)
 8001dbe:	f7fe fcab 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 140, (uint8_t*) buffer, CENTER_MODE);
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	4a8b      	ldr	r2, [pc, #556]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001dc6:	218c      	movs	r1, #140	; 0x8c
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7fe fd21 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				memset(buffer, 0, sizeof(buffer));
 8001dce:	2210      	movs	r2, #16
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	4888      	ldr	r0, [pc, #544]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001dd4:	f006 fd62 	bl	800889c <memset>
				UTIL_LCD_FillRect(280, 10, 30, 15, 0x07E0);
 8001dd8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	230f      	movs	r3, #15
 8001de0:	221e      	movs	r2, #30
 8001de2:	210a      	movs	r1, #10
 8001de4:	f44f 708c 	mov.w	r0, #280	; 0x118
 8001de8:	f7fe fdc0 	bl	800096c <UTIL_LCD_FillRect>
				break;
 8001dec:	e0ee      	b.n	8001fcc <MX_DISPLAY_Process+0x2b4>
			case ASSIST_SCREEN:
				UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_TRANSPARENT);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe fc7e 	bl	80006f0 <UTIL_LCD_SetBackColor>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_YELLOW);
 8001df4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001df8:	f7fe fc66 	bl	80006c8 <UTIL_LCD_SetTextColor>

				UTIL_LCD_SetFont(&Font24);
 8001dfc:	4877      	ldr	r0, [pc, #476]	; (8001fdc <MX_DISPLAY_Process+0x2c4>)
 8001dfe:	f7fe fc8b 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(posx, posy, COMPANY_NAME, CENTER_MODE);
 8001e02:	4b77      	ldr	r3, [pc, #476]	; (8001fe0 <MX_DISPLAY_Process+0x2c8>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	4b76      	ldr	r3, [pc, #472]	; (8001fe4 <MX_DISPLAY_Process+0x2cc>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	2301      	movs	r3, #1
 8001e10:	4a75      	ldr	r2, [pc, #468]	; (8001fe8 <MX_DISPLAY_Process+0x2d0>)
 8001e12:	f7fe fcfd 	bl	8000810 <UTIL_LCD_DisplayStringAt>

				snprintf(buffer, sizeof(buffer), "%d", assist_level);
 8001e16:	4b7c      	ldr	r3, [pc, #496]	; (8002008 <MX_DISPLAY_Process+0x2f0>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <MX_DISPLAY_Process+0x2d8>)
 8001e1c:	2110      	movs	r1, #16
 8001e1e:	4875      	ldr	r0, [pc, #468]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001e20:	f006 fd44 	bl	80088ac <sniprintf>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7fe fc4e 	bl	80006c8 <UTIL_LCD_SetTextColor>
				UTIL_LCD_SetFont(&Font20);
 8001e2c:	4872      	ldr	r0, [pc, #456]	; (8001ff8 <MX_DISPLAY_Process+0x2e0>)
 8001e2e:	f7fe fc73 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 80, (uint8_t*) "ASSIST LEVEL", CENTER_MODE);
 8001e32:	2301      	movs	r3, #1
 8001e34:	4a75      	ldr	r2, [pc, #468]	; (800200c <MX_DISPLAY_Process+0x2f4>)
 8001e36:	2150      	movs	r1, #80	; 0x50
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7fe fce9 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetFont(&Font48);
 8001e3e:	4871      	ldr	r0, [pc, #452]	; (8002004 <MX_DISPLAY_Process+0x2ec>)
 8001e40:	f7fe fc6a 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 140, (uint8_t*) buffer, CENTER_MODE);
 8001e44:	2301      	movs	r3, #1
 8001e46:	4a6b      	ldr	r2, [pc, #428]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001e48:	218c      	movs	r1, #140	; 0x8c
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7fe fce0 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				memset(buffer, 0, sizeof(buffer));
 8001e50:	2210      	movs	r2, #16
 8001e52:	2100      	movs	r1, #0
 8001e54:	4867      	ldr	r0, [pc, #412]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001e56:	f006 fd21 	bl	800889c <memset>
				break;
 8001e5a:	e0b7      	b.n	8001fcc <MX_DISPLAY_Process+0x2b4>
			case BATTERY_SCREEN:
				UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_TRANSPARENT);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7fe fc47 	bl	80006f0 <UTIL_LCD_SetBackColor>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_YELLOW);
 8001e62:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001e66:	f7fe fc2f 	bl	80006c8 <UTIL_LCD_SetTextColor>

				UTIL_LCD_SetFont(&Font24);
 8001e6a:	485c      	ldr	r0, [pc, #368]	; (8001fdc <MX_DISPLAY_Process+0x2c4>)
 8001e6c:	f7fe fc54 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(posx, posy, COMPANY_NAME, CENTER_MODE);
 8001e70:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <MX_DISPLAY_Process+0x2c8>)
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <MX_DISPLAY_Process+0x2cc>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	4a5a      	ldr	r2, [pc, #360]	; (8001fe8 <MX_DISPLAY_Process+0x2d0>)
 8001e80:	f7fe fcc6 	bl	8000810 <UTIL_LCD_DisplayStringAt>

				snprintf(buffer, sizeof(buffer), "%d", battery_level);
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <MX_DISPLAY_Process+0x2f8>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <MX_DISPLAY_Process+0x2d8>)
 8001e8a:	2110      	movs	r1, #16
 8001e8c:	4859      	ldr	r0, [pc, #356]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001e8e:	f006 fd0d 	bl	80088ac <sniprintf>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001e92:	f04f 30ff 	mov.w	r0, #4294967295
 8001e96:	f7fe fc17 	bl	80006c8 <UTIL_LCD_SetTextColor>
				UTIL_LCD_SetFont(&Font20);
 8001e9a:	4857      	ldr	r0, [pc, #348]	; (8001ff8 <MX_DISPLAY_Process+0x2e0>)
 8001e9c:	f7fe fc3c 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "BATTERY LEVEL", LEFT_MODE);
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	4a5c      	ldr	r2, [pc, #368]	; (8002014 <MX_DISPLAY_Process+0x2fc>)
 8001ea4:	2150      	movs	r1, #80	; 0x50
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f7fe fcb2 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "%", RIGHT_MODE);
 8001eac:	2302      	movs	r3, #2
 8001eae:	4a5a      	ldr	r2, [pc, #360]	; (8002018 <MX_DISPLAY_Process+0x300>)
 8001eb0:	2150      	movs	r1, #80	; 0x50
 8001eb2:	200f      	movs	r0, #15
 8001eb4:	f7fe fcac 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetFont(&Font48);
 8001eb8:	4852      	ldr	r0, [pc, #328]	; (8002004 <MX_DISPLAY_Process+0x2ec>)
 8001eba:	f7fe fc2d 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 140, (uint8_t*) buffer, CENTER_MODE);
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001ec2:	218c      	movs	r1, #140	; 0x8c
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7fe fca3 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				memset(buffer, 0, sizeof(buffer));
 8001eca:	2210      	movs	r2, #16
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4849      	ldr	r0, [pc, #292]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001ed0:	f006 fce4 	bl	800889c <memset>
				break;
 8001ed4:	e07a      	b.n	8001fcc <MX_DISPLAY_Process+0x2b4>
			case POWER_SCREEN:
				UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLACK);
 8001ed6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001eda:	f7fe fc09 	bl	80006f0 <UTIL_LCD_SetBackColor>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_YELLOW);
 8001ede:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001ee2:	f7fe fbf1 	bl	80006c8 <UTIL_LCD_SetTextColor>

				UTIL_LCD_SetFont(&Font24);
 8001ee6:	483d      	ldr	r0, [pc, #244]	; (8001fdc <MX_DISPLAY_Process+0x2c4>)
 8001ee8:	f7fe fc16 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(posx, posy, COMPANY_NAME, CENTER_MODE);
 8001eec:	4b3c      	ldr	r3, [pc, #240]	; (8001fe0 <MX_DISPLAY_Process+0x2c8>)
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <MX_DISPLAY_Process+0x2cc>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	2301      	movs	r3, #1
 8001efa:	4a3b      	ldr	r2, [pc, #236]	; (8001fe8 <MX_DISPLAY_Process+0x2d0>)
 8001efc:	f7fe fc88 	bl	8000810 <UTIL_LCD_DisplayStringAt>

				snprintf(buffer, sizeof(buffer), "%d", available_power);
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <MX_DISPLAY_Process+0x304>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4a3a      	ldr	r2, [pc, #232]	; (8001ff0 <MX_DISPLAY_Process+0x2d8>)
 8001f06:	2110      	movs	r1, #16
 8001f08:	483a      	ldr	r0, [pc, #232]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001f0a:	f006 fccf 	bl	80088ac <sniprintf>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f12:	f7fe fbd9 	bl	80006c8 <UTIL_LCD_SetTextColor>
				UTIL_LCD_SetFont(&Font20);
 8001f16:	4838      	ldr	r0, [pc, #224]	; (8001ff8 <MX_DISPLAY_Process+0x2e0>)
 8001f18:	f7fe fbfe 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "AVAILABLE POWER", LEFT_MODE);
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	4a40      	ldr	r2, [pc, #256]	; (8002020 <MX_DISPLAY_Process+0x308>)
 8001f20:	2150      	movs	r1, #80	; 0x50
 8001f22:	200f      	movs	r0, #15
 8001f24:	f7fe fc74 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "W", RIGHT_MODE);
 8001f28:	2302      	movs	r3, #2
 8001f2a:	4a3e      	ldr	r2, [pc, #248]	; (8002024 <MX_DISPLAY_Process+0x30c>)
 8001f2c:	2150      	movs	r1, #80	; 0x50
 8001f2e:	200f      	movs	r0, #15
 8001f30:	f7fe fc6e 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetFont(&Font48);
 8001f34:	4833      	ldr	r0, [pc, #204]	; (8002004 <MX_DISPLAY_Process+0x2ec>)
 8001f36:	f7fe fbef 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 140, (uint8_t*) buffer, CENTER_MODE);
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001f3e:	218c      	movs	r1, #140	; 0x8c
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7fe fc65 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				memset(buffer, 0, sizeof(buffer));
 8001f46:	2210      	movs	r2, #16
 8001f48:	2100      	movs	r1, #0
 8001f4a:	482a      	ldr	r0, [pc, #168]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001f4c:	f006 fca6 	bl	800889c <memset>
				break;
 8001f50:	e03c      	b.n	8001fcc <MX_DISPLAY_Process+0x2b4>
			default:
				UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_TRANSPARENT);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7fe fbcc 	bl	80006f0 <UTIL_LCD_SetBackColor>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_YELLOW);
 8001f58:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001f5c:	f7fe fbb4 	bl	80006c8 <UTIL_LCD_SetTextColor>

				UTIL_LCD_SetFont(&Font24);
 8001f60:	481e      	ldr	r0, [pc, #120]	; (8001fdc <MX_DISPLAY_Process+0x2c4>)
 8001f62:	f7fe fbd9 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(posx, posy, COMPANY_NAME, CENTER_MODE);
 8001f66:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <MX_DISPLAY_Process+0x2c8>)
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	; (8001fe4 <MX_DISPLAY_Process+0x2cc>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	4619      	mov	r1, r3
 8001f72:	2301      	movs	r3, #1
 8001f74:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <MX_DISPLAY_Process+0x2d0>)
 8001f76:	f7fe fc4b 	bl	8000810 <UTIL_LCD_DisplayStringAt>

				snprintf(buffer, sizeof(buffer), "%d", speed);
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <MX_DISPLAY_Process+0x310>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <MX_DISPLAY_Process+0x2d8>)
 8001f80:	2110      	movs	r1, #16
 8001f82:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001f84:	f006 fc92 	bl	80088ac <sniprintf>
				UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7fe fb9c 	bl	80006c8 <UTIL_LCD_SetTextColor>
				UTIL_LCD_SetFont(&Font20);
 8001f90:	4819      	ldr	r0, [pc, #100]	; (8001ff8 <MX_DISPLAY_Process+0x2e0>)
 8001f92:	f7fe fbc1 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "SPEED", LEFT_MODE);
 8001f96:	2303      	movs	r3, #3
 8001f98:	4a18      	ldr	r2, [pc, #96]	; (8001ffc <MX_DISPLAY_Process+0x2e4>)
 8001f9a:	2150      	movs	r1, #80	; 0x50
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f7fe fc37 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_DisplayStringAt(15, 80, (uint8_t*) "KM/H", RIGHT_MODE);
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	4a16      	ldr	r2, [pc, #88]	; (8002000 <MX_DISPLAY_Process+0x2e8>)
 8001fa6:	2150      	movs	r1, #80	; 0x50
 8001fa8:	200f      	movs	r0, #15
 8001faa:	f7fe fc31 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				UTIL_LCD_SetFont(&Font48);
 8001fae:	4815      	ldr	r0, [pc, #84]	; (8002004 <MX_DISPLAY_Process+0x2ec>)
 8001fb0:	f7fe fbb2 	bl	8000718 <UTIL_LCD_SetFont>
				UTIL_LCD_DisplayStringAt(0, 140, (uint8_t*) buffer, CENTER_MODE);
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001fb8:	218c      	movs	r1, #140	; 0x8c
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7fe fc28 	bl	8000810 <UTIL_LCD_DisplayStringAt>
				memset(buffer, 0, sizeof(buffer));
 8001fc0:	2210      	movs	r2, #16
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <MX_DISPLAY_Process+0x2dc>)
 8001fc6:	f006 fc69 	bl	800889c <memset>
				break;
 8001fca:	bf00      	nop
			}
  /* USER CODE END MX_DISPLAY_Process */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000001d 	.word	0x2000001d
 8001fd8:	2000b86e 	.word	0x2000b86e
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	2000b848 	.word	0x2000b848
 8001fe4:	2000b84a 	.word	0x2000b84a
 8001fe8:	080091c8 	.word	0x080091c8
 8001fec:	2000043c 	.word	0x2000043c
 8001ff0:	080091d8 	.word	0x080091d8
 8001ff4:	2000b85c 	.word	0x2000b85c
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	080091dc 	.word	0x080091dc
 8002000:	080091e4 	.word	0x080091e4
 8002004:	20000010 	.word	0x20000010
 8002008:	2000b859 	.word	0x2000b859
 800200c:	080091ec 	.word	0x080091ec
 8002010:	2000b85a 	.word	0x2000b85a
 8002014:	080091fc 	.word	0x080091fc
 8002018:	0800920c 	.word	0x0800920c
 800201c:	2000b85b 	.word	0x2000b85b
 8002020:	08009210 	.word	0x08009210
 8002024:	08009220 	.word	0x08009220
 8002028:	2000b858 	.word	0x2000b858

0800202c <BSP_LCD_SignalTearingEffectEvent>:

void BSP_LCD_SignalTearingEffectEvent(uint32_t Instance, uint8_t state, uint16_t Line)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	803b      	strh	r3, [r7, #0]
    {
      /* TE event is done : de-allow display refresh */
    }
    /* USER CODE END BSP_LCD_SignalTearingEffectEvent */
  }
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <BSP_KEY_Init>:
  * @param  Instance:     KEY Instance.
  * @param  Orientation:  KEY Orientation.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_KEY_Init(uint32_t Instance, uint8_t Orientation)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
  int32_t ret = BSP_ERROR_NONE;
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]

  BSP_KEY_CHECK_PARAMS(Instance);

  KeyCtx[Instance].Orientation = Orientation;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	4905      	ldr	r1, [pc, #20]	; (8002070 <BSP_KEY_Init+0x28>)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return ret;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	2000b870 	.word	0x2000b870

08002074 <BSP_KEY_GetState>:
  * @param  Instance:     KEY Instance.
  * @param  pState:       Pointer to Key State.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_KEY_GetState(uint32_t Instance, uint8_t *pState)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  BSP_KEY_CHECK_PARAMS(Instance);

  *pState = BSP_KEY_INVALID;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]

#if defined(KEY_CENTER_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_CENTER_GPIO_PORT, KEY_CENTER_GPIO_PIN) == KEY_PRESSED_STATE)
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	4861      	ldr	r0, [pc, #388]	; (800220c <BSP_KEY_GetState+0x198>)
 8002088:	f003 fba8 	bl	80057dc <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <BSP_KEY_GetState+0x26>
    *pState = BSP_KEY_CENTER;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]
 8002098:	e0b2      	b.n	8002200 <BSP_KEY_GetState+0x18c>
  else
#endif /* KEY_CENTER_GPIO_PIN */
#if defined(KEY_UP_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_UP_GPIO_PORT, KEY_UP_GPIO_PIN) == KEY_PRESSED_STATE)
 800209a:	2101      	movs	r1, #1
 800209c:	485b      	ldr	r0, [pc, #364]	; (800220c <BSP_KEY_GetState+0x198>)
 800209e:	f003 fb9d 	bl	80057dc <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d123      	bne.n	80020f0 <BSP_KEY_GetState+0x7c>
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_UP :
 80020a8:	4a59      	ldr	r2, [pc, #356]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d019      	beq.n	80020e8 <BSP_KEY_GetState+0x74>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT_ROT180  ? BSP_KEY_DOWN :
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_UP :
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d011      	beq.n	80020e4 <BSP_KEY_GetState+0x70>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE        ? BSP_KEY_RIGHT :
 80020c0:	4a53      	ldr	r2, [pc, #332]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_UP :
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d009      	beq.n	80020e0 <BSP_KEY_GetState+0x6c>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE_ROT180 ? BSP_KEY_LEFT : BSP_KEY_INVALID))));
 80020cc:	4a50      	ldr	r2, [pc, #320]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_UP :
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d101      	bne.n	80020dc <BSP_KEY_GetState+0x68>
 80020d8:	2304      	movs	r3, #4
 80020da:	e006      	b.n	80020ea <BSP_KEY_GetState+0x76>
 80020dc:	2300      	movs	r3, #0
 80020de:	e004      	b.n	80020ea <BSP_KEY_GetState+0x76>
 80020e0:	2305      	movs	r3, #5
 80020e2:	e002      	b.n	80020ea <BSP_KEY_GetState+0x76>
 80020e4:	2303      	movs	r3, #3
 80020e6:	e000      	b.n	80020ea <BSP_KEY_GetState+0x76>
 80020e8:	2302      	movs	r3, #2
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	7013      	strb	r3, [r2, #0]
 80020ee:	e087      	b.n	8002200 <BSP_KEY_GetState+0x18c>
  else
#endif /* KEY_UP_GPIO_PIN */
#if defined(KEY_DOWN_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_DOWN_GPIO_PORT, KEY_DOWN_GPIO_PIN) == KEY_PRESSED_STATE)
 80020f0:	2110      	movs	r1, #16
 80020f2:	4848      	ldr	r0, [pc, #288]	; (8002214 <BSP_KEY_GetState+0x1a0>)
 80020f4:	f003 fb72 	bl	80057dc <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d123      	bne.n	8002146 <BSP_KEY_GetState+0xd2>
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_DOWN :
 80020fe:	4a44      	ldr	r2, [pc, #272]	; (8002210 <BSP_KEY_GetState+0x19c>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d019      	beq.n	800213e <BSP_KEY_GetState+0xca>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT_ROT180  ? BSP_KEY_UP :
 800210a:	4a41      	ldr	r2, [pc, #260]	; (8002210 <BSP_KEY_GetState+0x19c>)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_DOWN :
 8002112:	2b01      	cmp	r3, #1
 8002114:	d011      	beq.n	800213a <BSP_KEY_GetState+0xc6>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE        ? BSP_KEY_LEFT :
 8002116:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <BSP_KEY_GetState+0x19c>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_DOWN :
 800211e:	2b02      	cmp	r3, #2
 8002120:	d009      	beq.n	8002136 <BSP_KEY_GetState+0xc2>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE_ROT180 ? BSP_KEY_RIGHT : BSP_KEY_INVALID))));
 8002122:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <BSP_KEY_GetState+0x19c>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_DOWN :
 800212a:	2b03      	cmp	r3, #3
 800212c:	d101      	bne.n	8002132 <BSP_KEY_GetState+0xbe>
 800212e:	2305      	movs	r3, #5
 8002130:	e006      	b.n	8002140 <BSP_KEY_GetState+0xcc>
 8002132:	2300      	movs	r3, #0
 8002134:	e004      	b.n	8002140 <BSP_KEY_GetState+0xcc>
 8002136:	2304      	movs	r3, #4
 8002138:	e002      	b.n	8002140 <BSP_KEY_GetState+0xcc>
 800213a:	2302      	movs	r3, #2
 800213c:	e000      	b.n	8002140 <BSP_KEY_GetState+0xcc>
 800213e:	2303      	movs	r3, #3
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	7013      	strb	r3, [r2, #0]
 8002144:	e05c      	b.n	8002200 <BSP_KEY_GetState+0x18c>
  else
#endif /* KEY_DOWN_GPIO_PIN */
#if defined(KEY_LEFT_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_LEFT_GPIO_PORT, KEY_LEFT_GPIO_PIN) == KEY_PRESSED_STATE)
 8002146:	2140      	movs	r1, #64	; 0x40
 8002148:	4832      	ldr	r0, [pc, #200]	; (8002214 <BSP_KEY_GetState+0x1a0>)
 800214a:	f003 fb47 	bl	80057dc <HAL_GPIO_ReadPin>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d123      	bne.n	800219c <BSP_KEY_GetState+0x128>
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_LEFT :
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <BSP_KEY_GetState+0x19c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d019      	beq.n	8002194 <BSP_KEY_GetState+0x120>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT_ROT180  ? BSP_KEY_RIGHT :
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <BSP_KEY_GetState+0x19c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_LEFT :
 8002168:	2b01      	cmp	r3, #1
 800216a:	d011      	beq.n	8002190 <BSP_KEY_GetState+0x11c>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE        ? BSP_KEY_DOWN :
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <BSP_KEY_GetState+0x19c>)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_LEFT :
 8002174:	2b02      	cmp	r3, #2
 8002176:	d009      	beq.n	800218c <BSP_KEY_GetState+0x118>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE_ROT180 ? BSP_KEY_UP : BSP_KEY_INVALID))));
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <BSP_KEY_GetState+0x19c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_LEFT :
 8002180:	2b03      	cmp	r3, #3
 8002182:	d101      	bne.n	8002188 <BSP_KEY_GetState+0x114>
 8002184:	2302      	movs	r3, #2
 8002186:	e006      	b.n	8002196 <BSP_KEY_GetState+0x122>
 8002188:	2300      	movs	r3, #0
 800218a:	e004      	b.n	8002196 <BSP_KEY_GetState+0x122>
 800218c:	2303      	movs	r3, #3
 800218e:	e002      	b.n	8002196 <BSP_KEY_GetState+0x122>
 8002190:	2305      	movs	r3, #5
 8002192:	e000      	b.n	8002196 <BSP_KEY_GetState+0x122>
 8002194:	2304      	movs	r3, #4
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	7013      	strb	r3, [r2, #0]
 800219a:	e031      	b.n	8002200 <BSP_KEY_GetState+0x18c>
  else
#endif /* KEY_LEFT_GPIO_PIN */
#if defined(KEY_RIGHT_GPIO_PIN)
  if (HAL_GPIO_ReadPin(KEY_RIGHT_GPIO_PORT, KEY_RIGHT_GPIO_PIN) == KEY_PRESSED_STATE)
 800219c:	2101      	movs	r1, #1
 800219e:	481d      	ldr	r0, [pc, #116]	; (8002214 <BSP_KEY_GetState+0x1a0>)
 80021a0:	f003 fb1c 	bl	80057dc <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d123      	bne.n	80021f2 <BSP_KEY_GetState+0x17e>
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_RIGHT :
 80021aa:	4a19      	ldr	r2, [pc, #100]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d019      	beq.n	80021ea <BSP_KEY_GetState+0x176>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT_ROT180  ? BSP_KEY_LEFT :
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_RIGHT :
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d011      	beq.n	80021e6 <BSP_KEY_GetState+0x172>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE        ? BSP_KEY_UP :
 80021c2:	4a13      	ldr	r2, [pc, #76]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_RIGHT :
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d009      	beq.n	80021e2 <BSP_KEY_GetState+0x16e>
              (KeyCtx[Instance].Orientation == KEY_ORIENTATION_LANDSCAPE_ROT180 ? BSP_KEY_DOWN : BSP_KEY_INVALID))));
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <BSP_KEY_GetState+0x19c>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    *pState =  (KeyCtx[Instance].Orientation == KEY_ORIENTATION_PORTRAIT        ? BSP_KEY_RIGHT :
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	d101      	bne.n	80021de <BSP_KEY_GetState+0x16a>
 80021da:	2303      	movs	r3, #3
 80021dc:	e006      	b.n	80021ec <BSP_KEY_GetState+0x178>
 80021de:	2300      	movs	r3, #0
 80021e0:	e004      	b.n	80021ec <BSP_KEY_GetState+0x178>
 80021e2:	2302      	movs	r3, #2
 80021e4:	e002      	b.n	80021ec <BSP_KEY_GetState+0x178>
 80021e6:	2304      	movs	r3, #4
 80021e8:	e000      	b.n	80021ec <BSP_KEY_GetState+0x178>
 80021ea:	2305      	movs	r3, #5
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	7013      	strb	r3, [r2, #0]
 80021f0:	e006      	b.n	8002200 <BSP_KEY_GetState+0x18c>
  else
#endif /* KEY_RIGHT_GPIO_PIN */

  if(*pState == BSP_KEY_INVALID)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d102      	bne.n	8002200 <BSP_KEY_GetState+0x18c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 80021fa:	f06f 0303 	mvn.w	r3, #3
 80021fe:	e000      	b.n	8002202 <BSP_KEY_GetState+0x18e>
  }

  return BSP_ERROR_NONE;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	48000800 	.word	0x48000800
 8002210:	2000b870 	.word	0x2000b870
 8002214:	48000400 	.word	0x48000400

08002218 <BSP_LCD_Init>:
  *          @arg @ref LCD_ORIENTATION_PORTRAIT_ROT180    Portrait rotated 180° orientation choice of LCD screen
  *          @arg @ref LCD_ORIENTATION_LANDSCAPE_ROT180   Landscape rotated 180° orientation choice of LCD screen
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002222:	f06f 030a 	mvn.w	r3, #10
 8002226:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <BSP_LCD_Init+0x1c>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d903      	bls.n	800223c <BSP_LCD_Init+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002234:	f06f 0301 	mvn.w	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	e00e      	b.n	800225a <BSP_LCD_Init+0x42>
  }
  else
  {
    /* LCD OS Initialize */
    if(LCD_OS_Initialize(0) != LCD_OS_ERROR_NONE)
 800223c:	2000      	movs	r0, #0
 800223e:	f000 fbab 	bl	8002998 <LCD_OS_Initialize>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <BSP_LCD_Init+0x38>
    {
      ret = BSP_ERROR_NO_INIT;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	e004      	b.n	800225a <BSP_LCD_Init+0x42>
    }
    else
    {
      /* Probe the LCD Component driver */
      ret = LCD_Probe(Instance, Orientation);
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f9d2 	bl	80025fc <LCD_Probe>
 8002258:	60f8      	str	r0, [r7, #12]
    }
  }

  return ret;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <BSP_LCD_GetOrientation>:
  *          @arg @ref LCD_ORIENTATION_PORTRAIT_ROT180    Portrait rotated 180° orientation choice of LCD screen.
  *          @arg @ref LCD_ORIENTATION_LANDSCAPE_ROT180   Landscape rotated 180° orientation choice of LCD screen.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_GetOrientation(uint32_t Instance, uint32_t *pOrientation)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800226e:	f06f 030a 	mvn.w	r3, #10
 8002272:	60fb      	str	r3, [r7, #12]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 8002274:	2101      	movs	r1, #1
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fbcc 	bl	8002a14 <LCD_OS_TryLock>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <BSP_LCD_GetOrientation+0x26>
  {
    ret = BSP_ERROR_BUSY;
 8002282:	f06f 0302 	mvn.w	r3, #2
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	e018      	b.n	80022bc <BSP_LCD_GetOrientation+0x58>
  }
  else
  {
    if(LcdDrv->GetOrientation != NULL)
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <BSP_LCD_GetOrientation+0x64>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b00      	cmp	r3, #0
 8002292:	d010      	beq.n	80022b6 <BSP_LCD_GetOrientation+0x52>
    {
      if(LcdDrv->GetOrientation(LcdCompObj, pOrientation) < 0)
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <BSP_LCD_GetOrientation+0x64>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	4a0c      	ldr	r2, [pc, #48]	; (80022cc <BSP_LCD_GetOrientation+0x68>)
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	6839      	ldr	r1, [r7, #0]
 80022a0:	4610      	mov	r0, r2
 80022a2:	4798      	blx	r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	da03      	bge.n	80022b2 <BSP_LCD_GetOrientation+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80022aa:	f06f 0304 	mvn.w	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	e001      	b.n	80022b6 <BSP_LCD_GetOrientation+0x52>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60fb      	str	r3, [r7, #12]
      }
    }

    LCD_OS_Unlock(Instance);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fb88 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 80022bc:	68fb      	ldr	r3, [r7, #12]
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000b880 	.word	0x2000b880
 80022cc:	2000b87c 	.word	0x2000b87c

080022d0 <BSP_LCD_GetXSize>:
  * @param  Instance:     LCD Instance.
  * @param  pXSize:       Pointer to Used LCD X size.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *pXSize)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80022da:	f06f 030a 	mvn.w	r3, #10
 80022de:	60fb      	str	r3, [r7, #12]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 80022e0:	2101      	movs	r1, #1
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fb96 	bl	8002a14 <LCD_OS_TryLock>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <BSP_LCD_GetXSize+0x26>
  {
    ret = BSP_ERROR_BUSY;
 80022ee:	f06f 0302 	mvn.w	r3, #2
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	e018      	b.n	8002328 <BSP_LCD_GetXSize+0x58>
  }
  else
  {
    if(LcdDrv->GetXSize != NULL)
 80022f6:	4b0f      	ldr	r3, [pc, #60]	; (8002334 <BSP_LCD_GetXSize+0x64>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <BSP_LCD_GetXSize+0x52>
    {
      if(LcdDrv->GetXSize(LcdCompObj, pXSize) < 0)
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <BSP_LCD_GetXSize+0x64>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002306:	4a0c      	ldr	r2, [pc, #48]	; (8002338 <BSP_LCD_GetXSize+0x68>)
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	6839      	ldr	r1, [r7, #0]
 800230c:	4610      	mov	r0, r2
 800230e:	4798      	blx	r3
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	da03      	bge.n	800231e <BSP_LCD_GetXSize+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002316:	f06f 0304 	mvn.w	r3, #4
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	e001      	b.n	8002322 <BSP_LCD_GetXSize+0x52>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800231e:	2300      	movs	r3, #0
 8002320:	60fb      	str	r3, [r7, #12]
      }
    }

    LCD_OS_Unlock(Instance);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fb52 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000b880 	.word	0x2000b880
 8002338:	2000b87c 	.word	0x2000b87c

0800233c <BSP_LCD_GetYSize>:
  * @param  Instance:     LCD Instance.
  * @param  pYSize:       Pointer to Used LCD Y size.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *pYSize)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002346:	f06f 030a 	mvn.w	r3, #10
 800234a:	60fb      	str	r3, [r7, #12]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 800234c:	2101      	movs	r1, #1
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f000 fb60 	bl	8002a14 <LCD_OS_TryLock>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <BSP_LCD_GetYSize+0x26>
  {
    ret = BSP_ERROR_BUSY;
 800235a:	f06f 0302 	mvn.w	r3, #2
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	e018      	b.n	8002394 <BSP_LCD_GetYSize+0x58>
  }
  else
  {
    if(LcdDrv->GetYSize != NULL)
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <BSP_LCD_GetYSize+0x64>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002368:	2b00      	cmp	r3, #0
 800236a:	d010      	beq.n	800238e <BSP_LCD_GetYSize+0x52>
    {
      if(LcdDrv->GetYSize(LcdCompObj, pYSize) < 0)
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <BSP_LCD_GetYSize+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a0c      	ldr	r2, [pc, #48]	; (80023a4 <BSP_LCD_GetYSize+0x68>)
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	4610      	mov	r0, r2
 800237a:	4798      	blx	r3
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	da03      	bge.n	800238a <BSP_LCD_GetYSize+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002382:	f06f 0304 	mvn.w	r3, #4
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	e001      	b.n	800238e <BSP_LCD_GetYSize+0x52>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
      }
    }

    LCD_OS_Unlock(Instance);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fb1c 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 8002394:	68fb      	ldr	r3, [r7, #12]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	2000b880 	.word	0x2000b880
 80023a4:	2000b87c 	.word	0x2000b87c

080023a8 <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance:     LCD Instance.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80023b0:	f06f 030a 	mvn.w	r3, #10
 80023b4:	60fb      	str	r3, [r7, #12]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 80023b6:	2101      	movs	r1, #1
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 fb2b 	bl	8002a14 <LCD_OS_TryLock>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <BSP_LCD_DisplayOn+0x24>
  {
    ret = BSP_ERROR_BUSY;
 80023c4:	f06f 0302 	mvn.w	r3, #2
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e017      	b.n	80023fc <BSP_LCD_DisplayOn+0x54>
  }
  else
  {
    if(LcdDrv->DisplayOn != NULL)
 80023cc:	4b0e      	ldr	r3, [pc, #56]	; (8002408 <BSP_LCD_DisplayOn+0x60>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00f      	beq.n	80023f6 <BSP_LCD_DisplayOn+0x4e>
    {
      if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 80023d6:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <BSP_LCD_DisplayOn+0x60>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	4a0b      	ldr	r2, [pc, #44]	; (800240c <BSP_LCD_DisplayOn+0x64>)
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	4610      	mov	r0, r2
 80023e2:	4798      	blx	r3
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	da03      	bge.n	80023f2 <BSP_LCD_DisplayOn+0x4a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80023ea:	f06f 0304 	mvn.w	r3, #4
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e001      	b.n	80023f6 <BSP_LCD_DisplayOn+0x4e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
      }
    }

    LCD_OS_Unlock(Instance);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fae8 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 80023fc:	68fb      	ldr	r3, [r7, #12]
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000b880 	.word	0x2000b880
 800240c:	2000b87c 	.word	0x2000b87c

08002410 <BSP_LCD_WriteData>:
  * @param  pData:        Pointer to data to write to LCD GRAM.
  * @param  Length:       Length of data to write to LCD GRAM.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_WriteData(uint32_t Instance, uint8_t *pData, uint32_t Length)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800241c:	f06f 030a 	mvn.w	r3, #10
 8002420:	617b      	str	r3, [r7, #20]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 8002422:	2101      	movs	r1, #1
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 faf5 	bl	8002a14 <LCD_OS_TryLock>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <BSP_LCD_WriteData+0x28>
  {
    ret = BSP_ERROR_BUSY;
 8002430:	f06f 0302 	mvn.w	r3, #2
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e024      	b.n	8002482 <BSP_LCD_WriteData+0x72>
  }
  else
  {
    if(IOCtx.SendData)
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <BSP_LCD_WriteData+0x7c>)
 800243a:	695b      	ldr	r3, [r3, #20]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d01d      	beq.n	800247c <BSP_LCD_WriteData+0x6c>
    {
      /* Set the SPI in 16-bit mode to match endianess */
      hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <BSP_LCD_WriteData+0x80>)
 8002442:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8002446:	60da      	str	r2, [r3, #12]
      HAL_SPI_Init(&hLCDSPI);
 8002448:	4811      	ldr	r0, [pc, #68]	; (8002490 <BSP_LCD_WriteData+0x80>)
 800244a:	f004 f823 	bl	8006494 <HAL_SPI_Init>
      if(IOCtx.SendData(pData, (Length / 2)) < 0)
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <BSP_LCD_WriteData+0x7c>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	0852      	lsrs	r2, r2, #1
 8002456:	4611      	mov	r1, r2
 8002458:	68b8      	ldr	r0, [r7, #8]
 800245a:	4798      	blx	r3
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	da03      	bge.n	800246a <BSP_LCD_WriteData+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002462:	f06f 0304 	mvn.w	r3, #4
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	e001      	b.n	800246e <BSP_LCD_WriteData+0x5e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
      }

      /* Go back to 8-bit mode */
      hLCDSPI.Init.DataSize = SPI_DATASIZE_8BIT;
 800246e:	4b08      	ldr	r3, [pc, #32]	; (8002490 <BSP_LCD_WriteData+0x80>)
 8002470:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002474:	60da      	str	r2, [r3, #12]
      HAL_SPI_Init(&hLCDSPI);
 8002476:	4806      	ldr	r0, [pc, #24]	; (8002490 <BSP_LCD_WriteData+0x80>)
 8002478:	f004 f80c 	bl	8006494 <HAL_SPI_Init>
    }

    LCD_OS_Unlock(Instance);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 faa5 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 8002482:	697b      	ldr	r3, [r7, #20]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	2000b884 	.word	0x2000b884
 8002490:	20000274 	.word	0x20000274

08002494 <BSP_LCD_WriteDataDMA>:
  * @param  pData:        Pointer to data to write to LCD GRAM.
  * @param  Length:       Length of data to write to LCD GRAM.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_WriteDataDMA(uint32_t Instance, uint8_t *pData, uint32_t Length)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80024a0:	f06f 030a 	mvn.w	r3, #10
 80024a4:	617b      	str	r3, [r7, #20]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 80024a6:	2101      	movs	r1, #1
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 fab3 	bl	8002a14 <LCD_OS_TryLock>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <BSP_LCD_WriteDataDMA+0x28>
  {
    ret = BSP_ERROR_BUSY;
 80024b4:	f06f 0302 	mvn.w	r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	e01a      	b.n	80024f2 <BSP_LCD_WriteDataDMA+0x5e>
  }
  else
  {
    if(IOCtx.SendDataDMA)
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <BSP_LCD_WriteDataDMA+0x68>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d016      	beq.n	80024f2 <BSP_LCD_WriteDataDMA+0x5e>
    {
      /* Set the SPI in 16-bit mode to match endianess */
      hLCDSPI.Init.DataSize = SPI_DATASIZE_16BIT;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <BSP_LCD_WriteDataDMA+0x6c>)
 80024c6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80024ca:	60da      	str	r2, [r3, #12]
      HAL_SPI_Init(&hLCDSPI);
 80024cc:	480c      	ldr	r0, [pc, #48]	; (8002500 <BSP_LCD_WriteDataDMA+0x6c>)
 80024ce:	f003 ffe1 	bl	8006494 <HAL_SPI_Init>
      if(IOCtx.SendDataDMA(pData, (Length / 2)) < 0)
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <BSP_LCD_WriteDataDMA+0x68>)
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	0852      	lsrs	r2, r2, #1
 80024da:	4611      	mov	r1, r2
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	4798      	blx	r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da03      	bge.n	80024ee <BSP_LCD_WriteDataDMA+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80024e6:	f06f 0304 	mvn.w	r3, #4
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	e001      	b.n	80024f2 <BSP_LCD_WriteDataDMA+0x5e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return ret;
 80024f2:	697b      	ldr	r3, [r7, #20]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	2000b884 	.word	0x2000b884
 8002500:	20000274 	.word	0x20000274

08002504 <BSP_LCD_SetDisplayWindow>:
  * @param  Height:       Specifies the height of the rectangle to fill.
  * @param  Width:        Specifies the width of the rectangle to fill.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_SetDisplayWindow(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b089      	sub	sp, #36	; 0x24
 8002508:	af02      	add	r7, sp, #8
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002512:	f06f 030a 	mvn.w	r3, #10
 8002516:	617b      	str	r3, [r7, #20]

  BSP_LCD_CHECK_PARAMS(Instance);

  if(LCD_OS_TryLock(Instance, LCD_OS_TIMEOUT_BUSY) != LCD_OS_ERROR_NONE)
 8002518:	2101      	movs	r1, #1
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa7a 	bl	8002a14 <LCD_OS_TryLock>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <BSP_LCD_SetDisplayWindow+0x2a>
  {
    ret = BSP_ERROR_BUSY;
 8002526:	f06f 0302 	mvn.w	r3, #2
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e01b      	b.n	8002566 <BSP_LCD_SetDisplayWindow+0x62>
  }
  else
  {
    if(LcdDrv->SetDisplayWindow != NULL)
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <BSP_LCD_SetDisplayWindow+0x6c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <BSP_LCD_SetDisplayWindow+0x5c>
    {
      /* Fill the Rectangle lines on LCD */
      if (LcdDrv->SetDisplayWindow(LcdCompObj, Xpos, Ypos, Width, Height) < 0)
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <BSP_LCD_SetDisplayWindow+0x6c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695c      	ldr	r4, [r3, #20]
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <BSP_LCD_SetDisplayWindow+0x70>)
 8002540:	6818      	ldr	r0, [r3, #0]
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	68b9      	ldr	r1, [r7, #8]
 800254c:	47a0      	blx	r4
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	da03      	bge.n	800255c <BSP_LCD_SetDisplayWindow+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002554:	f06f 0304 	mvn.w	r3, #4
 8002558:	617b      	str	r3, [r7, #20]
 800255a:	e001      	b.n	8002560 <BSP_LCD_SetDisplayWindow+0x5c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
      }
    }

    LCD_OS_Unlock(Instance);
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa33 	bl	80029cc <LCD_OS_Unlock>
  }

  return ret;
 8002566:	697b      	ldr	r3, [r7, #20]
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd90      	pop	{r4, r7, pc}
 8002570:	2000b880 	.word	0x2000b880
 8002574:	2000b87c 	.word	0x2000b87c

08002578 <BSP_LCD_FillRGBRect>:
  * @param  Height:       Specifies the height of the rectangle to fill.
  * @param  Width:        Specifies the width of the rectangle to fill.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint8_t UseDMA, uint8_t *pData, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af02      	add	r7, sp, #8
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	460b      	mov	r3, r1
 8002586:	72fb      	strb	r3, [r7, #11]
  int32_t ret = BSP_ERROR_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]

  /* Set display window */
  if(BSP_LCD_SetDisplayWindow(Instance, Xpos, Ypos, Width, Height) == BSP_ERROR_NONE)
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	6a3a      	ldr	r2, [r7, #32]
 8002594:	6839      	ldr	r1, [r7, #0]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff ffb4 	bl	8002504 <BSP_LCD_SetDisplayWindow>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11a      	bne.n	80025d8 <BSP_LCD_FillRGBRect+0x60>
  {
    /* Send Pixels Data */
    if(UseDMA)
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d00b      	beq.n	80025c0 <BSP_LCD_FillRGBRect+0x48>
    {
      ret = BSP_LCD_WriteDataDMA(Instance, pData, (2*Width*Height));
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ac:	fb02 f303 	mul.w	r3, r2, r3
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	461a      	mov	r2, r3
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ff6c 	bl	8002494 <BSP_LCD_WriteDataDMA>
 80025bc:	6178      	str	r0, [r7, #20]
 80025be:	e00e      	b.n	80025de <BSP_LCD_FillRGBRect+0x66>
    }
    else
    {
      ret = BSP_LCD_WriteData(Instance, pData, (2*Width*Height));
 80025c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025c4:	fb02 f303 	mul.w	r3, r2, r3
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	461a      	mov	r2, r3
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff ff1e 	bl	8002410 <BSP_LCD_WriteData>
 80025d4:	6178      	str	r0, [r7, #20]
 80025d6:	e002      	b.n	80025de <BSP_LCD_FillRGBRect+0x66>
    }
  }
  else
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80025d8:	f06f 0307 	mvn.w	r3, #7
 80025dc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80025de:	697b      	ldr	r3, [r7, #20]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3718      	adds	r7, #24
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <BSP_LCD_SignalTransferDone>:
/**
  * @brief  Signal Transfer Event.
  * @param  Instance:     LCD Instance.
  */
__WEAK void BSP_LCD_SignalTransferDone(uint32_t Instance)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if (Instance < LCD_INSTANCES_NBR)
  {
    /* This is the user's Callback to be implemented at the application level */
  }
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LCD_Probe>:
  * @param  Instance:     LCD Instance.
  * @param  Orientation:  LCD Orientation
  * @retval int32_t:      BSP status.
  */
static int32_t LCD_Probe(uint32_t Instance, uint32_t Orientation)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	; 0x40
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8002606:	2300      	movs	r3, #0
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
  ILI9341_InitParams_t ILI9341_InitParams;

  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 800260a:	4b30      	ldr	r3, [pc, #192]	; (80026cc <LCD_Probe+0xd0>)
 800260c:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <LCD_Probe+0xd4>)
 800260e:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 8002610:	4b2e      	ldr	r3, [pc, #184]	; (80026cc <LCD_Probe+0xd0>)
 8002612:	4a30      	ldr	r2, [pc, #192]	; (80026d4 <LCD_Probe+0xd8>)
 8002614:	605a      	str	r2, [r3, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <LCD_Probe+0xd0>)
 8002618:	4a2f      	ldr	r2, [pc, #188]	; (80026d8 <LCD_Probe+0xdc>)
 800261a:	611a      	str	r2, [r3, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <LCD_Probe+0xd0>)
 800261e:	4a2f      	ldr	r2, [pc, #188]	; (80026dc <LCD_Probe+0xe0>)
 8002620:	60da      	str	r2, [r3, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 8002622:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <LCD_Probe+0xd0>)
 8002624:	4a2e      	ldr	r2, [pc, #184]	; (80026e0 <LCD_Probe+0xe4>)
 8002626:	615a      	str	r2, [r3, #20]
  IOCtx.SendDataDMA      = LCD_IO_SendDataDMA;
 8002628:	4b28      	ldr	r3, [pc, #160]	; (80026cc <LCD_Probe+0xd0>)
 800262a:	4a2e      	ldr	r2, [pc, #184]	; (80026e4 <LCD_Probe+0xe8>)
 800262c:	619a      	str	r2, [r3, #24]
  IOCtx.RecvData         = LCD_IO_RecvData;
 800262e:	4b27      	ldr	r3, [pc, #156]	; (80026cc <LCD_Probe+0xd0>)
 8002630:	4a2d      	ldr	r2, [pc, #180]	; (80026e8 <LCD_Probe+0xec>)
 8002632:	61da      	str	r2, [r3, #28]
  IOCtx.RecvDataDMA      = LCD_IO_RecvDataDMA;
 8002634:	4b25      	ldr	r3, [pc, #148]	; (80026cc <LCD_Probe+0xd0>)
 8002636:	4a2d      	ldr	r2, [pc, #180]	; (80026ec <LCD_Probe+0xf0>)
 8002638:	621a      	str	r2, [r3, #32]
  IOCtx.GetTick          = LCD_IO_GetTick;
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <LCD_Probe+0xd0>)
 800263c:	4a2c      	ldr	r2, [pc, #176]	; (80026f0 <LCD_Probe+0xf4>)
 800263e:	625a      	str	r2, [r3, #36]	; 0x24
  IOCtx.Delay            = LCD_IO_Delay;
 8002640:	4b22      	ldr	r3, [pc, #136]	; (80026cc <LCD_Probe+0xd0>)
 8002642:	4a2c      	ldr	r2, [pc, #176]	; (80026f4 <LCD_Probe+0xf8>)
 8002644:	629a      	str	r2, [r3, #40]	; 0x28

  if(ILI9341_RegisterBusIO(&ObjCtx, &IOCtx) != ILI9341_OK)
 8002646:	4921      	ldr	r1, [pc, #132]	; (80026cc <LCD_Probe+0xd0>)
 8002648:	482b      	ldr	r0, [pc, #172]	; (80026f8 <LCD_Probe+0xfc>)
 800264a:	f000 fb27 	bl	8002c9c <ILI9341_RegisterBusIO>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <LCD_Probe+0x60>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002654:	f06f 0306 	mvn.w	r3, #6
 8002658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265a:	e031      	b.n	80026c0 <LCD_Probe+0xc4>
  }
  else
  {
    LcdCompObj = &ObjCtx;
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <LCD_Probe+0x100>)
 800265e:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <LCD_Probe+0xfc>)
 8002660:	601a      	str	r2, [r3, #0]

    /* LCD Initialization */
    LcdDrv = (LCD_Drv_t *)&ILI9341_LCD_Driver;
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <LCD_Probe+0x104>)
 8002664:	4a27      	ldr	r2, [pc, #156]	; (8002704 <LCD_Probe+0x108>)
 8002666:	601a      	str	r2, [r3, #0]

    ObjCtx.IsInitialized = 0;
 8002668:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <LCD_Probe+0xfc>)
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    ILI9341_InitParams.Endian         = ILI9341_ENDIAN_BIG;
 8002670:	2300      	movs	r3, #0
 8002672:	733b      	strb	r3, [r7, #12]
    ILI9341_InitParams.SwapRB         = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
    ILI9341_InitParams.ColorCoding    = ILI9341_FORMAT_DEFAULT;
 8002678:	2355      	movs	r3, #85	; 0x55
 800267a:	617b      	str	r3, [r7, #20]
    ILI9341_InitParams.Orientation    = Orientation;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	61bb      	str	r3, [r7, #24]
    ILI9341_InitParams.TEScanline     = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    ILI9341_InitParams.TEMode         = ILI9341_TE_MODE_1;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3020 	strb.w	r3, [r7, #32]
    ILI9341_InitParams.Timings.hsync  = ILI9341_HSYNC;
 800268a:	2309      	movs	r3, #9
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_InitParams.Timings.hbp    = ILI9341_HBP;
 800268e:	231d      	movs	r3, #29
 8002690:	62bb      	str	r3, [r7, #40]	; 0x28
    ILI9341_InitParams.Timings.hfp    = ILI9341_HFP;
 8002692:	2302      	movs	r3, #2
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
    ILI9341_InitParams.Timings.vsync  = ILI9341_VSYNC;
 8002696:	2301      	movs	r3, #1
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
    ILI9341_InitParams.Timings.vbp    = ILI9341_VBP;
 800269a:	2303      	movs	r3, #3
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
    ILI9341_InitParams.Timings.vfp    = ILI9341_VFP;
 800269e:	2302      	movs	r3, #2
 80026a0:	63bb      	str	r3, [r7, #56]	; 0x38
    if(LcdDrv->Init(LcdCompObj, &ILI9341_InitParams) != ILI9341_OK)
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <LCD_Probe+0x104>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a14      	ldr	r2, [pc, #80]	; (80026fc <LCD_Probe+0x100>)
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	f107 010c 	add.w	r1, r7, #12
 80026b0:	4610      	mov	r0, r2
 80026b2:	4798      	blx	r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <LCD_Probe+0xc4>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80026ba:	f06f 0304 	mvn.w	r3, #4
 80026be:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 80026c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3740      	adds	r7, #64	; 0x40
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	2000b884 	.word	0x2000b884
 80026d0:	080027b5 	.word	0x080027b5
 80026d4:	08002835 	.word	0x08002835
 80026d8:	080028a1 	.word	0x080028a1
 80026dc:	08002851 	.word	0x08002851
 80026e0:	080028bb 	.word	0x080028bb
 80026e4:	080028f5 	.word	0x080028f5
 80026e8:	08002925 	.word	0x08002925
 80026ec:	0800297d 	.word	0x0800297d
 80026f0:	08002745 	.word	0x08002745
 80026f4:	0800275b 	.word	0x0800275b
 80026f8:	2000b8b0 	.word	0x2000b8b0
 80026fc:	2000b87c 	.word	0x2000b87c
 8002700:	2000b880 	.word	0x2000b880
 8002704:	20000020 	.word	0x20000020

08002708 <LCD_TECallback>:
  * @brief HCI Transport Layer Low Level Interrupt Service Routine
  * @param  None
  * @retval None
  */
static void LCD_TECallback(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
  uint8_t state = ((LCD_TE_GPIO_PORT->IDR & LCD_TE_GPIO_PIN) == 0x00u ? 0 : 1);
 800270e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	bf14      	ite	ne
 800271c:	2301      	movne	r3, #1
 800271e:	2300      	moveq	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	71fb      	strb	r3, [r7, #7]

  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_RISING_FALLING);
 8002724:	2103      	movs	r1, #3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <LCD_TECallback+0x38>)
 8002728:	f002 fd96 	bl	8005258 <HAL_EXTI_ClearPending>

  /* Call BSP_LCD_SignalTearingEffectEvent() */
  BSP_LCD_SignalTearingEffectEvent(0, state, 0);
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	2000      	movs	r0, #0
 8002734:	f7ff fc7a 	bl	800202c <BSP_LCD_SignalTearingEffectEvent>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000b874 	.word	0x2000b874

08002744 <LCD_IO_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval int32_t:  Tick value.
  */
static int32_t LCD_IO_GetTick(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 800274a:	f001 fb83 	bl	8003e54 <HAL_GetTick>
 800274e:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 8002750:	687b      	ldr	r3, [r7, #4]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <LCD_IO_Delay>:
  * @brief  LCD IO delay
  * @param  Delay:    Delay in ms
  * @retval int32_t:  Error status
  */
static int32_t LCD_IO_Delay(uint32_t Delay)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f001 fb82 	bl	8003e6c <HAL_Delay>
  return BSP_ERROR_NONE;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <SPI_TxCpltCallback>:

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
static void SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if(hspi == &hLCDSPI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0c      	ldr	r2, [pc, #48]	; (80027b0 <SPI_TxCpltCallback+0x3c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d111      	bne.n	80027a8 <SPI_TxCpltCallback+0x34>
  {
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 8002784:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800278c:	619a      	str	r2, [r3, #24]

    /* Go back to 8-bit mode */
    hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002794:	60da      	str	r2, [r3, #12]
    HAL_SPI_Init(hspi);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f003 fe7c 	bl	8006494 <HAL_SPI_Init>
    /* USER CODE BEGIN SPI_TxCpltCallback */

    /* USER CODE END SPI_TxCpltCallback */

    /* Unlock LCD ressources */
    LCD_OS_UnlockFromISR(0);
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f927 	bl	80029f0 <LCD_OS_UnlockFromISR>

    /* Signal Transfer Done Event */
    BSP_LCD_SignalTransferDone(0);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f7ff ff20 	bl	80025e8 <BSP_LCD_SignalTransferDone>
  }
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000274 	.word	0x20000274

080027b4 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN LCD_IO_Init 1 */

  /* USER CODE END LCD_IO_Init 1 */

  LCD_RST_LOW();
 80027be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027c2:	2202      	movs	r2, #2
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 80027c6:	2064      	movs	r0, #100	; 0x64
 80027c8:	f001 fb50 	bl	8003e6c <HAL_Delay>
  LCD_RST_HIGH();
 80027cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027d0:	2202      	movs	r2, #2
 80027d2:	619a      	str	r2, [r3, #24]
  HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f001 fb49 	bl	8003e6c <HAL_Delay>

  /* turn LCD on = drive pin low (active low) */
  /* Set or Reset the control line */
  LCD_CS_HIGH();
 80027da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027e2:	619a      	str	r2, [r3, #24]
  LCD_DC_HIGH();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <LCD_IO_Init+0x6c>)
 80027e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28

  ret = LCD_SPI_Init();
 80027ec:	f7fe fcf2 	bl	80011d4 <BSP_SPI1_Init>
 80027f0:	6078      	str	r0, [r7, #4]

  if(ret == BSP_ERROR_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10e      	bne.n	8002816 <LCD_IO_Init+0x62>
  {
    /* Register TE event IRQ handler */
    HAL_EXTI_GetHandle(&hexti_lcd_te, LCD_TE_GPIO_LINE);
 80027f8:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80027fc:	4809      	ldr	r0, [pc, #36]	; (8002824 <LCD_IO_Init+0x70>)
 80027fe:	f002 fce7 	bl	80051d0 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_COMMON_CB_ID, LCD_TECallback);
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <LCD_IO_Init+0x74>)
 8002804:	2100      	movs	r1, #0
 8002806:	4807      	ldr	r0, [pc, #28]	; (8002824 <LCD_IO_Init+0x70>)
 8002808:	f002 fcc8 	bl	800519c <HAL_EXTI_RegisterCallback>

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Register SPI Tx Complete Callback */
    HAL_SPI_RegisterCallback(&hLCDSPI, HAL_SPI_TX_COMPLETE_CB_ID, SPI_TxCpltCallback);
 800280c:	4a07      	ldr	r2, [pc, #28]	; (800282c <LCD_IO_Init+0x78>)
 800280e:	2100      	movs	r1, #0
 8002810:	4807      	ldr	r0, [pc, #28]	; (8002830 <LCD_IO_Init+0x7c>)
 8002812:	f003 ff63 	bl	80066dc <HAL_SPI_RegisterCallback>

  /* USER CODE BEGIN LCD_IO_Init 2 */

  /* USER CODE END LCD_IO_Init 2 */

  return ret;
 8002816:	687b      	ldr	r3, [r7, #4]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	48000400 	.word	0x48000400
 8002824:	2000b874 	.word	0x2000b874
 8002828:	08002709 	.word	0x08002709
 800282c:	08002775 	.word	0x08002775
 8002830:	20000274 	.word	0x20000274

08002834 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]

  ret = LCD_SPI_DeInit();
 800283e:	f7fe fd03 	bl	8001248 <BSP_SPI1_DeInit>
 8002842:	6078      	str	r0, [r7, #4]

  return ret;
 8002844:	687b      	ldr	r3, [r7, #4]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <LCD_IO_WriteReg>:
  * @param  Reg    Register to be written
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_WriteReg(volatile uint8_t *Reg, uint32_t Length)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 800285e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002866:	629a      	str	r2, [r3, #40]	; 0x28

  LCD_DC_HIGH();
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <LCD_IO_WriteReg+0x4c>)
 800286a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  ret = LCD_SPI_Send((uint8_t *)Reg, Length);
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe fd0a 	bl	8001290 <BSP_SPI1_Send>
 800287c:	60f8      	str	r0, [r7, #12]

  LCD_DC_LOW();
 800287e:	4b07      	ldr	r3, [pc, #28]	; (800289c <LCD_IO_WriteReg+0x4c>)
 8002880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002884:	619a      	str	r2, [r3, #24]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8002886:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800288a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800288e:	619a      	str	r2, [r3, #24]

  return ret;
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	48000400 	.word	0x48000400

080028a0 <LCD_IO_ReadReg>:
  * @param  Reg    Register to be read
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(volatile uint8_t *Reg, uint32_t Length)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_ReadReg */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80028aa:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_ReadReg */
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 80028c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send(pData, Length);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4619      	mov	r1, r3
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fe fcd9 	bl	8001290 <BSP_SPI1_Send>
 80028de:	60f8      	str	r0, [r7, #12]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 80028e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e8:	619a      	str	r2, [r3, #24]

  return ret;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <LCD_IO_SendDataDMA>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8002902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800290a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send_DMA(pData, Length);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fcf4 	bl	8001300 <BSP_SPI1_Send_DMA>
 8002918:	60f8      	str	r0, [r7, #12]

  return ret;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <LCD_IO_RecvData>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvData(uint8_t *pData, uint32_t Length)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800292e:	2300      	movs	r3, #0
 8002930:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8002932:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

  LCD_DC_HIGH();
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <LCD_IO_RecvData+0x54>)
 800293e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002942:	629a      	str	r2, [r3, #40]	; 0x28

  /* Write Register to read */
  ret = LCD_SPI_Send(pData, 1);
 8002944:	2101      	movs	r1, #1
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe fca2 	bl	8001290 <BSP_SPI1_Send>
 800294c:	60f8      	str	r0, [r7, #12]

  LCD_DC_LOW();
 800294e:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <LCD_IO_RecvData+0x54>)
 8002950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002954:	619a      	str	r2, [r3, #24]

  /* Receive the Data */
  ret = LCD_SPI_Recv(pData, Length);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7fe fcb3 	bl	80012c8 <BSP_SPI1_Recv>
 8002962:	60f8      	str	r0, [r7, #12]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 8002964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296c:	619a      	str	r2, [r3, #24]

  return ret;
 800296e:	68fb      	ldr	r3, [r7, #12]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	48000400 	.word	0x48000400

0800297c <LCD_IO_RecvDataDMA>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvDataDMA(uint8_t *pData, uint32_t Length)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_RecvDataDMA */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002986:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_RecvDataDMA */
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <LCD_OS_Initialize>:
  * @brief  Initialize the LCD OS ressources.
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_Initialize(uint32_t Instance)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	e006      	b.n	80029b4 <LCD_OS_Initialize+0x1c>
  {
    lcd_sem[i] = 0;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <LCD_OS_Initialize+0x30>)
 80029aa:	2100      	movs	r1, #0
 80029ac:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
 80029b0:	3301      	adds	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f5      	beq.n	80029a6 <LCD_OS_Initialize+0xe>
  }
  return LCD_OS_ERROR_NONE;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	2000b904 	.word	0x2000b904

080029cc <LCD_OS_Unlock>:
  * @brief  Unlock the LCD ressources.
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_Unlock(uint32_t Instance)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  lcd_sem[Instance] = 0;
 80029d4:	4a05      	ldr	r2, [pc, #20]	; (80029ec <LCD_OS_Unlock+0x20>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
  return LCD_OS_ERROR_NONE;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	2000b904 	.word	0x2000b904

080029f0 <LCD_OS_UnlockFromISR>:
  * @brief  Safe unlock the LCD ressources in interrupt context.
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_UnlockFromISR(uint32_t Instance)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  lcd_sem[Instance] = 0;
 80029f8:	4a05      	ldr	r2, [pc, #20]	; (8002a10 <LCD_OS_UnlockFromISR+0x20>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
  return LCD_OS_ERROR_NONE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	2000b904 	.word	0x2000b904

08002a14 <LCD_OS_TryLock>:
  * @param  Instance LCD Instance
  * @param  Timeout timeout in ms
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_TryLock(uint32_t Instance, uint32_t Timeout)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = HAL_GetTick();
 8002a1e:	f001 fa19 	bl	8003e54 <HAL_GetTick>
 8002a22:	60f8      	str	r0, [r7, #12]

  if(lcd_sem[Instance] == 0)
 8002a24:	4a16      	ldr	r2, [pc, #88]	; (8002a80 <LCD_OS_TryLock+0x6c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d106      	bne.n	8002a40 <LCD_OS_TryLock+0x2c>
  {
    lcd_sem[Instance] = 1;
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <LCD_OS_TryLock+0x6c>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]
    return LCD_OS_ERROR_NONE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	e01b      	b.n	8002a78 <LCD_OS_TryLock+0x64>
  }
  else if(Timeout == 0)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <LCD_OS_TryLock+0x36>
  {
    return LCD_OS_ERROR_BUSY;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e016      	b.n	8002a78 <LCD_OS_TryLock+0x64>
  }
  else
  {
    do
    {
      if(lcd_sem[Instance] == 0)
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <LCD_OS_TryLock+0x6c>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d106      	bne.n	8002a66 <LCD_OS_TryLock+0x52>
      {
        lcd_sem[Instance] = 1;
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <LCD_OS_TryLock+0x6c>)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	2201      	movs	r2, #1
 8002a60:	701a      	strb	r2, [r3, #0]
        return LCD_OS_ERROR_NONE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e008      	b.n	8002a78 <LCD_OS_TryLock+0x64>
      }
    } while ((HAL_GetTick() - tickstart) < Timeout);
 8002a66:	f001 f9f5 	bl	8003e54 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d8e9      	bhi.n	8002a4a <LCD_OS_TryLock+0x36>
    return LCD_OS_ERROR_BUSY;
 8002a76:	2303      	movs	r3, #3
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	2000b904 	.word	0x2000b904

08002a84 <BSP_MEM_Init>:
  * @brief  Initializes the External Memory.
  * @param  Instance:     External Memory Instance.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_MEM_Init(uint32_t Instance)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002a8c:	f06f 030a 	mvn.w	r3, #10
 8002a90:	60fb      	str	r3, [r7, #12]

  BSP_MEM_CHECK_PARAMS(Instance);

  /* MEM OS Initialize */
  if(MEM_OS_Initialize(0) != MEM_OS_ERROR_NONE)
 8002a92:	2000      	movs	r0, #0
 8002a94:	f000 f8d6 	bl	8002c44 <MEM_OS_Initialize>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <BSP_MEM_Init+0x22>
  {
    ret = BSP_ERROR_NO_INIT;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	e009      	b.n	8002aba <BSP_MEM_Init+0x36>
  }
  else
  {
    /* Reset Handlers */
    MemCompObj = NULL;
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <BSP_MEM_Init+0x40>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    MemDrv = NULL;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <BSP_MEM_Init+0x44>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

    ret = MEM_Probe(Instance);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f814 	bl	8002ae0 <MEM_Probe>
 8002ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	2000b908 	.word	0x2000b908
 8002ac8:	2000b90c 	.word	0x2000b90c

08002acc <BSP_MEM_SignalTransferDone>:
/**
  * @brief  Signal Transfer Event Done.
  * @param  Instance:     External Memory Instance.
  */
__WEAK void BSP_MEM_SignalTransferDone(uint32_t Instance)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* This is the user's Callback to be implemented at the application level */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <MEM_Probe>:
  * @brief  Register Bus IOs for instance 0 if MX25L6433F ID is OK
  * @param  Instance:     External Memory Instance.
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_Probe(uint32_t Instance)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60fb      	str	r3, [r7, #12]
  uint32_t id = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60bb      	str	r3, [r7, #8]

  /* Configure the lcd driver : map to MEM_IO function*/
  IOCtx.Init              = MEM_IO_Init;
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <MEM_Probe+0xb8>)
 8002af2:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <MEM_Probe+0xbc>)
 8002af4:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit            = MEM_IO_DeInit;
 8002af6:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <MEM_Probe+0xb8>)
 8002af8:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <MEM_Probe+0xc0>)
 8002afa:	605a      	str	r2, [r3, #4]
  IOCtx.SendData          = 0;
 8002afc:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <MEM_Probe+0xb8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	60da      	str	r2, [r3, #12]
  IOCtx.SendDataDMA       = 0;
 8002b02:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <MEM_Probe+0xb8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  IOCtx.RecvData          = 0;
 8002b08:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <MEM_Probe+0xb8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	615a      	str	r2, [r3, #20]
  IOCtx.RecvDataDMA       = 0;
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <MEM_Probe+0xb8>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set Base Address */
  IOCtx.Address           = MEM_BASE_ADDRESS;
 8002b14:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <MEM_Probe+0xb8>)
 8002b16:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8002b1a:	609a      	str	r2, [r3, #8]

  /* Register OSPI handle */
  ObjCtx.handle           = &hMEMSPI;
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <MEM_Probe+0xc4>)
 8002b1e:	4a22      	ldr	r2, [pc, #136]	; (8002ba8 <MEM_Probe+0xc8>)
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset Initialization state */
  ObjCtx.IsInitialized = 0;
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <MEM_Probe+0xc4>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2020 	strb.w	r2, [r3, #32]

  /* Register the BusIO Driver */
  if(MX25L6433F_RegisterBusIO(&ObjCtx, &IOCtx) != MX25L6433F_OK)
 8002b2a:	491b      	ldr	r1, [pc, #108]	; (8002b98 <MEM_Probe+0xb8>)
 8002b2c:	481d      	ldr	r0, [pc, #116]	; (8002ba4 <MEM_Probe+0xc4>)
 8002b2e:	f000 fcc4 	bl	80034ba <MX25L6433F_RegisterBusIO>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <MEM_Probe+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b38:	f06f 0304 	mvn.w	r3, #4
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e025      	b.n	8002b8c <MEM_Probe+0xac>
  }
  else
  {
    /* Set MEM component object */
    MemCompObj = &ObjCtx;
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <MEM_Probe+0xcc>)
 8002b42:	4a18      	ldr	r2, [pc, #96]	; (8002ba4 <MEM_Probe+0xc4>)
 8002b44:	601a      	str	r2, [r3, #0]

    /* Check for Device ID */
    if((MX25L6433F_MEM_Driver.ReadID(MemCompObj, &id) == MX25L6433F_OK) && (id == MX25L6433F_ID))
 8002b46:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <MEM_Probe+0xd0>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <MEM_Probe+0xcc>)
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	f107 0108 	add.w	r1, r7, #8
 8002b52:	4610      	mov	r0, r2
 8002b54:	4798      	blx	r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d114      	bne.n	8002b86 <MEM_Probe+0xa6>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	4a15      	ldr	r2, [pc, #84]	; (8002bb4 <MEM_Probe+0xd4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d110      	bne.n	8002b86 <MEM_Probe+0xa6>
    {
      /* Initialize the memory driver */
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <MEM_Probe+0xd0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a10      	ldr	r2, [pc, #64]	; (8002bac <MEM_Probe+0xcc>)
 8002b6a:	6812      	ldr	r2, [r2, #0]
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <MEM_Probe+0x9e>
      {
        MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MEM_Probe+0xd8>)
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <MEM_Probe+0xd0>)
 8002b7a:	601a      	str	r2, [r3, #0]
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 8002b7c:	e006      	b.n	8002b8c <MEM_Probe+0xac>
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b7e:	f06f 0304 	mvn.w	r3, #4
 8002b82:	60fb      	str	r3, [r7, #12]
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 8002b84:	e002      	b.n	8002b8c <MEM_Probe+0xac>
      }
    }
    else
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b86:	f06f 0306 	mvn.w	r3, #6
 8002b8a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	2000b910 	.word	0x2000b910
 8002b9c:	08002bf1 	.word	0x08002bf1
 8002ba0:	08002c29 	.word	0x08002c29
 8002ba4:	2000b930 	.word	0x2000b930
 8002ba8:	200001e8 	.word	0x200001e8
 8002bac:	2000b908 	.word	0x2000b908
 8002bb0:	0800f190 	.word	0x0800f190
 8002bb4:	001720c2 	.word	0x001720c2
 8002bb8:	2000b90c 	.word	0x2000b90c

08002bbc <SPI_RxCpltCallback>:
  /**
  * @brief  Transfer Read Complete CallBack
  * @param  hspi SPI Handler
  */
static void SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  if(hspi == ObjCtx.handle)
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <SPI_RxCpltCallback+0x30>)
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d10a      	bne.n	8002be4 <SPI_RxCpltCallback+0x28>
  {
    /* Set the nCS */
    MEM_CS_HIGH();
 8002bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd6:	619a      	str	r2, [r3, #24]

    /* Unlock MEM ressources */
    MEM_OS_UnlockFromISR(0);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f000 f84d 	bl	8002c78 <MEM_OS_UnlockFromISR>

    /* Signal Transfer Done Event */
    BSP_MEM_SignalTransferDone(0);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff ff74 	bl	8002acc <BSP_MEM_SignalTransferDone>
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	2000b930 	.word	0x2000b930

08002bf0 <MEM_IO_Init>:
  * @brief  Initializes MEM low level.
  * @param  None
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_IO_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]

  ret = MEM_SPI_Init();
 8002bfa:	f7fe fa1d 	bl	8001038 <BSP_SPI2_Init>
 8002bfe:	6078      	str	r0, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if(ret == BSP_ERROR_NONE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d106      	bne.n	8002c14 <MEM_IO_Init+0x24>
  {
    HAL_SPI_RegisterCallback((SPI_HandleTypeDef *)ObjCtx.handle, HAL_SPI_RX_COMPLETE_CB_ID, SPI_RxCpltCallback);
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <MEM_IO_Init+0x30>)
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	4a06      	ldr	r2, [pc, #24]	; (8002c24 <MEM_IO_Init+0x34>)
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f003 fd64 	bl	80066dc <HAL_SPI_RegisterCallback>
  }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  return ret;
 8002c14:	687b      	ldr	r3, [r7, #4]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2000b930 	.word	0x2000b930
 8002c24:	08002bbd 	.word	0x08002bbd

08002c28 <MEM_IO_DeInit>:
  * @brief  DeInitializes MEM low level
  * @param  None
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_IO_DeInit(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]

  ret = MEM_SPI_DeInit();
 8002c32:	f7fe fa3b 	bl	80010ac <BSP_SPI2_DeInit>
 8002c36:	6078      	str	r0, [r7, #4]

  return ret;
 8002c38:	687b      	ldr	r3, [r7, #4]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <MEM_OS_Initialize>:
  * @brief  Initialize the MEM OS ressources.
  * @param  Instance MEM Instance
  * @retval MEM_OS_Error_t
  */
uint8_t MEM_OS_Initialize(uint32_t Instance)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e006      	b.n	8002c60 <MEM_OS_Initialize+0x1c>
  {
    mem_sem[i] = 0;
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	4a07      	ldr	r2, [pc, #28]	; (8002c74 <MEM_OS_Initialize+0x30>)
 8002c56:	2100      	movs	r1, #0
 8002c58:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f5      	beq.n	8002c52 <MEM_OS_Initialize+0xe>
  }
  return MEM_OS_ERROR_NONE;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	2000b958 	.word	0x2000b958

08002c78 <MEM_OS_UnlockFromISR>:
  * @brief  Safe unlock the MEM ressources in interrupt context.
  * @param  Instance MEM Instance
  * @retval MEM_OS_Error_t
  */
uint8_t MEM_OS_UnlockFromISR(uint32_t Instance)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  mem_sem[Instance] = 0;
 8002c80:	4a05      	ldr	r2, [pc, #20]	; (8002c98 <MEM_OS_UnlockFromISR+0x20>)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
  return MEM_OS_ERROR_NONE;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	2000b958 	.word	0x2000b958

08002c9c <ILI9341_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ILI9341_RegisterBusIO (ILI9341_Object_t *pObj, ILI9341_IO_t *pIO)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d103      	bne.n	8002cb4 <ILI9341_RegisterBusIO+0x18>
  {
    ret = ILI9341_ERROR;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e048      	b.n	8002d46 <ILI9341_RegisterBusIO+0xaa>
  }
  else
  {
    pObj->IO.Init         = pIO->Init;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]
    pObj->IO.Address      = pIO->Address;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	891a      	ldrh	r2, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg     = pIO->WriteReg;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg      = pIO->ReadReg;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData     = pIO->SendData;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	695a      	ldr	r2, [r3, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	615a      	str	r2, [r3, #20]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
    pObj->IO.RecvData     = pIO->RecvData;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	61da      	str	r2, [r3, #28]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6a1a      	ldr	r2, [r3, #32]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]
    pObj->IO.GetTick      = pIO->GetTick;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	625a      	str	r2, [r3, #36]	; 0x24

    pObj->Ctx.ReadReg     = ILI9341_ReadRegWrap;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a12      	ldr	r2, [pc, #72]	; (8002d50 <ILI9341_RegisterBusIO+0xb4>)
 8002d08:	631a      	str	r2, [r3, #48]	; 0x30
    pObj->Ctx.WriteReg    = ILI9341_WriteRegWrap;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <ILI9341_RegisterBusIO+0xb8>)
 8002d0e:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.SendData    = ILI9341_SendDataWrap;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <ILI9341_RegisterBusIO+0xbc>)
 8002d14:	635a      	str	r2, [r3, #52]	; 0x34
    pObj->Ctx.SendDataDMA = ILI9341_SendDataDMAWrap;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <ILI9341_RegisterBusIO+0xc0>)
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
    pObj->Ctx.RecvData    = ILI9341_RecvDataWrap;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <ILI9341_RegisterBusIO+0xc4>)
 8002d20:	63da      	str	r2, [r3, #60]	; 0x3c
    pObj->Ctx.RecvDataDMA = ILI9341_RecvDataDMAWrap;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <ILI9341_RegisterBusIO+0xc8>)
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40
    pObj->Ctx.handle      = pObj;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	645a      	str	r2, [r3, #68]	; 0x44

    if(pObj->IO.Init != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d004      	beq.n	8002d40 <ILI9341_RegisterBusIO+0xa4>
    {
      ret = pObj->IO.Init();
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4798      	blx	r3
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	e002      	b.n	8002d46 <ILI9341_RegisterBusIO+0xaa>
    }
    else
    {
      ret = ILI9341_ERROR;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002d46:	68fb      	ldr	r3, [r7, #12]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	08003343 	.word	0x08003343
 8002d54:	08003367 	.word	0x08003367
 8002d58:	0800338b 	.word	0x0800338b
 8002d5c:	080033af 	.word	0x080033af
 8002d60:	080033d3 	.word	0x080033d3
 8002d64:	080033f7 	.word	0x080033f7

08002d68 <ILI9341_Init>:
  * @param  pObj Component object
  * @param  pInitParams Initialization Parameters
  * @retval Component status
  */
int32_t ILI9341_Init(ILI9341_Object_t *pObj, ILI9341_InitParams_t* pInitParams)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint8_t i;
  uint8_t __IO parameter[4];
  uint8_t __IO reg;
  int32_t ret = ILI9341_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]

  if((pObj == NULL) || (pInitParams->Orientation > ILI9341_ORIENTATION_LANDSCAPE_ROT180))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <ILI9341_Init+0x1c>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d903      	bls.n	8002d8c <ILI9341_Init+0x24>
  {
    ret = ILI9341_ERROR;
 8002d84:	f04f 33ff 	mov.w	r3, #4294967295
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e164      	b.n	8003056 <ILI9341_Init+0x2ee>
  }
  else if (pObj->IsInitialized == 0)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f040 815f 	bne.w	8003056 <ILI9341_Init+0x2ee>
  {
    pObj->IsInitialized = 1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Sleep In Command */
    reg = ILI9341_SPLIN;
 8002da0:	2310      	movs	r3, #16
 8002da2:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	332c      	adds	r3, #44	; 0x2c
 8002da8:	f107 010b 	add.w	r1, r7, #11
 8002dac:	2201      	movs	r2, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fb4d 	bl	800344e <ili9341_write_reg>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
    /* Wait for 10ms */
    ILI9341_Delay(pObj, 10);
 8002dbc:	210a      	movs	r1, #10
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fb2b 	bl	800341a <ILI9341_Delay>

    /* SW Reset Command */
    reg = ILI9341_SWRESET;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	332c      	adds	r3, #44	; 0x2c
 8002dcc:	f107 010b 	add.w	r1, r7, #11
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fb3b 	bl	800344e <ili9341_write_reg>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4413      	add	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
    /* Wait for 200ms */
    ILI9341_Delay(pObj, 200);
 8002de0:	21c8      	movs	r1, #200	; 0xc8
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb19 	bl	800341a <ILI9341_Delay>

    /* Sleep Out Command */
    reg = ILI9341_SLEEP_OUT;
 8002de8:	2311      	movs	r3, #17
 8002dea:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	332c      	adds	r3, #44	; 0x2c
 8002df0:	f107 010b 	add.w	r1, r7, #11
 8002df4:	2201      	movs	r2, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fb29 	bl	800344e <ili9341_write_reg>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	4413      	add	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
    ILI9341_Delay(pObj, 200);
 8002e04:	21c8      	movs	r1, #200	; 0xc8
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fb07 	bl	800341a <ILI9341_Delay>

    if(pInitParams->SwapRB)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d012      	beq.n	8002e3a <ILI9341_Init+0xd2>
    {
      for(i = 0; i < 4; i++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
 8002e18:	e00c      	b.n	8002e34 <ILI9341_Init+0xcc>
      {
        OrientationTab[i] |= 0x08;
 8002e1a:	7dfb      	ldrb	r3, [r7, #23]
 8002e1c:	4a93      	ldr	r2, [pc, #588]	; (800306c <ILI9341_Init+0x304>)
 8002e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	f042 0208 	orr.w	r2, r2, #8
 8002e28:	4990      	ldr	r1, [pc, #576]	; (800306c <ILI9341_Init+0x304>)
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for(i = 0; i < 4; i++)
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
 8002e30:	3301      	adds	r3, #1
 8002e32:	75fb      	strb	r3, [r7, #23]
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d9ef      	bls.n	8002e1a <ILI9341_Init+0xb2>
      }
    }

    /* Set Display Orientation */
    ret += ILI9341_SetOrientation(pObj, pInitParams->Orientation);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f977 	bl	8003134 <ILI9341_SetOrientation>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]

    /* Set Full Screen Display Window */
    ret += ILI9341_SetDisplayWindow(pObj, 0U, 0U, ILI9341_WIDTH, ILI9341_HEIGHT);
 8002e4e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	23f0      	movs	r3, #240	; 0xf0
 8002e56:	2200      	movs	r2, #0
 8002e58:	2100      	movs	r1, #0
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f9f2 	bl	8003244 <ILI9341_SetDisplayWindow>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]

    /* Set Pixel Format */
    reg = ILI9341_PIXEL_FORMAT;
 8002e68:	233a      	movs	r3, #58	; 0x3a
 8002e6a:	72fb      	strb	r3, [r7, #11]
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	733b      	strb	r3, [r7, #12]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	332c      	adds	r3, #44	; 0x2c
 8002e78:	f107 010b 	add.w	r1, r7, #11
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fae5 	bl	800344e <ili9341_write_reg>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	332c      	adds	r3, #44	; 0x2c
 8002e90:	f107 010c 	add.w	r1, r7, #12
 8002e94:	2201      	movs	r2, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 faeb 	bl	8003472 <ili9341_send_data>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    /* Frame Rate Control in normal mode */
    reg = ILI9341_FRMCTR1;
 8002ea4:	23b1      	movs	r3, #177	; 0xb1
 8002ea6:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x00; /* fosc/1 */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	733b      	strb	r3, [r7, #12]
    parameter[1] = 0x1F; /* Default is 61 Hz */
 8002eac:	231f      	movs	r3, #31
 8002eae:	737b      	strb	r3, [r7, #13]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	332c      	adds	r3, #44	; 0x2c
 8002eb4:	f107 010b 	add.w	r1, r7, #11
 8002eb8:	2201      	movs	r2, #1
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 fac7 	bl	800344e <ili9341_write_reg>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	332c      	adds	r3, #44	; 0x2c
 8002ecc:	f107 010c 	add.w	r1, r7, #12
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 facd 	bl	8003472 <ili9341_send_data>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

    // Display Normal mode
    reg = ILI9341_NORMAL_MODE_ON;
 8002ee0:	2313      	movs	r3, #19
 8002ee2:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	332c      	adds	r3, #44	; 0x2c
 8002ee8:	f107 010b 	add.w	r1, r7, #11
 8002eec:	2201      	movs	r2, #1
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 faad 	bl	800344e <ili9341_write_reg>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4413      	add	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]

    // Update Interface control
    reg = ILI9341_INTERFACE;
 8002efc:	23f6      	movs	r3, #246	; 0xf6
 8002efe:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	332c      	adds	r3, #44	; 0x2c
 8002f04:	f107 010b 	add.w	r1, r7, #11
 8002f08:	2201      	movs	r2, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fa9f 	bl	800344e <ili9341_write_reg>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4413      	add	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
    if(pInitParams->SwapRB)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d002      	beq.n	8002f26 <ILI9341_Init+0x1be>
    {
      parameter[0] = 0x49;
 8002f20:	2349      	movs	r3, #73	; 0x49
 8002f22:	733b      	strb	r3, [r7, #12]
 8002f24:	e001      	b.n	8002f2a <ILI9341_Init+0x1c2>
    }
    else
    {
      parameter[0] = 0x48;
 8002f26:	2348      	movs	r3, #72	; 0x48
 8002f28:	733b      	strb	r3, [r7, #12]
    }
    parameter[1] = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	737b      	strb	r3, [r7, #13]
    if(pInitParams->Endian == ILI9341_ENDIAN_LITTLE)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d102      	bne.n	8002f3c <ILI9341_Init+0x1d4>
    {
      parameter[2] = 0x20;
 8002f36:	2320      	movs	r3, #32
 8002f38:	73bb      	strb	r3, [r7, #14]
 8002f3a:	e001      	b.n	8002f40 <ILI9341_Init+0x1d8>
    }
    else
    {
      parameter[2] = 0x00;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73bb      	strb	r3, [r7, #14]
    }
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 3);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	332c      	adds	r3, #44	; 0x2c
 8002f44:	f107 010c 	add.w	r1, r7, #12
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fa91 	bl	8003472 <ili9341_send_data>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]

    if(pInitParams->TEMode == ILI9341_TE_MODE_1)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	7d1b      	ldrb	r3, [r3, #20]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d13c      	bne.n	8002fda <ILI9341_Init+0x272>
    {
      // Set TE scan line
      reg = ILI9341_SET_TEAR_SCANLINE;
 8002f60:	2344      	movs	r3, #68	; 0x44
 8002f62:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	332c      	adds	r3, #44	; 0x2c
 8002f68:	f107 010b 	add.w	r1, r7, #11
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fa6d 	bl	800344e <ili9341_write_reg>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
      parameter[0] = (pInitParams->TEScanline & 0x100);
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	733b      	strb	r3, [r7, #12]
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	737b      	strb	r3, [r7, #13]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	332c      	adds	r3, #44	; 0x2c
 8002f8c:	f107 010c 	add.w	r1, r7, #12
 8002f90:	2202      	movs	r2, #2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa6d 	bl	8003472 <ili9341_send_data>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]

      // Enable TE
      reg = ILI9341_TEON;
 8002fa0:	2335      	movs	r3, #53	; 0x35
 8002fa2:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	332c      	adds	r3, #44	; 0x2c
 8002fa8:	f107 010b 	add.w	r1, r7, #11
 8002fac:	2201      	movs	r2, #1
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fa4d 	bl	800344e <ili9341_write_reg>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      parameter[0] = 0; /* VSYNC Only */
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	733b      	strb	r3, [r7, #12]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	332c      	adds	r3, #44	; 0x2c
 8002fc4:	f107 010c 	add.w	r1, r7, #12
 8002fc8:	2201      	movs	r2, #1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fa51 	bl	8003472 <ili9341_send_data>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	e03d      	b.n	8003056 <ILI9341_Init+0x2ee>
    }
    else if(pInitParams->TEMode == ILI9341_TE_MODE_2)
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	7d1b      	ldrb	r3, [r3, #20]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d139      	bne.n	8003056 <ILI9341_Init+0x2ee>
    {
      // Reset TE scan line
      reg = ILI9341_SET_TEAR_SCANLINE;
 8002fe2:	2344      	movs	r3, #68	; 0x44
 8002fe4:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	332c      	adds	r3, #44	; 0x2c
 8002fea:	f107 010b 	add.w	r1, r7, #11
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fa2c 	bl	800344e <ili9341_write_reg>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
      parameter[0] = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	733b      	strb	r3, [r7, #12]
      parameter[1] = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	737b      	strb	r3, [r7, #13]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	332c      	adds	r3, #44	; 0x2c
 800300a:	f107 010c 	add.w	r1, r7, #12
 800300e:	2202      	movs	r2, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f000 fa2e 	bl	8003472 <ili9341_send_data>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

      // Enable TE
      reg = ILI9341_TEON;
 800301e:	2335      	movs	r3, #53	; 0x35
 8003020:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	332c      	adds	r3, #44	; 0x2c
 8003026:	f107 010b 	add.w	r1, r7, #11
 800302a:	2201      	movs	r2, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fa0e 	bl	800344e <ili9341_write_reg>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4413      	add	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      parameter[0] = 1; /* VSYNC + HSYNC */
 800303a:	2301      	movs	r3, #1
 800303c:	733b      	strb	r3, [r7, #12]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	332c      	adds	r3, #44	; 0x2c
 8003042:	f107 010c 	add.w	r1, r7, #12
 8003046:	2201      	movs	r2, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f000 fa12 	bl	8003472 <ili9341_send_data>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4413      	add	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
    }
  }

  if(ret != ILI9341_OK)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d002      	beq.n	8003062 <ILI9341_Init+0x2fa>
  {
    ret = ILI9341_ERROR;
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8003062:	693b      	ldr	r3, [r7, #16]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000070 	.word	0x20000070

08003070 <ILI9341_DeInit>:
  * @brief  De-Initialize the ili9341 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ILI9341_DeInit(ILI9341_Object_t *pObj)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  return pObj->IO.DeInit();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4798      	blx	r3
 800307e:	4603      	mov	r3, r0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <ILI9341_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ILI9341_ReadID(ILI9341_Object_t *pObj, uint32_t *Id)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO data[4] = {ILI9341_READ_ID4, 0, 0, 0 };
 8003092:	23d3      	movs	r3, #211	; 0xd3
 8003094:	60bb      	str	r3, [r7, #8]

  if(ili9341_recv_data(&pObj->Ctx, (uint8_t *)data, 4) != ILI9341_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	332c      	adds	r3, #44	; 0x2c
 800309a:	f107 0108 	add.w	r1, r7, #8
 800309e:	2204      	movs	r2, #4
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 f9f8 	bl	8003496 <ili9341_recv_data>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <ILI9341_ReadID+0x2c>
  {
    ret = ILI9341_ERROR;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	e014      	b.n	80030de <ILI9341_ReadID+0x56>
  }
  else
  {
    *Id = ((*(uint8_t *)&data[1] << 16) | (*(uint8_t *)&data[2] << 8) | *(uint8_t *)&data[3]);
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	3301      	adds	r3, #1
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	f107 0308 	add.w	r3, r7, #8
 80030c2:	3302      	adds	r3, #2
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4313      	orrs	r3, r2
 80030ca:	f107 0208 	add.w	r2, r7, #8
 80030ce:	3203      	adds	r2, #3
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	601a      	str	r2, [r3, #0]
    ret = ILI9341_OK;
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80030de:	68fb      	ldr	r3, [r7, #12]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <ILI9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOn(ILI9341_Object_t *pObj)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ILI9341_DISPLAY_ON;
 80030f0:	2329      	movs	r3, #41	; 0x29
 80030f2:	73fb      	strb	r3, [r7, #15]

  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	332c      	adds	r3, #44	; 0x2c
 80030f8:	f107 010f 	add.w	r1, r7, #15
 80030fc:	2201      	movs	r2, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f9a5 	bl	800344e <ili9341_write_reg>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <ILI9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOff(ILI9341_Object_t *pObj)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ILI9341_DISPLAY_OFF;
 8003116:	2328      	movs	r3, #40	; 0x28
 8003118:	73fb      	strb	r3, [r7, #15]

  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	332c      	adds	r3, #44	; 0x2c
 800311e:	f107 010f 	add.w	r1, r7, #15
 8003122:	2201      	movs	r2, #1
 8003124:	4618      	mov	r0, r3
 8003126:	f000 f992 	bl	800344e <ili9341_write_reg>
 800312a:	4603      	mov	r3, r0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ILI9341_SetOrientation>:
  * @param  Orientation ILI9341_ORIENTATION_PORTRAIT, ILI9341_ORIENTATION_PORTRAIT_ROT180
  *                     ILI9341_ORIENTATION_LANDSCAPE or ILI9341_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ILI9341_SetOrientation(ILI9341_Object_t *pObj, uint32_t Orientation)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO parameter;
  uint8_t __IO reg;

  parameter = (uint8_t)OrientationTab[Orientation];
 800313e:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <ILI9341_SetOrientation+0x9c>)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	72fb      	strb	r3, [r7, #11]
  reg = ILI9341_MAC;
 800314a:	2336      	movs	r3, #54	; 0x36
 800314c:	72bb      	strb	r3, [r7, #10]
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	332c      	adds	r3, #44	; 0x2c
 8003152:	f107 010a 	add.w	r1, r7, #10
 8003156:	2201      	movs	r2, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f978 	bl	800344e <ili9341_write_reg>
 800315e:	60f8      	str	r0, [r7, #12]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)&parameter, 1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	332c      	adds	r3, #44	; 0x2c
 8003164:	f107 010b 	add.w	r1, r7, #11
 8003168:	2201      	movs	r2, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f981 	bl	8003472 <ili9341_send_data>
 8003170:	4602      	mov	r2, r0
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  if(ret == ILI9341_OK)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11f      	bne.n	80031be <ILI9341_SetOrientation+0x8a>
  {
    ILI9341Ctx.Orientation = Orientation;
 800317e:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6093      	str	r3, [r2, #8]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	3b02      	subs	r3, #2

    switch (Orientation)
 8003188:	2b01      	cmp	r3, #1
 800318a:	d807      	bhi.n	800319c <ILI9341_SetOrientation+0x68>
    {
      case ILI9341_ORIENTATION_LANDSCAPE:
      case ILI9341_ORIENTATION_LANDSCAPE_ROT180:
        ILI9341Ctx.Width  = ILI9341_HEIGHT;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 800318e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003192:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_WIDTH;
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 8003196:	22f0      	movs	r2, #240	; 0xf0
 8003198:	605a      	str	r2, [r3, #4]
      break;
 800319a:	e007      	b.n	80031ac <ILI9341_SetOrientation+0x78>
      default:
      case ILI9341_ORIENTATION_PORTRAIT_ROT180:
      case ILI9341_ORIENTATION_PORTRAIT:
        ILI9341Ctx.Width  = ILI9341_WIDTH;
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 800319e:	22f0      	movs	r2, #240	; 0xf0
 80031a0:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_HEIGHT;
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 80031a4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031a8:	605a      	str	r2, [r3, #4]
      break;
 80031aa:	bf00      	nop
    }

    pObj->XSize = ILI9341Ctx.Width;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	64da      	str	r2, [r3, #76]	; 0x4c
    pObj->YSize = ILI9341Ctx.Height;
 80031b4:	4b07      	ldr	r3, [pc, #28]	; (80031d4 <ILI9341_SetOrientation+0xa0>)
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	651a      	str	r2, [r3, #80]	; 0x50
 80031bc:	e002      	b.n	80031c4 <ILI9341_SetOrientation+0x90>
  }
  else
  {
    ret = ILI9341_ERROR;
 80031be:	f04f 33ff 	mov.w	r3, #4294967295
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80031c4:	68fb      	ldr	r3, [r7, #12]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000070 	.word	0x20000070
 80031d4:	2000b95c 	.word	0x2000b95c

080031d8 <ILI9341_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation pointer to the LCD orientation
  * @retval The component status
  */
int32_t ILI9341_GetOrientation(ILI9341_Object_t *pObj, uint32_t *Orientation)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Orientation = ILI9341Ctx.Orientation;
 80031e2:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <ILI9341_GetOrientation+0x20>)
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	2000b95c 	.word	0x2000b95c

080031fc <ILI9341_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ILI9341_GetXSize(ILI9341_Object_t *pObj, uint32_t *XSize)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ILI9341Ctx.Width;
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <ILI9341_GetXSize+0x20>)
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	2000b95c 	.word	0x2000b95c

08003220 <ILI9341_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ILI9341_GetYSize(ILI9341_Object_t *pObj, uint32_t *YSize)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ILI9341Ctx.Height;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <ILI9341_GetYSize+0x20>)
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	2000b95c 	.word	0x2000b95c

08003244 <ILI9341_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
int32_t ILI9341_SetDisplayWindow(ILI9341_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t __IO parameter[4];
  uint8_t __IO reg = ILI9341_CASET;
 8003252:	232a      	movs	r3, #42	; 0x2a
 8003254:	75fb      	strb	r3, [r7, #23]

  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	332c      	adds	r3, #44	; 0x2c
 800325a:	f107 0117 	add.w	r1, r7, #23
 800325e:	2201      	movs	r2, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f8f4 	bl	800344e <ili9341_write_reg>
 8003266:	61f8      	str	r0, [r7, #28]
  parameter [0] = (uint8_t)(Xpos >> 8U);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	b2db      	uxtb	r3, r3
 800326e:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	4413      	add	r3, r2
 800327c:	3b01      	subs	r3, #1
 800327e:	0a1b      	lsrs	r3, r3, #8
 8003280:	b2db      	uxtb	r3, r3
 8003282:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4413      	add	r3, r2
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	76fb      	strb	r3, [r7, #27]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	332c      	adds	r3, #44	; 0x2c
 800329a:	f107 0118 	add.w	r1, r7, #24
 800329e:	2204      	movs	r2, #4
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 f8e6 	bl	8003472 <ili9341_send_data>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	61fb      	str	r3, [r7, #28]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  reg = ILI9341_RASET;
 80032ae:	232b      	movs	r3, #43	; 0x2b
 80032b0:	75fb      	strb	r3, [r7, #23]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	332c      	adds	r3, #44	; 0x2c
 80032b6:	f107 0117 	add.w	r1, r7, #23
 80032ba:	2201      	movs	r2, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8c6 	bl	800344e <ili9341_write_reg>
 80032c2:	4602      	mov	r2, r0
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
  parameter [0] = (uint8_t)(Ypos >> 8U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0a1b      	lsrs	r3, r3, #8
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	4413      	add	r3, r2
 80032de:	3b01      	subs	r3, #1
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	76fb      	strb	r3, [r7, #27]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	332c      	adds	r3, #44	; 0x2c
 80032fc:	f107 0118 	add.w	r1, r7, #24
 8003300:	2204      	movs	r2, #4
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f8b5 	bl	8003472 <ili9341_send_data>
 8003308:	4602      	mov	r2, r0
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	61fb      	str	r3, [r7, #28]

  reg = ILI9341_GRAM;
 8003310:	232c      	movs	r3, #44	; 0x2c
 8003312:	75fb      	strb	r3, [r7, #23]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	332c      	adds	r3, #44	; 0x2c
 8003318:	f107 0117 	add.w	r1, r7, #23
 800331c:	2201      	movs	r2, #1
 800331e:	4618      	mov	r0, r3
 8003320:	f000 f895 	bl	800344e <ili9341_write_reg>
 8003324:	4602      	mov	r2, r0
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	4413      	add	r3, r2
 800332a:	61fb      	str	r3, [r7, #28]

  if(ret != ILI9341_OK)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <ILI9341_SetDisplayWindow+0xf4>
  {
    ret = ILI9341_ERROR;
 8003332:	f04f 33ff 	mov.w	r3, #4294967295
 8003336:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8003338:	69fb      	ldr	r3, [r7, #28]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <ILI9341_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_ReadRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b086      	sub	sp, #24
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, Length);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	68b8      	ldr	r0, [r7, #8]
 800335a:	4798      	blx	r3
 800335c:	4603      	mov	r3, r0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <ILI9341_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ILI9341_WriteRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	b086      	sub	sp, #24
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, Length);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	4798      	blx	r3
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <ILI9341_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	4798      	blx	r3
 80033a4:	4603      	mov	r3, r0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <ILI9341_SendDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_SendDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b086      	sub	sp, #24
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendDataDMA(pData, Length);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	68b8      	ldr	r0, [r7, #8]
 80033c6:	4798      	blx	r3
 80033c8:	4603      	mov	r3, r0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <ILI9341_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b086      	sub	sp, #24
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	68b8      	ldr	r0, [r7, #8]
 80033ea:	4798      	blx	r3
 80033ec:	4603      	mov	r3, r0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <ILI9341_RecvDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_RecvDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b086      	sub	sp, #24
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	60f8      	str	r0, [r7, #12]
 80033fe:	60b9      	str	r1, [r7, #8]
 8003400:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvDataDMA(pData, Length);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	68b8      	ldr	r0, [r7, #8]
 800340e:	4798      	blx	r3
 8003410:	4603      	mov	r3, r0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <ILI9341_Delay>:
  * @brief  ILI9341 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ILI9341_Delay(ILI9341_Object_t *pObj, uint32_t Delay)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b084      	sub	sp, #16
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	4798      	blx	r3
 800342a:	4603      	mov	r3, r0
 800342c:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800342e:	bf00      	nop
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	4798      	blx	r3
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d8f5      	bhi.n	8003430 <ILI9341_Delay+0x16>
  {
  }
  return ILI9341_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <ili9341_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ili9341_write_reg(ili9341_ctx_t *ctx, volatile uint8_t* reg, uint32_t length)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b084      	sub	sp, #16
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	607a      	str	r2, [r7, #4]
  return ctx->WriteReg(ctx->handle, reg, length);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	6990      	ldr	r0, [r2, #24]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	4798      	blx	r3
 8003468:	4603      	mov	r3, r0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <ili9341_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t ili9341_send_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b084      	sub	sp, #16
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	6990      	ldr	r0, [r2, #24]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	4798      	blx	r3
 800348c:	4603      	mov	r3, r0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <ili9341_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t ili9341_recv_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	6990      	ldr	r0, [r2, #24]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	4798      	blx	r3
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <MX25L6433F_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Memory status
  */
int32_t MX25L6433F_RegisterBusIO(MX25L6433F_Object_t *pObj, MX25L6433F_IO_t *pIO)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <MX25L6433F_RegisterBusIO+0x1c>
  {
    ret = MX25L6433F_ERROR;
 80034ce:	f04f 33ff 	mov.w	r3, #4294967295
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e02b      	b.n	800352e <MX25L6433F_RegisterBusIO+0x74>
  }
  else
  {
    pObj->IO.Init         = pIO->Init;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
    pObj->IO.Address      = pIO->Address;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	609a      	str	r2, [r3, #8]
    pObj->IO.SendData     = pIO->SendData;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68da      	ldr	r2, [r3, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60da      	str	r2, [r3, #12]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	611a      	str	r2, [r3, #16]
    pObj->IO.RecvData     = pIO->RecvData;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick      = pIO->GetTick;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	61da      	str	r2, [r3, #28]

    if(pObj->IO.Init != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <MX25L6433F_RegisterBusIO+0x6e>
    {
      ret = pObj->IO.Init();
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4798      	blx	r3
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	e002      	b.n	800352e <MX25L6433F_RegisterBusIO+0x74>
    }
    else
    {
      ret = MX25L6433F_ERROR;
 8003528:	f04f 33ff 	mov.w	r3, #4294967295
 800352c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <MX25L6433F_Init>:
  * @brief  Initialize the MX25L6433F device
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_Init(MX25L6433F_Object_t *pObj)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <MX25L6433F_Init+0x1a>
  {
    ret = MX25L6433F_ERROR;
 800354a:	f04f 33ff 	mov.w	r3, #4294967295
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e01e      	b.n	8003590 <MX25L6433F_Init+0x58>
  }
  else if (pObj->IsInitialized == 0)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d119      	bne.n	8003590 <MX25L6433F_Init+0x58>
  {
    /* Reset Memory */
    ret = MX25L6433F_ResetEnable(pObj);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 fbb7 	bl	8003cd0 <MX25L6433F_ResetEnable>
 8003562:	60f8      	str	r0, [r7, #12]
    if(ret == MX25L6433F_OK)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d112      	bne.n	8003590 <MX25L6433F_Init+0x58>
    {
      ret = MX25L6433F_ResetMemory(pObj);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fbd3 	bl	8003d16 <MX25L6433F_ResetMemory>
 8003570:	60f8      	str	r0, [r7, #12]
      if(ret == MX25L6433F_OK)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <MX25L6433F_Init+0x58>
      {
        ret = MX25L6433F_WriteBurstReadLength(pObj, MX25L6433F_WRAP_AROUND_16BYTE);
 8003578:	2101      	movs	r1, #1
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fb6a 	bl	8003c54 <MX25L6433F_WriteBurstReadLength>
 8003580:	60f8      	str	r0, [r7, #12]
        if(ret == MX25L6433F_OK)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d103      	bne.n	8003590 <MX25L6433F_Init+0x58>
        {
          pObj->IsInitialized = 1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2020 	strb.w	r2, [r3, #32]
        }
      }
    }
  }

  return ret;
 8003590:	68fb      	ldr	r3, [r7, #12]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <MX25L6433F_DeInit>:
  * @brief  De-Initialize the MX25L6433F device.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_DeInit(MX25L6433F_Object_t *pObj)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <MX25L6433F_DeInit+0x1a>
  {
    ret = MX25L6433F_ERROR;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e012      	b.n	80035da <MX25L6433F_DeInit+0x40>
  }
  else if (pObj->IsInitialized == 1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d10d      	bne.n	80035da <MX25L6433F_DeInit+0x40>
  {
    if(pObj->IO.DeInit() == BSP_ERROR_NONE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4798      	blx	r3
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d104      	bne.n	80035d4 <MX25L6433F_DeInit+0x3a>
    {
      pObj->IsInitialized = 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2020 	strb.w	r2, [r3, #32]
 80035d2:	e002      	b.n	80035da <MX25L6433F_DeInit+0x40>
    }
    else
    {
      ret = MX25L6433F_ERROR;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
 80035d8:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <MX25L6433F_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval Memory status
  */
int32_t MX25L6433F_GetFlashInfo(MX25L6433F_Info_t *pInfo)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25L6433F_FLASH_SIZE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80035f2:	601a      	str	r2, [r3, #0]
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035fa:	605a      	str	r2, [r3, #4]
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2280      	movs	r2, #128	; 0x80
 8003600:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003608:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003610:	611a      	str	r2, [r3, #16]
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003618:	615a      	str	r2, [r3, #20]
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003620:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25L6433F_PAGE_SIZE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003628:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25L6433F_FLASH_SIZE/MX25L6433F_PAGE_SIZE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003630:	621a      	str	r2, [r3, #32]

  return MX25L6433F_OK;
 8003632:	2300      	movs	r3, #0
};
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <MX25L6433F_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_AutoPollingMemReady(MX25L6433F_Object_t *pObj)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  uint32_t max_timeout = 5000000U;
 800364c:	4b13      	ldr	r3, [pc, #76]	; (800369c <MX25L6433F_AutoPollingMemReady+0x5c>)
 800364e:	613b      	str	r3, [r7, #16]

  //wait until WIP is cleared
  uint8_t status;
  do
  {
    if(MX25L6433F_ReadStatusRegister(pObj, &status) != MX25L6433F_OK)
 8003650:	f107 030f 	add.w	r3, r7, #15
 8003654:	4619      	mov	r1, r3
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fac7 	bl	8003bea <MX25L6433F_ReadStatusRegister>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d002      	beq.n	8003668 <MX25L6433F_AutoPollingMemReady+0x28>
    {
      ret = MX25L6433F_ERROR;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
 8003666:	617b      	str	r3, [r7, #20]
    }
    max_timeout--;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	3b01      	subs	r3, #1
 800366c:	613b      	str	r3, [r7, #16]
  } while ((ret == MX25L6433F_OK) && (max_timeout > 0) && ((status & MX25L6433F_MEMORY_READY_MASK_VALUE) != 0));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d107      	bne.n	8003684 <MX25L6433F_AutoPollingMemReady+0x44>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <MX25L6433F_AutoPollingMemReady+0x44>
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e5      	bne.n	8003650 <MX25L6433F_AutoPollingMemReady+0x10>

  if(max_timeout == 0)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <MX25L6433F_AutoPollingMemReady+0x50>
  {
    ret = MX25L6433F_ERROR;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295
 800368e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003690:	697b      	ldr	r3, [r7, #20]
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	004c4b40 	.word	0x004c4b40

080036a0 <MX25L6433F_Read>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval Memory status
  */
int32_t MX25L6433F_Read(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	460b      	mov	r3, r1
 80036ae:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d81b      	bhi.n	80036f2 <MX25L6433F_Read+0x52>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <MX25L6433F_Read+0x20>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d5 	.word	0x080036d5
 80036c4:	080036db 	.word	0x080036db
 80036c8:	080036e1 	.word	0x080036e1
 80036cc:	080036e7 	.word	0x080036e7
 80036d0:	080036ed 	.word	0x080036ed
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_READ_CMD;
 80036d4:	2303      	movs	r3, #3
 80036d6:	743b      	strb	r3, [r7, #16]
      break;
 80036d8:	e00e      	b.n	80036f8 <MX25L6433F_Read+0x58>

    case MX25L6433F_DUAL_OUT_MODE :
      cmd[0] = MX25L6433F_DUAL_OUT_READ_CMD;
 80036da:	233b      	movs	r3, #59	; 0x3b
 80036dc:	743b      	strb	r3, [r7, #16]
      break;
 80036de:	e00b      	b.n	80036f8 <MX25L6433F_Read+0x58>

    case MX25L6433F_DUAL_IO_MODE :
      cmd[0] = MX25L6433F_DUAL_INOUT_READ_CMD;
 80036e0:	23bb      	movs	r3, #187	; 0xbb
 80036e2:	743b      	strb	r3, [r7, #16]
      break;
 80036e4:	e008      	b.n	80036f8 <MX25L6433F_Read+0x58>

    case MX25L6433F_QUAD_OUT_MODE :
      cmd[0] = MX25L6433F_QUAD_OUT_READ_CMD;
 80036e6:	236b      	movs	r3, #107	; 0x6b
 80036e8:	743b      	strb	r3, [r7, #16]
      break;
 80036ea:	e005      	b.n	80036f8 <MX25L6433F_Read+0x58>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_INOUT_READ_CMD;
 80036ec:	23eb      	movs	r3, #235	; 0xeb
 80036ee:	743b      	strb	r3, [r7, #16]
      break;
 80036f0:	e002      	b.n	80036f8 <MX25L6433F_Read+0x58>

    default :
      return MX25L6433F_ERROR;
 80036f2:	f04f 33ff 	mov.w	r3, #4294967295
 80036f6:	e037      	b.n	8003768 <MX25L6433F_Read+0xc8>
  }

  cmd[1] = ((ReadAddr>>16) & 0xFF);  // A23~A16
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	0c1b      	lsrs	r3, r3, #16
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((ReadAddr>>8)  & 0xFF);  // A15~A8
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	0a1b      	lsrs	r3, r3, #8
 8003704:	b2db      	uxtb	r3, r3
 8003706:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (ReadAddr       & 0xFF);  // A7~A0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f7ff ff96 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d002      	beq.n	8003720 <MX25L6433F_Read+0x80>
  {
    return MX25L6433F_ERROR;
 800371a:	f04f 33ff 	mov.w	r3, #4294967295
 800371e:	e023      	b.n	8003768 <MX25L6433F_Read+0xc8>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003728:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 800372a:	f107 0310 	add.w	r3, r7, #16
 800372e:	2104      	movs	r1, #4
 8003730:	4618      	mov	r0, r3
 8003732:	f7fd fcdf 	bl	80010f4 <BSP_SPI2_Send>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <MX25L6433F_Read+0xa4>
  {
    ret = MX25L6433F_ERROR;
 800373c:	f04f 33ff 	mov.w	r3, #4294967295
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e00b      	b.n	800375c <MX25L6433F_Read+0xbc>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv(pData, Size) != BSP_ERROR_NONE)
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	b29b      	uxth	r3, r3
 8003748:	4619      	mov	r1, r3
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7fd fcee 	bl	800112c <BSP_SPI2_Recv>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <MX25L6433F_Read+0xbc>
  {
    ret = MX25L6433F_ERROR;
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 800375c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003760:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003764:	619a      	str	r2, [r3, #24]

  return ret;
 8003766:	697b      	ldr	r3, [r7, #20]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <MX25L6433F_ReadDMA>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval Memory status
  */
int32_t MX25L6433F_ReadDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	460b      	mov	r3, r1
 800377e:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 8003784:	7afb      	ldrb	r3, [r7, #11]
 8003786:	2b04      	cmp	r3, #4
 8003788:	d81b      	bhi.n	80037c2 <MX25L6433F_ReadDMA+0x52>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <MX25L6433F_ReadDMA+0x20>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a5 	.word	0x080037a5
 8003794:	080037ab 	.word	0x080037ab
 8003798:	080037b1 	.word	0x080037b1
 800379c:	080037b7 	.word	0x080037b7
 80037a0:	080037bd 	.word	0x080037bd
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_READ_CMD;
 80037a4:	2303      	movs	r3, #3
 80037a6:	743b      	strb	r3, [r7, #16]
      break;
 80037a8:	e00e      	b.n	80037c8 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_DUAL_OUT_MODE :
      cmd[0] = MX25L6433F_DUAL_OUT_READ_CMD;
 80037aa:	233b      	movs	r3, #59	; 0x3b
 80037ac:	743b      	strb	r3, [r7, #16]
      break;
 80037ae:	e00b      	b.n	80037c8 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_DUAL_IO_MODE :
      cmd[0] = MX25L6433F_DUAL_INOUT_READ_CMD;
 80037b0:	23bb      	movs	r3, #187	; 0xbb
 80037b2:	743b      	strb	r3, [r7, #16]
      break;
 80037b4:	e008      	b.n	80037c8 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_QUAD_OUT_MODE :
      cmd[0] = MX25L6433F_QUAD_OUT_READ_CMD;
 80037b6:	236b      	movs	r3, #107	; 0x6b
 80037b8:	743b      	strb	r3, [r7, #16]
      break;
 80037ba:	e005      	b.n	80037c8 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_INOUT_READ_CMD;
 80037bc:	23eb      	movs	r3, #235	; 0xeb
 80037be:	743b      	strb	r3, [r7, #16]
      break;
 80037c0:	e002      	b.n	80037c8 <MX25L6433F_ReadDMA+0x58>

    default :
      return MX25L6433F_ERROR;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	e032      	b.n	800382e <MX25L6433F_ReadDMA+0xbe>
  }

  cmd[1] = ((ReadAddr>>16) & 0xFF);  // A23~A16
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((ReadAddr>>8)  & 0xFF);  // A15~A8
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	0a1b      	lsrs	r3, r3, #8
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (ReadAddr       & 0xFF);  // A7~A0
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff ff2e 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <MX25L6433F_ReadDMA+0x80>
  {
    return MX25L6433F_ERROR;
 80037ea:	f04f 33ff 	mov.w	r3, #4294967295
 80037ee:	e01e      	b.n	800382e <MX25L6433F_ReadDMA+0xbe>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80037f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 80037fa:	f107 0310 	add.w	r3, r7, #16
 80037fe:	2104      	movs	r1, #4
 8003800:	4618      	mov	r0, r3
 8003802:	f7fd fc77 	bl	80010f4 <BSP_SPI2_Send>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <MX25L6433F_ReadDMA+0xa4>
  {
    ret = MX25L6433F_ERROR;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e00b      	b.n	800382c <MX25L6433F_ReadDMA+0xbc>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv_DMA(pData, Size) != BSP_ERROR_NONE)
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	b29b      	uxth	r3, r3
 8003818:	4619      	mov	r1, r3
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fd fcbe 	bl	800119c <BSP_SPI2_Recv_DMA>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <MX25L6433F_ReadDMA+0xbc>
  {
    ret = MX25L6433F_ERROR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295
 800382a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800382c:	697b      	ldr	r3, [r7, #20]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop

08003838 <MX25L6433F_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_PageProgram(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	603b      	str	r3, [r7, #0]
 8003844:	460b      	mov	r3, r1
 8003846:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 800384c:	7afb      	ldrb	r3, [r7, #11]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <MX25L6433F_PageProgram+0x20>
 8003852:	2b04      	cmp	r3, #4
 8003854:	d003      	beq.n	800385e <MX25L6433F_PageProgram+0x26>
 8003856:	e005      	b.n	8003864 <MX25L6433F_PageProgram+0x2c>
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_PAGE_PROG_CMD;
 8003858:	2302      	movs	r3, #2
 800385a:	743b      	strb	r3, [r7, #16]
      break;
 800385c:	e005      	b.n	800386a <MX25L6433F_PageProgram+0x32>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_PAGE_PROG_CMD;
 800385e:	2338      	movs	r3, #56	; 0x38
 8003860:	743b      	strb	r3, [r7, #16]
      break;
 8003862:	e002      	b.n	800386a <MX25L6433F_PageProgram+0x32>

    default :
      return MX25L6433F_ERROR;
 8003864:	f04f 33ff 	mov.w	r3, #4294967295
 8003868:	e04c      	b.n	8003904 <MX25L6433F_PageProgram+0xcc>
  }

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fee8 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <MX25L6433F_PageProgram+0x44>
  {
    return MX25L6433F_ERROR;
 8003876:	f04f 33ff 	mov.w	r3, #4294967295
 800387a:	e043      	b.n	8003904 <MX25L6433F_PageProgram+0xcc>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f97c 	bl	8003b7a <MX25L6433F_WriteEnable>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <MX25L6433F_PageProgram+0x56>
  {
    return MX25L6433F_ERROR;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	e03a      	b.n	8003904 <MX25L6433F_PageProgram+0xcc>
  }

  cmd[1] = ((WriteAddr>>16) & 0xFF);  // A23~A16
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2db      	uxtb	r3, r3
 8003894:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((WriteAddr>>8)  & 0xFF);  // A15~A8
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	b2db      	uxtb	r3, r3
 800389c:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (WriteAddr       & 0xFF);  // A7~A0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	74fb      	strb	r3, [r7, #19]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80038a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 80038ae:	f107 0310 	add.w	r3, r7, #16
 80038b2:	2104      	movs	r1, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fd fc1d 	bl	80010f4 <BSP_SPI2_Send>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <MX25L6433F_PageProgram+0x90>
  {
    ret = MX25L6433F_ERROR;
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e00b      	b.n	80038e0 <MX25L6433F_PageProgram+0xa8>
  }
  /* Transmission of the data */
  else if(MEM_SPI_Send(pData, Size) != BSP_ERROR_NONE)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fc10 	bl	80010f4 <BSP_SPI2_Send>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <MX25L6433F_PageProgram+0xa8>
  {
    ret = MX25L6433F_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 80038e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80038e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038e8:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <MX25L6433F_PageProgram+0xca>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f7ff fea5 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d002      	beq.n	8003902 <MX25L6433F_PageProgram+0xca>
    {
      ret = MX25L6433F_ERROR;
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003902:	697b      	ldr	r3, [r7, #20]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <MX25L6433F_PageProgramDMA>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_PageProgramDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	607a      	str	r2, [r7, #4]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	460b      	mov	r3, r1
 800391a:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <MX25L6433F_PageProgramDMA+0x20>
 8003926:	2b04      	cmp	r3, #4
 8003928:	d003      	beq.n	8003932 <MX25L6433F_PageProgramDMA+0x26>
 800392a:	e005      	b.n	8003938 <MX25L6433F_PageProgramDMA+0x2c>
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_PAGE_PROG_CMD;
 800392c:	2302      	movs	r3, #2
 800392e:	743b      	strb	r3, [r7, #16]
      break;
 8003930:	e005      	b.n	800393e <MX25L6433F_PageProgramDMA+0x32>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_PAGE_PROG_CMD;
 8003932:	2338      	movs	r3, #56	; 0x38
 8003934:	743b      	strb	r3, [r7, #16]
      break;
 8003936:	e002      	b.n	800393e <MX25L6433F_PageProgramDMA+0x32>

    default :
      return MX25L6433F_ERROR;
 8003938:	f04f 33ff 	mov.w	r3, #4294967295
 800393c:	e03b      	b.n	80039b6 <MX25L6433F_PageProgramDMA+0xaa>
  }

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f7ff fe7e 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <MX25L6433F_PageProgramDMA+0x44>
  {
    return MX25L6433F_ERROR;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
 800394e:	e032      	b.n	80039b6 <MX25L6433F_PageProgramDMA+0xaa>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f912 	bl	8003b7a <MX25L6433F_WriteEnable>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <MX25L6433F_PageProgramDMA+0x56>
  {
    return MX25L6433F_ERROR;
 800395c:	f04f 33ff 	mov.w	r3, #4294967295
 8003960:	e029      	b.n	80039b6 <MX25L6433F_PageProgramDMA+0xaa>
  }

  cmd[1] = ((WriteAddr>>16) & 0xFF);  // A23~A16
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	0c1b      	lsrs	r3, r3, #16
 8003966:	b2db      	uxtb	r3, r3
 8003968:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((WriteAddr>>8)  & 0xFF);  // A15~A8
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	b2db      	uxtb	r3, r3
 8003970:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (WriteAddr       & 0xFF);  // A7~A0
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	74fb      	strb	r3, [r7, #19]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800397c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003980:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 8003982:	f107 0310 	add.w	r3, r7, #16
 8003986:	2104      	movs	r1, #4
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd fbb3 	bl	80010f4 <BSP_SPI2_Send>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <MX25L6433F_PageProgramDMA+0x90>
  {
    ret = MX25L6433F_ERROR;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	617b      	str	r3, [r7, #20]
 800399a:	e00b      	b.n	80039b4 <MX25L6433F_PageProgramDMA+0xa8>
  }
  /* Transmission of the data using DMA */
  else if(MEM_SPI_Send_DMA(pData, Size) != BSP_ERROR_NONE)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4619      	mov	r1, r3
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd fbde 	bl	8001164 <BSP_SPI2_Send_DMA>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <MX25L6433F_PageProgramDMA+0xa8>
  {
    ret = MX25L6433F_ERROR;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80039b4:	697b      	ldr	r3, [r7, #20]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <MX25L6433F_BlockErase>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize Block size to erase
  * @retval Memory status
  */
int32_t MX25L6433F_BlockErase(MX25L6433F_Object_t *pObj, uint32_t BlockAddress, MX25L6433F_Erase_t BlockSize)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MX25L6433F_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(BlockSize)
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d006      	beq.n	80039e4 <MX25L6433F_BlockErase+0x26>
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	dc0d      	bgt.n	80039f6 <MX25L6433F_BlockErase+0x38>
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <MX25L6433F_BlockErase+0x32>
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d003      	beq.n	80039ea <MX25L6433F_BlockErase+0x2c>
 80039e2:	e008      	b.n	80039f6 <MX25L6433F_BlockErase+0x38>
  {
    case MX25L6433F_ERASE_64K :
      cmd[0] = MX25L6433F_BLOCK_ERASE_CMD;
 80039e4:	23d8      	movs	r3, #216	; 0xd8
 80039e6:	743b      	strb	r3, [r7, #16]
      break;
 80039e8:	e008      	b.n	80039fc <MX25L6433F_BlockErase+0x3e>
    case MX25L6433F_ERASE_32K :
      cmd[0] = MX25L6433F_SUBBLOCK_ERASE_CMD;
 80039ea:	2352      	movs	r3, #82	; 0x52
 80039ec:	743b      	strb	r3, [r7, #16]
      break;
 80039ee:	e005      	b.n	80039fc <MX25L6433F_BlockErase+0x3e>
    case MX25L6433F_ERASE_4K :
      cmd[0] = MX25L6433F_SECTOR_ERASE_CMD;
 80039f0:	2320      	movs	r3, #32
 80039f2:	743b      	strb	r3, [r7, #16]
      break;
 80039f4:	e002      	b.n	80039fc <MX25L6433F_BlockErase+0x3e>
    default :
      return MX25L6433F_ERROR;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	e03a      	b.n	8003a72 <MX25L6433F_BlockErase+0xb4>
  }

  cmd[1] = ((BlockAddress>>16) & 0xFF);  // A23~A16
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	0c1b      	lsrs	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((BlockAddress>>8)  & 0xFF);  // A15~A8
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (BlockAddress       & 0xFF);  // A7~A0
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff fe14 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <MX25L6433F_BlockErase+0x66>
  {
    return MX25L6433F_ERROR;
 8003a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a22:	e026      	b.n	8003a72 <MX25L6433F_BlockErase+0xb4>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 f8a8 	bl	8003b7a <MX25L6433F_WriteEnable>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <MX25L6433F_BlockErase+0x78>
  {
    return MX25L6433F_ERROR;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295
 8003a34:	e01d      	b.n	8003a72 <MX25L6433F_BlockErase+0xb4>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003a36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  ret = MEM_SPI_Send((uint8_t *)cmd, 4);
 8003a40:	f107 0310 	add.w	r3, r7, #16
 8003a44:	2104      	movs	r1, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fb54 	bl	80010f4 <BSP_SPI2_Send>
 8003a4c:	6178      	str	r0, [r7, #20]

  /* Set the nCS */
  MEM_CS_HIGH();
 8003a4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a56:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <MX25L6433F_BlockErase+0xb2>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7ff fdee 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <MX25L6433F_BlockErase+0xb2>
    {
      ret = MX25L6433F_ERROR;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6e:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003a70:	697b      	ldr	r3, [r7, #20]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3718      	adds	r7, #24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <MX25L6433F_ChipErase>:
  * @param  pObj Component object pointer
  * @param  Mode Interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_ChipErase(MX25L6433F_Object_t *pObj)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_CHIP_ERASE_CMD;
 8003a86:	2360      	movs	r3, #96	; 0x60
 8003a88:	72fb      	strb	r3, [r7, #11]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fdd8 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <MX25L6433F_ChipErase+0x22>
  {
    return MX25L6433F_ERROR;
 8003a96:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9a:	e026      	b.n	8003aea <MX25L6433F_ChipErase+0x70>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f86c 	bl	8003b7a <MX25L6433F_WriteEnable>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <MX25L6433F_ChipErase+0x34>
  {
    return MX25L6433F_ERROR;
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	e01d      	b.n	8003aea <MX25L6433F_ChipErase+0x70>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003aae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_CHIP_ERASE_CMD */
  ret = MEM_SPI_Send((uint8_t *)&cmd, 1);
 8003ab8:	f107 030b 	add.w	r3, r7, #11
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fd fb18 	bl	80010f4 <BSP_SPI2_Send>
 8003ac4:	60f8      	str	r0, [r7, #12]

  /* Set the nCS */
  MEM_CS_HIGH();
 8003ac6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003aca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ace:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <MX25L6433F_ChipErase+0x6e>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff fdb2 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <MX25L6433F_ChipErase+0x6e>
    {
      ret = MX25L6433F_ERROR;
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <MX25L6433F_ReadID>:
  * @param  pObj Component object pointer
  * @param  ID 3 bytes IDs pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ReadID(MX25L6433F_Object_t *pObj, uint32_t *ID)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd = MX25L6433F_READ_ID_CMD;
 8003b00:	239f      	movs	r3, #159	; 0x9f
 8003b02:	74fb      	strb	r3, [r7, #19]
  uint8_t __IO id[4] = {0x00, 0x00, 0x00, 0x00};
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fd99 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <MX25L6433F_ReadID+0x28>
  {
    return MX25L6433F_ERROR;
 8003b14:	f04f 33ff 	mov.w	r3, #4294967295
 8003b18:	e02b      	b.n	8003b72 <MX25L6433F_ReadID+0x80>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_READ_ID_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 8003b24:	f107 0313 	add.w	r3, r7, #19
 8003b28:	2101      	movs	r1, #1
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fae2 	bl	80010f4 <BSP_SPI2_Send>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <MX25L6433F_ReadID+0x4c>
  {
    ret = MX25L6433F_ERROR;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	e00b      	b.n	8003b56 <MX25L6433F_ReadID+0x64>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv((uint8_t *)id, 3) != BSP_ERROR_NONE)
 8003b3e:	f107 030c 	add.w	r3, r7, #12
 8003b42:	2103      	movs	r1, #3
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd faf1 	bl	800112c <BSP_SPI2_Recv>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <MX25L6433F_ReadID+0x64>
  {
    ret = MX25L6433F_ERROR;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
 8003b54:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003b56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b5e:	619a      	str	r2, [r3, #24]

  if(ret == MX25L6433F_OK)
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d104      	bne.n	8003b70 <MX25L6433F_ReadID+0x7e>
  {
    *ID = *(uint32_t *)id;
 8003b66:	f107 030c 	add.w	r3, r7, #12
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8003b70:	697b      	ldr	r3, [r7, #20]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <MX25L6433F_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_WriteEnable(MX25L6433F_Object_t *pObj)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_WRITE_ENABLE_CMD;
 8003b86:	2306      	movs	r3, #6
 8003b88:	72fb      	strb	r3, [r7, #11]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff fd58 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <MX25L6433F_WriteEnable+0x22>
  {
    return MX25L6433F_ERROR;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e022      	b.n	8003be2 <MX25L6433F_WriteEnable+0x68>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003b9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ba4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_WRITE_ENABLE_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 8003ba6:	f107 030b 	add.w	r3, r7, #11
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fd faa1 	bl	80010f4 <BSP_SPI2_Send>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <MX25L6433F_WriteEnable+0x44>
  {
    ret = MX25L6433F_ERROR;
 8003bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bc6:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <MX25L6433F_WriteEnable+0x66>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff fd36 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <MX25L6433F_WriteEnable+0x66>
    {
      ret = MX25L6433F_ERROR;
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003be0:	68fb      	ldr	r3, [r7, #12]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <MX25L6433F_ReadStatusRegister>:
  * @param  pObj Component object pointer
  * @param  Value Status register value pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ReadStatusRegister(MX25L6433F_Object_t *pObj, uint8_t *Value)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b084      	sub	sp, #16
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_READ_STATUS_REG_CMD;
 8003bf8:	2305      	movs	r3, #5
 8003bfa:	72fb      	strb	r3, [r7, #11]
  uint8_t __IO value;

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003bfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_READ_STATUS_REG_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 8003c06:	f107 030b 	add.w	r3, r7, #11
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fd fa71 	bl	80010f4 <BSP_SPI2_Send>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <MX25L6433F_ReadStatusRegister+0x36>
  {
    ret = MX25L6433F_ERROR;
 8003c18:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	e00b      	b.n	8003c38 <MX25L6433F_ReadStatusRegister+0x4e>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv((uint8_t *)&value, 1) != BSP_ERROR_NONE)
 8003c20:	f107 030a 	add.w	r3, r7, #10
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd fa80 	bl	800112c <BSP_SPI2_Recv>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <MX25L6433F_ReadStatusRegister+0x4e>
  {
    ret = MX25L6433F_ERROR;
 8003c32:	f04f 33ff 	mov.w	r3, #4294967295
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003c38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c40:	619a      	str	r2, [r3, #24]

  *Value = value;
 8003c42:	7abb      	ldrb	r3, [r7, #10]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	701a      	strb	r2, [r3, #0]

  return ret;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <MX25L6433F_WriteBurstReadLength>:
  * @param  pObj Component object pointer
  * @param  Value New Burst length
  * @retval Memory status
  */
int32_t MX25L6433F_WriteBurstReadLength(MX25L6433F_Object_t *pObj, uint8_t Value)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MX25L6433F_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

  uint8_t __IO cmd[2] = { MX25L6433F_SET_BURST_LENGTH_CMD, Value};
 8003c64:	23c0      	movs	r3, #192	; 0xc0
 8003c66:	743b      	strb	r3, [r7, #16]
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	747b      	strb	r3, [r7, #17]
 8003c6c:	8a3b      	ldrh	r3, [r7, #16]
 8003c6e:	81bb      	strh	r3, [r7, #12]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fce5 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <MX25L6433F_WriteBurstReadLength+0x2e>
  {
    return MX25L6433F_ERROR;
 8003c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c80:	e022      	b.n	8003cc8 <MX25L6433F_WriteBurstReadLength+0x74>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003c82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 2) != BSP_ERROR_NONE)
 8003c8c:	f107 030c 	add.w	r3, r7, #12
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fa2e 	bl	80010f4 <BSP_SPI2_Send>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d002      	beq.n	8003ca4 <MX25L6433F_WriteBurstReadLength+0x50>
  {
    ret = MX25L6433F_ERROR;
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003ca4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cac:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <MX25L6433F_WriteBurstReadLength+0x72>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fcc3 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <MX25L6433F_WriteBurstReadLength+0x72>
    {
      ret = MX25L6433F_ERROR;
 8003cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc4:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003cc6:	697b      	ldr	r3, [r7, #20]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <MX25L6433F_ResetEnable>:
  * @brief  Flash reset enable command
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ResetEnable(MX25L6433F_Object_t *pObj)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_RESET_ENABLE_CMD;
 8003cdc:	2366      	movs	r3, #102	; 0x66
 8003cde:	72fb      	strb	r3, [r7, #11]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_RESET_ENABLE_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 8003cea:	f107 030b 	add.w	r3, r7, #11
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fd f9ff 	bl	80010f4 <BSP_SPI2_Send>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d002      	beq.n	8003d02 <MX25L6433F_ResetEnable+0x32>
  {
    ret = MX25L6433F_ERROR;
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003d02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0a:	619a      	str	r2, [r3, #24]

  return ret;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <MX25L6433F_ResetMemory>:
  * @brief  Flash reset memory command
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ResetMemory(MX25L6433F_Object_t *pObj)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b084      	sub	sp, #16
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_RESET_MEMORY_CMD;
 8003d22:	2399      	movs	r3, #153	; 0x99
 8003d24:	72fb      	strb	r3, [r7, #11]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8003d26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_RESET_MEMORY_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 8003d30:	f107 030b 	add.w	r3, r7, #11
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd f9dc 	bl	80010f4 <BSP_SPI2_Send>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <MX25L6433F_ResetMemory+0x32>
  {
    ret = MX25L6433F_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8003d48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003d4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d50:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d108      	bne.n	8003d6a <MX25L6433F_ResetMemory+0x54>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fc71 	bl	8003640 <MX25L6433F_AutoPollingMemReady>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <MX25L6433F_ResetMemory+0x54>
    {
      ret = MX25L6433F_ERROR;
 8003d64:	f04f 33ff 	mov.w	r3, #4294967295
 8003d68:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d7e:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <HAL_Init+0x3c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a0b      	ldr	r2, [pc, #44]	; (8003db0 <HAL_Init+0x3c>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d8a:	2003      	movs	r0, #3
 8003d8c:	f000 feec 	bl	8004b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d90:	2000      	movs	r0, #0
 8003d92:	f000 f80f 	bl	8003db4 <HAL_InitTick>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	71fb      	strb	r3, [r7, #7]
 8003da0:	e001      	b.n	8003da6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003da2:	f7fd f82f 	bl	8000e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003da6:	79fb      	ldrb	r3, [r7, #7]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40022000 	.word	0x40022000

08003db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003dc0:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <HAL_InitTick+0x6c>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d023      	beq.n	8003e10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003dc8:	4b16      	ldr	r3, [pc, #88]	; (8003e24 <HAL_InitTick+0x70>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <HAL_InitTick+0x6c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 ff05 	bl	8004bee <HAL_SYSTICK_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10f      	bne.n	8003e0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d809      	bhi.n	8003e04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df0:	2200      	movs	r2, #0
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	f04f 30ff 	mov.w	r0, #4294967295
 8003df8:	f000 fec1 	bl	8004b7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	; (8003e28 <HAL_InitTick+0x74>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6013      	str	r3, [r2, #0]
 8003e02:	e007      	b.n	8003e14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	e004      	b.n	8003e14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	e001      	b.n	8003e14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	20000084 	.word	0x20000084
 8003e24:	20000018 	.word	0x20000018
 8003e28:	20000080 	.word	0x20000080

08003e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_IncTick+0x20>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	461a      	mov	r2, r3
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_IncTick+0x24>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_IncTick+0x24>)
 8003e3e:	6013      	str	r3, [r2, #0]
}
 8003e40:	bf00      	nop
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000084 	.word	0x20000084
 8003e50:	2000b968 	.word	0x2000b968

08003e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return uwTick;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_GetTick+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	2000b968 	.word	0x2000b968

08003e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e74:	f7ff ffee 	bl	8003e54 <HAL_GetTick>
 8003e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d005      	beq.n	8003e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <HAL_Delay+0x44>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e92:	bf00      	nop
 8003e94:	f7ff ffde 	bl	8003e54 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d8f7      	bhi.n	8003e94 <HAL_Delay+0x28>
  {
  }
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000084 	.word	0x20000084

08003eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0ed      	b.n	80040a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d102      	bne.n	8003ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fc ffba 	bl	8000e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee8:	f7ff ffb4 	bl	8003e54 <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003eee:	e012      	b.n	8003f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ef0:	f7ff ffb0 	bl	8003e54 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b0a      	cmp	r3, #10
 8003efc:	d90b      	bls.n	8003f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2205      	movs	r2, #5
 8003f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e0c5      	b.n	80040a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0e5      	beq.n	8003ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0202 	bic.w	r2, r2, #2
 8003f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f34:	f7ff ff8e 	bl	8003e54 <HAL_GetTick>
 8003f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f3a:	e012      	b.n	8003f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003f3c:	f7ff ff8a 	bl	8003e54 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b0a      	cmp	r3, #10
 8003f48:	d90b      	bls.n	8003f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2205      	movs	r2, #5
 8003f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e09f      	b.n	80040a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e5      	bne.n	8003f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7e1b      	ldrb	r3, [r3, #24]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e007      	b.n	8003f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7e5b      	ldrb	r3, [r3, #25]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d108      	bne.n	8003fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e007      	b.n	8003fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e9b      	ldrb	r3, [r3, #26]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d108      	bne.n	8003fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0220 	orr.w	r2, r2, #32
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e007      	b.n	8003fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0220 	bic.w	r2, r2, #32
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7edb      	ldrb	r3, [r3, #27]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d108      	bne.n	8004008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0210 	bic.w	r2, r2, #16
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0210 	orr.w	r2, r2, #16
 8004016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	7f1b      	ldrb	r3, [r3, #28]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d108      	bne.n	8004032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0208 	orr.w	r2, r2, #8
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e007      	b.n	8004042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0208 	bic.w	r2, r2, #8
 8004040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	7f5b      	ldrb	r3, [r3, #29]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d108      	bne.n	800405c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0204 	orr.w	r2, r2, #4
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e007      	b.n	800406c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0204 	bic.w	r2, r2, #4
 800406a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	431a      	orrs	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	ea42 0103 	orr.w	r1, r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	1e5a      	subs	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
 80040b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80040c2:	7cfb      	ldrb	r3, [r7, #19]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d003      	beq.n	80040d0 <HAL_CAN_ConfigFilter+0x26>
 80040c8:	7cfb      	ldrb	r3, [r7, #19]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	f040 80aa 	bne.w	8004224 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80040d6:	f043 0201 	orr.w	r2, r3, #1
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2201      	movs	r2, #1
 80040ea:	fa02 f303 	lsl.w	r3, r2, r3
 80040ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d123      	bne.n	8004152 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43db      	mvns	r3, r3
 8004114:	401a      	ands	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800412c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3248      	adds	r2, #72	; 0x48
 8004132:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004146:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	440b      	add	r3, r1
 8004150:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d122      	bne.n	80041a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	431a      	orrs	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800417a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3248      	adds	r2, #72	; 0x48
 8004180:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004194:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004196:	6979      	ldr	r1, [r7, #20]
 8004198:	3348      	adds	r3, #72	; 0x48
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	440b      	add	r3, r1
 800419e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80041ba:	e007      	b.n	80041cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	431a      	orrs	r2, r3
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	43db      	mvns	r3, r3
 80041de:	401a      	ands	r2, r3
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80041e6:	e007      	b.n	80041f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	431a      	orrs	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d107      	bne.n	8004210 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	431a      	orrs	r2, r3
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004216:	f023 0201 	bic.w	r2, r3, #1
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e006      	b.n	8004232 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
  }
}
 8004232:	4618      	mov	r0, r3
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d12e      	bne.n	80042b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2202      	movs	r2, #2
 8004256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0201 	bic.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800426a:	f7ff fdf3 	bl	8003e54 <HAL_GetTick>
 800426e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004270:	e012      	b.n	8004298 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004272:	f7ff fdef 	bl	8003e54 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b0a      	cmp	r3, #10
 800427e:	d90b      	bls.n	8004298 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2205      	movs	r2, #5
 8004290:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e012      	b.n	80042be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1e5      	bne.n	8004272 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e006      	b.n	80042be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80042c6:	b480      	push	{r7}
 80042c8:	b087      	sub	sp, #28
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d003      	beq.n	80042ea <HAL_CAN_GetRxMessage+0x24>
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	f040 80f3 	bne.w	80044d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10e      	bne.n	800430e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0303 	and.w	r3, r3, #3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e0e7      	b.n	80044de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0d8      	b.n	80044de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	331b      	adds	r3, #27
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	4413      	add	r3, r2
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0204 	and.w	r2, r3, #4
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10c      	bne.n	8004364 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	331b      	adds	r3, #27
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	0d5b      	lsrs	r3, r3, #21
 800435a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	601a      	str	r2, [r3, #0]
 8004362:	e00b      	b.n	800437c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	331b      	adds	r3, #27
 800436c:	011b      	lsls	r3, r3, #4
 800436e:	4413      	add	r3, r2
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	331b      	adds	r3, #27
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0202 	and.w	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	331b      	adds	r3, #27
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	4413      	add	r3, r2
 800439e:	3304      	adds	r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 020f 	and.w	r2, r3, #15
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	331b      	adds	r3, #27
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0a1b      	lsrs	r3, r3, #8
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	331b      	adds	r3, #27
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	4413      	add	r3, r2
 80043ce:	3304      	adds	r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	b2da      	uxtb	r2, r3
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0a1a      	lsrs	r2, r3, #8
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	4413      	add	r3, r2
 8004414:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	0c1a      	lsrs	r2, r3, #16
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	3302      	adds	r3, #2
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	4413      	add	r3, r2
 800442e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e1a      	lsrs	r2, r3, #24
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3303      	adds	r3, #3
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4413      	add	r3, r2
 8004448:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	3304      	adds	r3, #4
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	011b      	lsls	r3, r3, #4
 800445e:	4413      	add	r3, r2
 8004460:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	0a1a      	lsrs	r2, r3, #8
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	3305      	adds	r3, #5
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	4413      	add	r3, r2
 800447a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	0c1a      	lsrs	r2, r3, #16
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	3306      	adds	r3, #6
 8004486:	b2d2      	uxtb	r2, r2
 8004488:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	4413      	add	r3, r2
 8004494:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	0e1a      	lsrs	r2, r3, #24
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	3307      	adds	r3, #7
 80044a0:	b2d2      	uxtb	r2, r2
 80044a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d108      	bne.n	80044bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0220 	orr.w	r2, r2, #32
 80044b8:	60da      	str	r2, [r3, #12]
 80044ba:	e007      	b.n	80044cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0220 	orr.w	r2, r2, #32
 80044ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e006      	b.n	80044de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
  }
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d002      	beq.n	8004508 <HAL_CAN_ActivateNotification+0x1e>
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d109      	bne.n	800451c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6959      	ldr	r1, [r3, #20]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e006      	b.n	800452a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
  }
}
 800452a:	4618      	mov	r0, r3
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b08a      	sub	sp, #40	; 0x28
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07c      	beq.n	8004676 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d023      	beq.n	80045ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2201      	movs	r2, #1
 800458c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f983 	bl	80048a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800459e:	e016      	b.n	80045ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	e00c      	b.n	80045ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
 80045c6:	e002      	b.n	80045ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f97f 	bl	80048cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d024      	beq.n	8004622 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7fd f9cd 	bl	800198c <HAL_CAN_TxMailbox1CompleteCallback>
 80045f2:	e016      	b.n	8004622 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d004      	beq.n	8004608 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e00c      	b.n	8004622 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	2b00      	cmp	r3, #0
 8004610:	d004      	beq.n	800461c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
 800461a:	e002      	b.n	8004622 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 f95f 	bl	80048e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d024      	beq.n	8004676 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004634:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f939 	bl	80048b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004646:	e016      	b.n	8004676 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004658:	627b      	str	r3, [r7, #36]	; 0x24
 800465a:	e00c      	b.n	8004676 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d004      	beq.n	8004670 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	e002      	b.n	8004676 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f93f 	bl	80048f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00c      	beq.n	800469a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d007      	beq.n	800469a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2210      	movs	r2, #16
 8004698:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d006      	beq.n	80046bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2208      	movs	r2, #8
 80046b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f926 	bl	8004908 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d009      	beq.n	80046da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d002      	beq.n	80046da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fd f965 	bl	80019a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00c      	beq.n	80046fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f003 0310 	and.w	r3, r3, #16
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2210      	movs	r2, #16
 80046fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	f003 0320 	and.w	r3, r3, #32
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00b      	beq.n	8004720 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d006      	beq.n	8004720 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2208      	movs	r2, #8
 8004718:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f908 	bl	8004930 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f8ef 	bl	800491c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00b      	beq.n	8004760 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	d006      	beq.n	8004760 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2210      	movs	r2, #16
 8004758:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f8f2 	bl	8004944 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2208      	movs	r2, #8
 800477a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8eb 	bl	8004958 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d07b      	beq.n	8004884 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d072      	beq.n	800487c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	f043 0304 	orr.w	r3, r3, #4
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d043      	beq.n	800487c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d03e      	beq.n	800487c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004804:	2b60      	cmp	r3, #96	; 0x60
 8004806:	d02b      	beq.n	8004860 <HAL_CAN_IRQHandler+0x32a>
 8004808:	2b60      	cmp	r3, #96	; 0x60
 800480a:	d82e      	bhi.n	800486a <HAL_CAN_IRQHandler+0x334>
 800480c:	2b50      	cmp	r3, #80	; 0x50
 800480e:	d022      	beq.n	8004856 <HAL_CAN_IRQHandler+0x320>
 8004810:	2b50      	cmp	r3, #80	; 0x50
 8004812:	d82a      	bhi.n	800486a <HAL_CAN_IRQHandler+0x334>
 8004814:	2b40      	cmp	r3, #64	; 0x40
 8004816:	d019      	beq.n	800484c <HAL_CAN_IRQHandler+0x316>
 8004818:	2b40      	cmp	r3, #64	; 0x40
 800481a:	d826      	bhi.n	800486a <HAL_CAN_IRQHandler+0x334>
 800481c:	2b30      	cmp	r3, #48	; 0x30
 800481e:	d010      	beq.n	8004842 <HAL_CAN_IRQHandler+0x30c>
 8004820:	2b30      	cmp	r3, #48	; 0x30
 8004822:	d822      	bhi.n	800486a <HAL_CAN_IRQHandler+0x334>
 8004824:	2b10      	cmp	r3, #16
 8004826:	d002      	beq.n	800482e <HAL_CAN_IRQHandler+0x2f8>
 8004828:	2b20      	cmp	r3, #32
 800482a:	d005      	beq.n	8004838 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800482c:	e01d      	b.n	800486a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	f043 0308 	orr.w	r3, r3, #8
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004836:	e019      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	f043 0310 	orr.w	r3, r3, #16
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004840:	e014      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	f043 0320 	orr.w	r3, r3, #32
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800484a:	e00f      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004854:	e00a      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800485e:	e005      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004866:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004868:	e000      	b.n	800486c <HAL_CAN_IRQHandler+0x336>
            break;
 800486a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699a      	ldr	r2, [r3, #24]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800487a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	431a      	orrs	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f868 	bl	800496c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800489c:	bf00      	nop
 800489e:	3728      	adds	r7, #40	; 0x28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004990:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800499c:	4013      	ands	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049b2:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <__NVIC_SetPriorityGrouping+0x44>)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <__NVIC_GetPriorityGrouping+0x18>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 0307 	and.w	r3, r3, #7
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00

080049e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0b      	blt.n	8004a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <__NVIC_EnableIRQ+0x38>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db12      	blt.n	8004a58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	490a      	ldr	r1, [pc, #40]	; (8004a64 <__NVIC_DisableIRQ+0x44>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	3320      	adds	r3, #32
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a4c:	f3bf 8f4f 	dsb	sy
}
 8004a50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004a52:	f3bf 8f6f 	isb	sy
}
 8004a56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	e000e100 	.word	0xe000e100

08004a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	4603      	mov	r3, r0
 8004a70:	6039      	str	r1, [r7, #0]
 8004a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	db0a      	blt.n	8004a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	490c      	ldr	r1, [pc, #48]	; (8004ab4 <__NVIC_SetPriority+0x4c>)
 8004a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a86:	0112      	lsls	r2, r2, #4
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a90:	e00a      	b.n	8004aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	4908      	ldr	r1, [pc, #32]	; (8004ab8 <__NVIC_SetPriority+0x50>)
 8004a98:	79fb      	ldrb	r3, [r7, #7]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	3b04      	subs	r3, #4
 8004aa0:	0112      	lsls	r2, r2, #4
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	761a      	strb	r2, [r3, #24]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000e100 	.word	0xe000e100
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	; 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	f1c3 0307 	rsb	r3, r3, #7
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf28      	it	cs
 8004ada:	2304      	movcs	r3, #4
 8004adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	2b06      	cmp	r3, #6
 8004ae4:	d902      	bls.n	8004aec <NVIC_EncodePriority+0x30>
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3b03      	subs	r3, #3
 8004aea:	e000      	b.n	8004aee <NVIC_EncodePriority+0x32>
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	43da      	mvns	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	401a      	ands	r2, r3
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b04:	f04f 31ff 	mov.w	r1, #4294967295
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b0e:	43d9      	mvns	r1, r3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b14:	4313      	orrs	r3, r2
         );
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3724      	adds	r7, #36	; 0x24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b34:	d301      	bcc.n	8004b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b36:	2301      	movs	r3, #1
 8004b38:	e00f      	b.n	8004b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <SysTick_Config+0x40>)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b42:	210f      	movs	r1, #15
 8004b44:	f04f 30ff 	mov.w	r0, #4294967295
 8004b48:	f7ff ff8e 	bl	8004a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <SysTick_Config+0x40>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b52:	4b04      	ldr	r3, [pc, #16]	; (8004b64 <SysTick_Config+0x40>)
 8004b54:	2207      	movs	r2, #7
 8004b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	e000e010 	.word	0xe000e010

08004b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff05 	bl	8004980 <__NVIC_SetPriorityGrouping>
}
 8004b76:	bf00      	nop
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b086      	sub	sp, #24
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4603      	mov	r3, r0
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b90:	f7ff ff1a 	bl	80049c8 <__NVIC_GetPriorityGrouping>
 8004b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68b9      	ldr	r1, [r7, #8]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7ff ff8e 	bl	8004abc <NVIC_EncodePriority>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff ff5d 	bl	8004a68 <__NVIC_SetPriority>
}
 8004bae:	bf00      	nop
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff ff0d 	bl	80049e4 <__NVIC_EnableIRQ>
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b082      	sub	sp, #8
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	4603      	mov	r3, r0
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ff1d 	bl	8004a20 <__NVIC_DisableIRQ>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff ff94 	bl	8004b24 <SysTick_Config>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e098      	b.n	8004d4c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4b4d      	ldr	r3, [pc, #308]	; (8004d58 <HAL_DMA_Init+0x150>)
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d80f      	bhi.n	8004c46 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	4b4b      	ldr	r3, [pc, #300]	; (8004d5c <HAL_DMA_Init+0x154>)
 8004c2e:	4413      	add	r3, r2
 8004c30:	4a4b      	ldr	r2, [pc, #300]	; (8004d60 <HAL_DMA_Init+0x158>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	009a      	lsls	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a48      	ldr	r2, [pc, #288]	; (8004d64 <HAL_DMA_Init+0x15c>)
 8004c42:	641a      	str	r2, [r3, #64]	; 0x40
 8004c44:	e00e      	b.n	8004c64 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4b46      	ldr	r3, [pc, #280]	; (8004d68 <HAL_DMA_Init+0x160>)
 8004c4e:	4413      	add	r3, r2
 8004c50:	4a43      	ldr	r2, [pc, #268]	; (8004d60 <HAL_DMA_Init+0x158>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	091b      	lsrs	r3, r3, #4
 8004c58:	009a      	lsls	r2, r3, #2
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a42      	ldr	r2, [pc, #264]	; (8004d6c <HAL_DMA_Init+0x164>)
 8004c62:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cbe:	d039      	beq.n	8004d34 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	4a27      	ldr	r2, [pc, #156]	; (8004d64 <HAL_DMA_Init+0x15c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d11a      	bne.n	8004d00 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <HAL_DMA_Init+0x168>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f003 031c 	and.w	r3, r3, #28
 8004cd6:	210f      	movs	r1, #15
 8004cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	4924      	ldr	r1, [pc, #144]	; (8004d70 <HAL_DMA_Init+0x168>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004ce4:	4b22      	ldr	r3, [pc, #136]	; (8004d70 <HAL_DMA_Init+0x168>)
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cf0:	f003 031c 	and.w	r3, r3, #28
 8004cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf8:	491d      	ldr	r1, [pc, #116]	; (8004d70 <HAL_DMA_Init+0x168>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	600b      	str	r3, [r1, #0]
 8004cfe:	e019      	b.n	8004d34 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004d00:	4b1c      	ldr	r3, [pc, #112]	; (8004d74 <HAL_DMA_Init+0x16c>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	f003 031c 	and.w	r3, r3, #28
 8004d0c:	210f      	movs	r1, #15
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	4917      	ldr	r1, [pc, #92]	; (8004d74 <HAL_DMA_Init+0x16c>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004d1a:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <HAL_DMA_Init+0x16c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f003 031c 	and.w	r3, r3, #28
 8004d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2e:	4911      	ldr	r1, [pc, #68]	; (8004d74 <HAL_DMA_Init+0x16c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	40020407 	.word	0x40020407
 8004d5c:	bffdfff8 	.word	0xbffdfff8
 8004d60:	cccccccd 	.word	0xcccccccd
 8004d64:	40020000 	.word	0x40020000
 8004d68:	bffdfbf8 	.word	0xbffdfbf8
 8004d6c:	40020400 	.word	0x40020400
 8004d70:	400200a8 	.word	0x400200a8
 8004d74:	400204a8 	.word	0x400204a8

08004d78 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e072      	b.n	8004e70 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <HAL_DMA_DeInit+0x104>)
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d80f      	bhi.n	8004dc6 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	461a      	mov	r2, r3
 8004dac:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_DMA_DeInit+0x108>)
 8004dae:	4413      	add	r3, r2
 8004db0:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <HAL_DMA_DeInit+0x10c>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	009a      	lsls	r2, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <HAL_DMA_DeInit+0x110>)
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8004dc4:	e00e      	b.n	8004de4 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <HAL_DMA_DeInit+0x114>)
 8004dce:	4413      	add	r3, r2
 8004dd0:	4a2c      	ldr	r2, [pc, #176]	; (8004e84 <HAL_DMA_DeInit+0x10c>)
 8004dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd6:	091b      	lsrs	r3, r3, #4
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_DMA_DeInit+0x118>)
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	f003 021c 	and.w	r2, r3, #28
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	2101      	movs	r1, #1
 8004dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfe:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e04:	4a20      	ldr	r2, [pc, #128]	; (8004e88 <HAL_DMA_DeInit+0x110>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10d      	bne.n	8004e26 <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <HAL_DMA_DeInit+0x11c>)
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f003 031c 	and.w	r3, r3, #28
 8004e16:	210f      	movs	r1, #15
 8004e18:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	491d      	ldr	r1, [pc, #116]	; (8004e94 <HAL_DMA_DeInit+0x11c>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	600b      	str	r3, [r1, #0]
 8004e24:	e00c      	b.n	8004e40 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e26:	4b1c      	ldr	r3, [pc, #112]	; (8004e98 <HAL_DMA_DeInit+0x120>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2e:	f003 031c 	and.w	r3, r3, #28
 8004e32:	210f      	movs	r1, #15
 8004e34:	fa01 f303 	lsl.w	r3, r1, r3
 8004e38:	43db      	mvns	r3, r3
 8004e3a:	4917      	ldr	r1, [pc, #92]	; (8004e98 <HAL_DMA_DeInit+0x120>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	40020407 	.word	0x40020407
 8004e80:	bffdfff8 	.word	0xbffdfff8
 8004e84:	cccccccd 	.word	0xcccccccd
 8004e88:	40020000 	.word	0x40020000
 8004e8c:	bffdfbf8 	.word	0xbffdfbf8
 8004e90:	40020400 	.word	0x40020400
 8004e94:	400200a8 	.word	0x400200a8
 8004e98:	400204a8 	.word	0x400204a8

08004e9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
 8004ea8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_DMA_Start_IT+0x20>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e04b      	b.n	8004f54 <HAL_DMA_Start_IT+0xb8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d13a      	bne.n	8004f46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0201 	bic.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f921 	bl	800513c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d008      	beq.n	8004f14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f042 020e 	orr.w	r2, r2, #14
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00f      	b.n	8004f34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 020a 	orr.w	r2, r2, #10
 8004f32:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f042 0201 	orr.w	r2, r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e005      	b.n	8004f52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d005      	beq.n	8004f80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2204      	movs	r2, #4
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
 8004f7e:	e029      	b.n	8004fd4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 020e 	bic.w	r2, r2, #14
 8004f8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f022 0201 	bic.w	r2, r2, #1
 8004f9e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	f003 021c 	and.w	r2, r3, #28
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2101      	movs	r1, #1
 8004fae:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	4798      	blx	r3
    }
  }
  return status;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f003 031c 	and.w	r3, r3, #28
 8004ffe:	2204      	movs	r2, #4
 8005000:	409a      	lsls	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	4013      	ands	r3, r2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d026      	beq.n	8005058 <HAL_DMA_IRQHandler+0x7a>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b00      	cmp	r3, #0
 8005012:	d021      	beq.n	8005058 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d107      	bne.n	8005032 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0204 	bic.w	r2, r2, #4
 8005030:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005036:	f003 021c 	and.w	r2, r3, #28
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2104      	movs	r1, #4
 8005040:	fa01 f202 	lsl.w	r2, r1, r2
 8005044:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504a:	2b00      	cmp	r3, #0
 800504c:	d071      	beq.n	8005132 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005056:	e06c      	b.n	8005132 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f003 031c 	and.w	r3, r3, #28
 8005060:	2202      	movs	r2, #2
 8005062:	409a      	lsls	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4013      	ands	r3, r2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d02e      	beq.n	80050ca <HAL_DMA_IRQHandler+0xec>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d029      	beq.n	80050ca <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0320 	and.w	r3, r3, #32
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10b      	bne.n	800509c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 020a 	bic.w	r2, r2, #10
 8005092:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a0:	f003 021c 	and.w	r2, r3, #28
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	2102      	movs	r1, #2
 80050aa:	fa01 f202 	lsl.w	r2, r1, r2
 80050ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d038      	beq.n	8005132 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80050c8:	e033      	b.n	8005132 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f003 031c 	and.w	r3, r3, #28
 80050d2:	2208      	movs	r2, #8
 80050d4:	409a      	lsls	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4013      	ands	r3, r2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d02a      	beq.n	8005134 <HAL_DMA_IRQHandler+0x156>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d025      	beq.n	8005134 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 020e 	bic.w	r2, r2, #14
 80050f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	f003 021c 	and.w	r2, r3, #28
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f202 	lsl.w	r2, r1, r2
 800510a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005132:	bf00      	nop
 8005134:	bf00      	nop
}
 8005136:	3710      	adds	r7, #16
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514e:	f003 021c 	and.w	r2, r3, #28
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	2101      	movs	r1, #1
 8005158:	fa01 f202 	lsl.w	r2, r1, r2
 800515c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	683a      	ldr	r2, [r7, #0]
 8005164:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b10      	cmp	r3, #16
 800516c:	d108      	bne.n	8005180 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800517e:	e007      	b.n	8005190 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]
}
 8005190:	bf00      	nop
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	460b      	mov	r3, r1
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d103      	bne.n	80051bc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
      break;
 80051ba:	e002      	b.n	80051c2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	75fb      	strb	r3, [r7, #23]
      break;
 80051c0:	bf00      	nop
  }

  return status;
 80051c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e003      	b.n	80051ec <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80051ea:	2300      	movs	r3, #0
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	0c1b      	lsrs	r3, r3, #16
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 031f 	and.w	r3, r3, #31
 8005214:	2201      	movs	r2, #1
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <HAL_EXTI_IRQHandler+0x5c>)
 8005222:	4413      	add	r3, r2
 8005224:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4013      	ands	r3, r2
 800522e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d009      	beq.n	800524a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	4798      	blx	r3
    }
  }
}
 800524a:	bf00      	nop
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40010414 	.word	0x40010414

08005258 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	0c1b      	lsrs	r3, r3, #16
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	4b06      	ldr	r3, [pc, #24]	; (800529c <HAL_EXTI_ClearPending+0x44>)
 8005284:	4413      	add	r3, r2
 8005286:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  *regaddr =  maskline;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010414 	.word	0x40010414

080052a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ae:	e17f      	b.n	80055b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	2101      	movs	r1, #1
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	fa01 f303 	lsl.w	r3, r1, r3
 80052bc:	4013      	ands	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 8171 	beq.w	80055aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d005      	beq.n	80052e0 <HAL_GPIO_Init+0x40>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f003 0303 	and.w	r3, r3, #3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d130      	bne.n	8005342 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	2203      	movs	r2, #3
 80052ec:	fa02 f303 	lsl.w	r3, r2, r3
 80052f0:	43db      	mvns	r3, r3
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4013      	ands	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005316:	2201      	movs	r2, #1
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4013      	ands	r3, r2
 8005324:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0201 	and.w	r2, r3, #1
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b03      	cmp	r3, #3
 800534c:	d118      	bne.n	8005380 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005352:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005354:	2201      	movs	r2, #1
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4013      	ands	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	08db      	lsrs	r3, r3, #3
 800536a:	f003 0201 	and.w	r2, r3, #1
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d017      	beq.n	80053bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	2203      	movs	r2, #3
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	43db      	mvns	r3, r3
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4013      	ands	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	fa02 f303 	lsl.w	r3, r2, r3
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	693a      	ldr	r2, [r7, #16]
 80053ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d123      	bne.n	8005410 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	08da      	lsrs	r2, r3, #3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	3208      	adds	r2, #8
 80053d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	220f      	movs	r2, #15
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	08da      	lsrs	r2, r3, #3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3208      	adds	r2, #8
 800540a:	6939      	ldr	r1, [r7, #16]
 800540c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	2203      	movs	r2, #3
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	693a      	ldr	r2, [r7, #16]
 8005424:	4013      	ands	r3, r2
 8005426:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f003 0203 	and.w	r2, r3, #3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4313      	orrs	r3, r2
 800543c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80ac 	beq.w	80055aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005452:	4b5f      	ldr	r3, [pc, #380]	; (80055d0 <HAL_GPIO_Init+0x330>)
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	4a5e      	ldr	r2, [pc, #376]	; (80055d0 <HAL_GPIO_Init+0x330>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6613      	str	r3, [r2, #96]	; 0x60
 800545e:	4b5c      	ldr	r3, [pc, #368]	; (80055d0 <HAL_GPIO_Init+0x330>)
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	60bb      	str	r3, [r7, #8]
 8005468:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800546a:	4a5a      	ldr	r2, [pc, #360]	; (80055d4 <HAL_GPIO_Init+0x334>)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	089b      	lsrs	r3, r3, #2
 8005470:	3302      	adds	r3, #2
 8005472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005476:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	220f      	movs	r2, #15
 8005482:	fa02 f303 	lsl.w	r3, r2, r3
 8005486:	43db      	mvns	r3, r3
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4013      	ands	r3, r2
 800548c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005494:	d025      	beq.n	80054e2 <HAL_GPIO_Init+0x242>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a4f      	ldr	r2, [pc, #316]	; (80055d8 <HAL_GPIO_Init+0x338>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d01f      	beq.n	80054de <HAL_GPIO_Init+0x23e>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a4e      	ldr	r2, [pc, #312]	; (80055dc <HAL_GPIO_Init+0x33c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d019      	beq.n	80054da <HAL_GPIO_Init+0x23a>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a4d      	ldr	r2, [pc, #308]	; (80055e0 <HAL_GPIO_Init+0x340>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_GPIO_Init+0x236>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a4c      	ldr	r2, [pc, #304]	; (80055e4 <HAL_GPIO_Init+0x344>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00d      	beq.n	80054d2 <HAL_GPIO_Init+0x232>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a4b      	ldr	r2, [pc, #300]	; (80055e8 <HAL_GPIO_Init+0x348>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <HAL_GPIO_Init+0x22e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a4a      	ldr	r2, [pc, #296]	; (80055ec <HAL_GPIO_Init+0x34c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_GPIO_Init+0x22a>
 80054c6:	2306      	movs	r3, #6
 80054c8:	e00c      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054ca:	2307      	movs	r3, #7
 80054cc:	e00a      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054ce:	2305      	movs	r3, #5
 80054d0:	e008      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_GPIO_Init+0x244>
 80054e2:	2300      	movs	r3, #0
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	f002 0203 	and.w	r2, r2, #3
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	4093      	lsls	r3, r2
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054f4:	4937      	ldr	r1, [pc, #220]	; (80055d4 <HAL_GPIO_Init+0x334>)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	3302      	adds	r3, #2
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <HAL_GPIO_Init+0x350>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	43db      	mvns	r3, r3
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4013      	ands	r3, r2
 8005510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005526:	4a32      	ldr	r2, [pc, #200]	; (80055f0 <HAL_GPIO_Init+0x350>)
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_GPIO_Init+0x350>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	43db      	mvns	r3, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4013      	ands	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005550:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <HAL_GPIO_Init+0x350>)
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005556:	4b26      	ldr	r3, [pc, #152]	; (80055f0 <HAL_GPIO_Init+0x350>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	43db      	mvns	r3, r3
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4013      	ands	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800557a:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <HAL_GPIO_Init+0x350>)
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005580:	4b1b      	ldr	r3, [pc, #108]	; (80055f0 <HAL_GPIO_Init+0x350>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	43db      	mvns	r3, r3
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4013      	ands	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055a4:	4a12      	ldr	r2, [pc, #72]	; (80055f0 <HAL_GPIO_Init+0x350>)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	3301      	adds	r3, #1
 80055ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f47f ae78 	bne.w	80052b0 <HAL_GPIO_Init+0x10>
  }
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40021000 	.word	0x40021000
 80055d4:	40010000 	.word	0x40010000
 80055d8:	48000400 	.word	0x48000400
 80055dc:	48000800 	.word	0x48000800
 80055e0:	48000c00 	.word	0x48000c00
 80055e4:	48001000 	.word	0x48001000
 80055e8:	48001400 	.word	0x48001400
 80055ec:	48001800 	.word	0x48001800
 80055f0:	40010400 	.word	0x40010400

080055f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005602:	e0cd      	b.n	80057a0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005604:	2201      	movs	r2, #1
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	fa02 f303 	lsl.w	r3, r2, r3
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	4013      	ands	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80c0 	beq.w	800579a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800561a:	4a68      	ldr	r2, [pc, #416]	; (80057bc <HAL_GPIO_DeInit+0x1c8>)
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	3302      	adds	r3, #2
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005642:	d025      	beq.n	8005690 <HAL_GPIO_DeInit+0x9c>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a5e      	ldr	r2, [pc, #376]	; (80057c0 <HAL_GPIO_DeInit+0x1cc>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d01f      	beq.n	800568c <HAL_GPIO_DeInit+0x98>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a5d      	ldr	r2, [pc, #372]	; (80057c4 <HAL_GPIO_DeInit+0x1d0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d019      	beq.n	8005688 <HAL_GPIO_DeInit+0x94>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a5c      	ldr	r2, [pc, #368]	; (80057c8 <HAL_GPIO_DeInit+0x1d4>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d013      	beq.n	8005684 <HAL_GPIO_DeInit+0x90>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a5b      	ldr	r2, [pc, #364]	; (80057cc <HAL_GPIO_DeInit+0x1d8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00d      	beq.n	8005680 <HAL_GPIO_DeInit+0x8c>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a5a      	ldr	r2, [pc, #360]	; (80057d0 <HAL_GPIO_DeInit+0x1dc>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <HAL_GPIO_DeInit+0x88>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a59      	ldr	r2, [pc, #356]	; (80057d4 <HAL_GPIO_DeInit+0x1e0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d101      	bne.n	8005678 <HAL_GPIO_DeInit+0x84>
 8005674:	2306      	movs	r3, #6
 8005676:	e00c      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 8005678:	2307      	movs	r3, #7
 800567a:	e00a      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 800567c:	2305      	movs	r3, #5
 800567e:	e008      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 8005680:	2304      	movs	r3, #4
 8005682:	e006      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 8005684:	2303      	movs	r3, #3
 8005686:	e004      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 8005688:	2302      	movs	r3, #2
 800568a:	e002      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <HAL_GPIO_DeInit+0x9e>
 8005690:	2300      	movs	r3, #0
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	f002 0203 	and.w	r2, r2, #3
 8005698:	0092      	lsls	r2, r2, #2
 800569a:	4093      	lsls	r3, r2
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d132      	bne.n	8005708 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80056a2:	4b4d      	ldr	r3, [pc, #308]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	43db      	mvns	r3, r3
 80056aa:	494b      	ldr	r1, [pc, #300]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80056b0:	4b49      	ldr	r3, [pc, #292]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	43db      	mvns	r3, r3
 80056b8:	4947      	ldr	r1, [pc, #284]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056ba:	4013      	ands	r3, r2
 80056bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80056be:	4b46      	ldr	r3, [pc, #280]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	43db      	mvns	r3, r3
 80056c6:	4944      	ldr	r1, [pc, #272]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056c8:	4013      	ands	r3, r2
 80056ca:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80056cc:	4b42      	ldr	r3, [pc, #264]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	4940      	ldr	r1, [pc, #256]	; (80057d8 <HAL_GPIO_DeInit+0x1e4>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	220f      	movs	r2, #15
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80056ea:	4a34      	ldr	r2, [pc, #208]	; (80057bc <HAL_GPIO_DeInit+0x1c8>)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	3302      	adds	r3, #2
 80056f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	4830      	ldr	r0, [pc, #192]	; (80057bc <HAL_GPIO_DeInit+0x1c8>)
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	400a      	ands	r2, r1
 8005702:	3302      	adds	r3, #2
 8005704:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	2103      	movs	r1, #3
 8005712:	fa01 f303 	lsl.w	r3, r1, r3
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	08da      	lsrs	r2, r3, #3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3208      	adds	r2, #8
 8005724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	220f      	movs	r2, #15
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	08d2      	lsrs	r2, r2, #3
 800573c:	4019      	ands	r1, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3208      	adds	r2, #8
 8005742:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	2103      	movs	r1, #3
 8005750:	fa01 f303 	lsl.w	r3, r1, r3
 8005754:	43db      	mvns	r3, r3
 8005756:	401a      	ands	r2, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	2101      	movs	r1, #1
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	43db      	mvns	r3, r3
 800576a:	401a      	ands	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	2103      	movs	r1, #3
 800577a:	fa01 f303 	lsl.w	r3, r1, r3
 800577e:	43db      	mvns	r3, r3
 8005780:	401a      	ands	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800578a:	2101      	movs	r1, #1
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	fa01 f303 	lsl.w	r3, r1, r3
 8005792:	43db      	mvns	r3, r3
 8005794:	401a      	ands	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	3301      	adds	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f47f af2b 	bne.w	8005604 <HAL_GPIO_DeInit+0x10>
  }
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr
 80057bc:	40010000 	.word	0x40010000
 80057c0:	48000400 	.word	0x48000400
 80057c4:	48000800 	.word	0x48000800
 80057c8:	48000c00 	.word	0x48000c00
 80057cc:	48001000 	.word	0x48001000
 80057d0:	48001400 	.word	0x48001400
 80057d4:	48001800 	.word	0x48001800
 80057d8:	40010400 	.word	0x40010400

080057dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	460b      	mov	r3, r1
 80057e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691a      	ldr	r2, [r3, #16]
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057f4:	2301      	movs	r3, #1
 80057f6:	73fb      	strb	r3, [r7, #15]
 80057f8:	e001      	b.n	80057fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057fa:	2300      	movs	r3, #0
 80057fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005828:	e002      	b.n	8005830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800582a:	887a      	ldrh	r2, [r7, #2]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005830:	bf00      	nop
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <HAL_PWREx_GetVoltageRange+0x18>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40007000 	.word	0x40007000

08005858 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005866:	d130      	bne.n	80058ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005868:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005874:	d038      	beq.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005876:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800587e:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005880:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005884:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2232      	movs	r2, #50	; 0x32
 800588c:	fb02 f303 	mul.w	r3, r2, r3
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005892:	fba2 2303 	umull	r2, r3, r2, r3
 8005896:	0c9b      	lsrs	r3, r3, #18
 8005898:	3301      	adds	r3, #1
 800589a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800589c:	e002      	b.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058a4:	4b14      	ldr	r3, [pc, #80]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058b0:	d102      	bne.n	80058b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f2      	bne.n	800589e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058c4:	d110      	bne.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e00f      	b.n	80058ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d6:	d007      	beq.n	80058e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80058d8:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80058e0:	4a05      	ldr	r2, [pc, #20]	; (80058f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80058e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40007000 	.word	0x40007000
 80058fc:	20000018 	.word	0x20000018
 8005900:	431bde83 	.word	0x431bde83

08005904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b088      	sub	sp, #32
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e3ca      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005916:	4b97      	ldr	r3, [pc, #604]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	f003 030c 	and.w	r3, r3, #12
 800591e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005920:	4b94      	ldr	r3, [pc, #592]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	2b00      	cmp	r3, #0
 8005934:	f000 80e4 	beq.w	8005b00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_RCC_OscConfig+0x4a>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b0c      	cmp	r3, #12
 8005942:	f040 808b 	bne.w	8005a5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2b01      	cmp	r3, #1
 800594a:	f040 8087 	bne.w	8005a5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800594e:	4b89      	ldr	r3, [pc, #548]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b00      	cmp	r3, #0
 8005958:	d005      	beq.n	8005966 <HAL_RCC_OscConfig+0x62>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e3a2      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a1a      	ldr	r2, [r3, #32]
 800596a:	4b82      	ldr	r3, [pc, #520]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d004      	beq.n	8005980 <HAL_RCC_OscConfig+0x7c>
 8005976:	4b7f      	ldr	r3, [pc, #508]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800597e:	e005      	b.n	800598c <HAL_RCC_OscConfig+0x88>
 8005980:	4b7c      	ldr	r3, [pc, #496]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005986:	091b      	lsrs	r3, r3, #4
 8005988:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800598c:	4293      	cmp	r3, r2
 800598e:	d223      	bcs.n	80059d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fd1d 	bl	80063d4 <RCC_SetFlashLatencyFromMSIRange>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e383      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059a4:	4b73      	ldr	r3, [pc, #460]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a72      	ldr	r2, [pc, #456]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059aa:	f043 0308 	orr.w	r3, r3, #8
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b70      	ldr	r3, [pc, #448]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	496d      	ldr	r1, [pc, #436]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059be:	4313      	orrs	r3, r2
 80059c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059c2:	4b6c      	ldr	r3, [pc, #432]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	021b      	lsls	r3, r3, #8
 80059d0:	4968      	ldr	r1, [pc, #416]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	604b      	str	r3, [r1, #4]
 80059d6:	e025      	b.n	8005a24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80059d8:	4b66      	ldr	r3, [pc, #408]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a65      	ldr	r2, [pc, #404]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059de:	f043 0308 	orr.w	r3, r3, #8
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	4b63      	ldr	r3, [pc, #396]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	4960      	ldr	r1, [pc, #384]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059f6:	4b5f      	ldr	r3, [pc, #380]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	495b      	ldr	r1, [pc, #364]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fcdd 	bl	80063d4 <RCC_SetFlashLatencyFromMSIRange>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e343      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a24:	f000 fc4a 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4b52      	ldr	r3, [pc, #328]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	091b      	lsrs	r3, r3, #4
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	4950      	ldr	r1, [pc, #320]	; (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005a36:	5ccb      	ldrb	r3, [r1, r3]
 8005a38:	f003 031f 	and.w	r3, r3, #31
 8005a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a40:	4a4e      	ldr	r2, [pc, #312]	; (8005b7c <HAL_RCC_OscConfig+0x278>)
 8005a42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005a44:	4b4e      	ldr	r3, [pc, #312]	; (8005b80 <HAL_RCC_OscConfig+0x27c>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fe f9b3 	bl	8003db4 <HAL_InitTick>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005a52:	7bfb      	ldrb	r3, [r7, #15]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d052      	beq.n	8005afe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
 8005a5a:	e327      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	699b      	ldr	r3, [r3, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d032      	beq.n	8005aca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005a64:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a42      	ldr	r2, [pc, #264]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005a70:	f7fe f9f0 	bl	8003e54 <HAL_GetTick>
 8005a74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005a78:	f7fe f9ec 	bl	8003e54 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e310      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005a8a:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0f0      	beq.n	8005a78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a96:	4b37      	ldr	r3, [pc, #220]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a36      	ldr	r2, [pc, #216]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005a9c:	f043 0308 	orr.w	r3, r3, #8
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	4b34      	ldr	r3, [pc, #208]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	4931      	ldr	r1, [pc, #196]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab4:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	021b      	lsls	r3, r3, #8
 8005ac2:	492c      	ldr	r1, [pc, #176]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	e01a      	b.n	8005b00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005aca:	4b2a      	ldr	r3, [pc, #168]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad6:	f7fe f9bd 	bl	8003e54 <HAL_GetTick>
 8005ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005adc:	e008      	b.n	8005af0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ade:	f7fe f9b9 	bl	8003e54 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e2dd      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005af0:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1f0      	bne.n	8005ade <HAL_RCC_OscConfig+0x1da>
 8005afc:	e000      	b.n	8005b00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005afe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d074      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b08      	cmp	r3, #8
 8005b10:	d005      	beq.n	8005b1e <HAL_RCC_OscConfig+0x21a>
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d10e      	bne.n	8005b36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d10b      	bne.n	8005b36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b1e:	4b15      	ldr	r3, [pc, #84]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d064      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d160      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e2ba      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b3e:	d106      	bne.n	8005b4e <HAL_RCC_OscConfig+0x24a>
 8005b40:	4b0c      	ldr	r3, [pc, #48]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e026      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b56:	d115      	bne.n	8005b84 <HAL_RCC_OscConfig+0x280>
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b62:	6013      	str	r3, [r2, #0]
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a02      	ldr	r2, [pc, #8]	; (8005b74 <HAL_RCC_OscConfig+0x270>)
 8005b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	e014      	b.n	8005b9c <HAL_RCC_OscConfig+0x298>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
 8005b78:	0800f124 	.word	0x0800f124
 8005b7c:	20000018 	.word	0x20000018
 8005b80:	20000080 	.word	0x20000080
 8005b84:	4ba0      	ldr	r3, [pc, #640]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a9f      	ldr	r2, [pc, #636]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b8e:	6013      	str	r3, [r2, #0]
 8005b90:	4b9d      	ldr	r3, [pc, #628]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a9c      	ldr	r2, [pc, #624]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d013      	beq.n	8005bcc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba4:	f7fe f956 	bl	8003e54 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bac:	f7fe f952 	bl	8003e54 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b64      	cmp	r3, #100	; 0x64
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e276      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bbe:	4b92      	ldr	r3, [pc, #584]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x2a8>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bcc:	f7fe f942 	bl	8003e54 <HAL_GetTick>
 8005bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bd4:	f7fe f93e 	bl	8003e54 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e262      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005be6:	4b88      	ldr	r3, [pc, #544]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f0      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x2d0>
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0302 	and.w	r3, r3, #2
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d060      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d005      	beq.n	8005c14 <HAL_RCC_OscConfig+0x310>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d119      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d116      	bne.n	8005c42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c14:	4b7c      	ldr	r3, [pc, #496]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_RCC_OscConfig+0x328>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e23f      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2c:	4b76      	ldr	r3, [pc, #472]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	061b      	lsls	r3, r3, #24
 8005c3a:	4973      	ldr	r1, [pc, #460]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c40:	e040      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d023      	beq.n	8005c92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c4a:	4b6f      	ldr	r3, [pc, #444]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a6e      	ldr	r2, [pc, #440]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c56:	f7fe f8fd 	bl	8003e54 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c5c:	e008      	b.n	8005c70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5e:	f7fe f8f9 	bl	8003e54 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e21d      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c70:	4b65      	ldr	r3, [pc, #404]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0f0      	beq.n	8005c5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c7c:	4b62      	ldr	r3, [pc, #392]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	061b      	lsls	r3, r3, #24
 8005c8a:	495f      	ldr	r1, [pc, #380]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]
 8005c90:	e018      	b.n	8005cc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c92:	4b5d      	ldr	r3, [pc, #372]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5c      	ldr	r2, [pc, #368]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c9e:	f7fe f8d9 	bl	8003e54 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ca6:	f7fe f8d5 	bl	8003e54 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e1f9      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005cb8:	4b53      	ldr	r3, [pc, #332]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1f0      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d03c      	beq.n	8005d4a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01c      	beq.n	8005d12 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd8:	4b4b      	ldr	r3, [pc, #300]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cde:	4a4a      	ldr	r2, [pc, #296]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005ce0:	f043 0301 	orr.w	r3, r3, #1
 8005ce4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ce8:	f7fe f8b4 	bl	8003e54 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cf0:	f7fe f8b0 	bl	8003e54 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e1d4      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d02:	4b41      	ldr	r3, [pc, #260]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0ef      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x3ec>
 8005d10:	e01b      	b.n	8005d4a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d12:	4b3d      	ldr	r3, [pc, #244]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d18:	4a3b      	ldr	r2, [pc, #236]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d1a:	f023 0301 	bic.w	r3, r3, #1
 8005d1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d22:	f7fe f897 	bl	8003e54 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d2a:	f7fe f893 	bl	8003e54 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e1b7      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005d3c:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d42:	f003 0302 	and.w	r3, r3, #2
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1ef      	bne.n	8005d2a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 80a6 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10d      	bne.n	8005d84 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d68:	4b27      	ldr	r3, [pc, #156]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6c:	4a26      	ldr	r2, [pc, #152]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d72:	6593      	str	r3, [r2, #88]	; 0x58
 8005d74:	4b24      	ldr	r3, [pc, #144]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7c:	60bb      	str	r3, [r7, #8]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d80:	2301      	movs	r3, #1
 8005d82:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d84:	4b21      	ldr	r3, [pc, #132]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d118      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1d      	ldr	r2, [pc, #116]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9c:	f7fe f85a 	bl	8003e54 <HAL_GetTick>
 8005da0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005da2:	e008      	b.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fe f856 	bl	8003e54 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e17a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005db6:	4b15      	ldr	r3, [pc, #84]	; (8005e0c <HAL_RCC_OscConfig+0x508>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0f0      	beq.n	8005da4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d108      	bne.n	8005ddc <HAL_RCC_OscConfig+0x4d8>
 8005dca:	4b0f      	ldr	r3, [pc, #60]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	4a0d      	ldr	r2, [pc, #52]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dd2:	f043 0301 	orr.w	r3, r3, #1
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005dda:	e029      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	2b05      	cmp	r3, #5
 8005de2:	d115      	bne.n	8005e10 <HAL_RCC_OscConfig+0x50c>
 8005de4:	4b08      	ldr	r3, [pc, #32]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dea:	4a07      	ldr	r2, [pc, #28]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005df4:	4b04      	ldr	r3, [pc, #16]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfa:	4a03      	ldr	r2, [pc, #12]	; (8005e08 <HAL_RCC_OscConfig+0x504>)
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e04:	e014      	b.n	8005e30 <HAL_RCC_OscConfig+0x52c>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
 8005e10:	4b9c      	ldr	r3, [pc, #624]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e16:	4a9b      	ldr	r2, [pc, #620]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e20:	4b98      	ldr	r3, [pc, #608]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	4a97      	ldr	r2, [pc, #604]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e28:	f023 0304 	bic.w	r3, r3, #4
 8005e2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e38:	f7fe f80c 	bl	8003e54 <HAL_GetTick>
 8005e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fe f808 	bl	8003e54 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e12a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e56:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d0ed      	beq.n	8005e40 <HAL_RCC_OscConfig+0x53c>
 8005e64:	e015      	b.n	8005e92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e66:	f7fd fff5 	bl	8003e54 <HAL_GetTick>
 8005e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e6c:	e00a      	b.n	8005e84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e6e:	f7fd fff1 	bl	8003e54 <HAL_GetTick>
 8005e72:	4602      	mov	r2, r0
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	1ad3      	subs	r3, r2, r3
 8005e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e113      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e84:	4b7f      	ldr	r3, [pc, #508]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ed      	bne.n	8005e6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e92:	7ffb      	ldrb	r3, [r7, #31]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e98:	4b7a      	ldr	r3, [pc, #488]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9c:	4a79      	ldr	r2, [pc, #484]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80fe 	beq.w	80060aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	f040 80d0 	bne.w	8006058 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005eb8:	4b72      	ldr	r3, [pc, #456]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0203 	and.w	r2, r3, #3
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d130      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d127      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d11f      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ef8:	2a07      	cmp	r2, #7
 8005efa:	bf14      	ite	ne
 8005efc:	2201      	movne	r2, #1
 8005efe:	2200      	moveq	r2, #0
 8005f00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d113      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	3b01      	subs	r3, #1
 8005f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d109      	bne.n	8005f2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	3b01      	subs	r3, #1
 8005f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d06e      	beq.n	800600c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d069      	beq.n	8006008 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005f34:	4b53      	ldr	r3, [pc, #332]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d105      	bne.n	8005f4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005f40:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e0ad      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f50:	4b4c      	ldr	r3, [pc, #304]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f5c:	f7fd ff7a 	bl	8003e54 <HAL_GetTick>
 8005f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f62:	e008      	b.n	8005f76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f64:	f7fd ff76 	bl	8003e54 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d901      	bls.n	8005f76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e09a      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1f0      	bne.n	8005f64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f82:	4b40      	ldr	r3, [pc, #256]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	4b40      	ldr	r3, [pc, #256]	; (8006088 <HAL_RCC_OscConfig+0x784>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f92:	3a01      	subs	r2, #1
 8005f94:	0112      	lsls	r2, r2, #4
 8005f96:	4311      	orrs	r1, r2
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f9c:	0212      	lsls	r2, r2, #8
 8005f9e:	4311      	orrs	r1, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fa4:	0852      	lsrs	r2, r2, #1
 8005fa6:	3a01      	subs	r2, #1
 8005fa8:	0552      	lsls	r2, r2, #21
 8005faa:	4311      	orrs	r1, r2
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005fb0:	0852      	lsrs	r2, r2, #1
 8005fb2:	3a01      	subs	r2, #1
 8005fb4:	0652      	lsls	r2, r2, #25
 8005fb6:	4311      	orrs	r1, r2
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fbc:	0912      	lsrs	r2, r2, #4
 8005fbe:	0452      	lsls	r2, r2, #17
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	4930      	ldr	r1, [pc, #192]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005fc8:	4b2e      	ldr	r3, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2d      	ldr	r2, [pc, #180]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fd2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fd4:	4b2b      	ldr	r3, [pc, #172]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005fda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fde:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005fe0:	f7fd ff38 	bl	8003e54 <HAL_GetTick>
 8005fe4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe6:	e008      	b.n	8005ffa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fe8:	f7fd ff34 	bl	8003e54 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e058      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ffa:	4b22      	ldr	r3, [pc, #136]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0f0      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006006:	e050      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04f      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d148      	bne.n	80060aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006018:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a19      	ldr	r2, [pc, #100]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800601e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006022:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006024:	4b17      	ldr	r3, [pc, #92]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	4a16      	ldr	r2, [pc, #88]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800602a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800602e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006030:	f7fd ff10 	bl	8003e54 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006038:	f7fd ff0c 	bl	8003e54 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e030      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCC_OscConfig+0x734>
 8006056:	e028      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	2b0c      	cmp	r3, #12
 800605c:	d023      	beq.n	80060a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <HAL_RCC_OscConfig+0x780>)
 8006064:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fd fef3 	bl	8003e54 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006070:	e00c      	b.n	800608c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006072:	f7fd feef 	bl	8003e54 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d905      	bls.n	800608c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e013      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
 8006084:	40021000 	.word	0x40021000
 8006088:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ec      	bne.n	8006072 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006098:	4b06      	ldr	r3, [pc, #24]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	4905      	ldr	r1, [pc, #20]	; (80060b4 <HAL_RCC_OscConfig+0x7b0>)
 800609e:	4b06      	ldr	r3, [pc, #24]	; (80060b8 <HAL_RCC_OscConfig+0x7b4>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	60cb      	str	r3, [r1, #12]
 80060a4:	e001      	b.n	80060aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3720      	adds	r7, #32
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40021000 	.word	0x40021000
 80060b8:	feeefffc 	.word	0xfeeefffc

080060bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0e7      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d910      	bls.n	8006100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b72      	ldr	r3, [pc, #456]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 0207 	bic.w	r2, r3, #7
 80060e6:	4970      	ldr	r1, [pc, #448]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b6e      	ldr	r3, [pc, #440]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0307 	and.w	r3, r3, #7
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e0cf      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d010      	beq.n	800612e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689a      	ldr	r2, [r3, #8]
 8006110:	4b66      	ldr	r3, [pc, #408]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006118:	429a      	cmp	r2, r3
 800611a:	d908      	bls.n	800612e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800611c:	4b63      	ldr	r3, [pc, #396]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	4960      	ldr	r1, [pc, #384]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800612a:	4313      	orrs	r3, r2
 800612c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d04c      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b03      	cmp	r3, #3
 8006140:	d107      	bne.n	8006152 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006142:	4b5a      	ldr	r3, [pc, #360]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d121      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0a6      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800615a:	4b54      	ldr	r3, [pc, #336]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d115      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e09a      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d107      	bne.n	8006182 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006172:	4b4e      	ldr	r3, [pc, #312]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e08e      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006182:	4b4a      	ldr	r3, [pc, #296]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e086      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006192:	4b46      	ldr	r3, [pc, #280]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4943      	ldr	r1, [pc, #268]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a4:	f7fd fe56 	bl	8003e54 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fd fe52 	bl	8003e54 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e06e      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	4b3a      	ldr	r3, [pc, #232]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 020c 	and.w	r2, r3, #12
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1eb      	bne.n	80061ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d010      	beq.n	8006202 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d208      	bcs.n	8006202 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061f0:	4b2e      	ldr	r3, [pc, #184]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	492b      	ldr	r1, [pc, #172]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 80061fe:	4313      	orrs	r3, r2
 8006200:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006202:	4b29      	ldr	r3, [pc, #164]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0307 	and.w	r3, r3, #7
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	429a      	cmp	r2, r3
 800620e:	d210      	bcs.n	8006232 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006210:	4b25      	ldr	r3, [pc, #148]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f023 0207 	bic.w	r2, r3, #7
 8006218:	4923      	ldr	r1, [pc, #140]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006220:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <HAL_RCC_ClockConfig+0x1ec>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d001      	beq.n	8006232 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e036      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623e:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	4918      	ldr	r1, [pc, #96]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800624c:	4313      	orrs	r3, r2
 800624e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800625c:	4b13      	ldr	r3, [pc, #76]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	4910      	ldr	r1, [pc, #64]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 800626c:	4313      	orrs	r3, r2
 800626e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006270:	f000 f824 	bl	80062bc <HAL_RCC_GetSysClockFreq>
 8006274:	4602      	mov	r2, r0
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <HAL_RCC_ClockConfig+0x1f0>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	091b      	lsrs	r3, r3, #4
 800627c:	f003 030f 	and.w	r3, r3, #15
 8006280:	490b      	ldr	r1, [pc, #44]	; (80062b0 <HAL_RCC_ClockConfig+0x1f4>)
 8006282:	5ccb      	ldrb	r3, [r1, r3]
 8006284:	f003 031f 	and.w	r3, r3, #31
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <HAL_RCC_ClockConfig+0x1f8>)
 800628e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006290:	4b09      	ldr	r3, [pc, #36]	; (80062b8 <HAL_RCC_ClockConfig+0x1fc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4618      	mov	r0, r3
 8006296:	f7fd fd8d 	bl	8003db4 <HAL_InitTick>
 800629a:	4603      	mov	r3, r0
 800629c:	72fb      	strb	r3, [r7, #11]

  return status;
 800629e:	7afb      	ldrb	r3, [r7, #11]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	40022000 	.word	0x40022000
 80062ac:	40021000 	.word	0x40021000
 80062b0:	0800f124 	.word	0x0800f124
 80062b4:	20000018 	.word	0x20000018
 80062b8:	20000080 	.word	0x20000080

080062bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	b089      	sub	sp, #36	; 0x24
 80062c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	2300      	movs	r3, #0
 80062c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062ca:	4b3e      	ldr	r3, [pc, #248]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d4:	4b3b      	ldr	r3, [pc, #236]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x34>
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	2b0c      	cmp	r3, #12
 80062e8:	d121      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d11e      	bne.n	800632e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80062f0:	4b34      	ldr	r3, [pc, #208]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d107      	bne.n	800630c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80062fc:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80062fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006302:	0a1b      	lsrs	r3, r3, #8
 8006304:	f003 030f 	and.w	r3, r3, #15
 8006308:	61fb      	str	r3, [r7, #28]
 800630a:	e005      	b.n	8006318 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800630c:	4b2d      	ldr	r3, [pc, #180]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	091b      	lsrs	r3, r3, #4
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006318:	4a2b      	ldr	r2, [pc, #172]	; (80063c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006320:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b04      	cmp	r3, #4
 8006332:	d102      	bne.n	800633a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006334:	4b25      	ldr	r3, [pc, #148]	; (80063cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006336:	61bb      	str	r3, [r7, #24]
 8006338:	e004      	b.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d101      	bne.n	8006344 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006340:	4b23      	ldr	r3, [pc, #140]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006342:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d134      	bne.n	80063b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800634a:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0303 	and.w	r3, r3, #3
 8006352:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d003      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0xa6>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b03      	cmp	r3, #3
 800635e:	d003      	beq.n	8006368 <HAL_RCC_GetSysClockFreq+0xac>
 8006360:	e005      	b.n	800636e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006362:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RCC_GetSysClockFreq+0x110>)
 8006364:	617b      	str	r3, [r7, #20]
      break;
 8006366:	e005      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006368:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800636a:	617b      	str	r3, [r7, #20]
      break;
 800636c:	e002      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	617b      	str	r3, [r7, #20]
      break;
 8006372:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006374:	4b13      	ldr	r3, [pc, #76]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	091b      	lsrs	r3, r3, #4
 800637a:	f003 0307 	and.w	r3, r3, #7
 800637e:	3301      	adds	r3, #1
 8006380:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006382:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	fb03 f202 	mul.w	r2, r3, r2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	fbb2 f3f3 	udiv	r3, r2, r3
 8006398:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800639a:	4b0a      	ldr	r3, [pc, #40]	; (80063c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	0e5b      	lsrs	r3, r3, #25
 80063a0:	f003 0303 	and.w	r3, r3, #3
 80063a4:	3301      	adds	r3, #1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80063aa:	697a      	ldr	r2, [r7, #20]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80063b4:	69bb      	ldr	r3, [r7, #24]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3724      	adds	r7, #36	; 0x24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000
 80063c8:	0800f134 	.word	0x0800f134
 80063cc:	00f42400 	.word	0x00f42400
 80063d0:	007a1200 	.word	0x007a1200

080063d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80063e0:	4b2a      	ldr	r3, [pc, #168]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80063ec:	f7ff fa26 	bl	800583c <HAL_PWREx_GetVoltageRange>
 80063f0:	6178      	str	r0, [r7, #20]
 80063f2:	e014      	b.n	800641e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80063f4:	4b25      	ldr	r3, [pc, #148]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f8:	4a24      	ldr	r2, [pc, #144]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80063fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063fe:	6593      	str	r3, [r2, #88]	; 0x58
 8006400:	4b22      	ldr	r3, [pc, #136]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800640c:	f7ff fa16 	bl	800583c <HAL_PWREx_GetVoltageRange>
 8006410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006412:	4b1e      	ldr	r3, [pc, #120]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006416:	4a1d      	ldr	r2, [pc, #116]	; (800648c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800641c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006424:	d10b      	bne.n	800643e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b80      	cmp	r3, #128	; 0x80
 800642a:	d919      	bls.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2ba0      	cmp	r3, #160	; 0xa0
 8006430:	d902      	bls.n	8006438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006432:	2302      	movs	r3, #2
 8006434:	613b      	str	r3, [r7, #16]
 8006436:	e013      	b.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006438:	2301      	movs	r3, #1
 800643a:	613b      	str	r3, [r7, #16]
 800643c:	e010      	b.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b80      	cmp	r3, #128	; 0x80
 8006442:	d902      	bls.n	800644a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006444:	2303      	movs	r3, #3
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	e00a      	b.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d102      	bne.n	8006456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006450:	2302      	movs	r3, #2
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	e004      	b.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b70      	cmp	r3, #112	; 0x70
 800645a:	d101      	bne.n	8006460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800645c:	2301      	movs	r3, #1
 800645e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006460:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 0207 	bic.w	r2, r3, #7
 8006468:	4909      	ldr	r1, [pc, #36]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	429a      	cmp	r2, r3
 800647c:	d001      	beq.n	8006482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000
 8006490:	40022000 	.word	0x40022000

08006494 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e0b9      	b.n	800661a <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d108      	bne.n	80064c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064b6:	d009      	beq.n	80064cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	61da      	str	r2, [r3, #28]
 80064be:	e005      	b.n	80064cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d12a      	bne.n	8006534 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a4e      	ldr	r2, [pc, #312]	; (8006624 <HAL_SPI_Init+0x190>)
 80064ea:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a4e      	ldr	r2, [pc, #312]	; (8006628 <HAL_SPI_Init+0x194>)
 80064f0:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a4d      	ldr	r2, [pc, #308]	; (800662c <HAL_SPI_Init+0x198>)
 80064f6:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a4d      	ldr	r2, [pc, #308]	; (8006630 <HAL_SPI_Init+0x19c>)
 80064fc:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a4c      	ldr	r2, [pc, #304]	; (8006634 <HAL_SPI_Init+0x1a0>)
 8006502:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a4c      	ldr	r2, [pc, #304]	; (8006638 <HAL_SPI_Init+0x1a4>)
 8006508:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a4b      	ldr	r2, [pc, #300]	; (800663c <HAL_SPI_Init+0x1a8>)
 800650e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a4b      	ldr	r2, [pc, #300]	; (8006640 <HAL_SPI_Init+0x1ac>)
 8006514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800651e:	2b00      	cmp	r3, #0
 8006520:	d103      	bne.n	800652a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a47      	ldr	r2, [pc, #284]	; (8006644 <HAL_SPI_Init+0x1b0>)
 8006526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2202      	movs	r2, #2
 8006538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006554:	d902      	bls.n	800655c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	e002      	b.n	8006562 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800655c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006560:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800656a:	d007      	beq.n	800657c <HAL_SPI_Init+0xe8>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006574:	d002      	beq.n	800657c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800658c:	431a      	orrs	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0302 	and.w	r3, r3, #2
 8006596:	431a      	orrs	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	431a      	orrs	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065be:	ea42 0103 	orr.w	r1, r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	f003 0204 	and.w	r2, r3, #4
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80065f8:	ea42 0103 	orr.w	r1, r2, r3
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	08007ad5 	.word	0x08007ad5
 8006628:	08007ae9 	.word	0x08007ae9
 800662c:	08007afd 	.word	0x08007afd
 8006630:	08007b11 	.word	0x08007b11
 8006634:	08007b25 	.word	0x08007b25
 8006638:	08007b39 	.word	0x08007b39
 800663c:	08007b4d 	.word	0x08007b4d
 8006640:	08007b61 	.word	0x08007b61
 8006644:	080066b5 	.word	0x080066b5

08006648 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e025      	b.n	80066a6 <HAL_SPI_DeInit+0x5e>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006670:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if (hspi->MspDeInitCallback == NULL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <HAL_SPI_DeInit+0x3c>
  {
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <HAL_SPI_DeInit+0x68>)
 8006680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3708      	adds	r7, #8
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	080066c9 	.word	0x080066c9

080066b4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	460b      	mov	r3, r1
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80066ea:	2300      	movs	r3, #0
 80066ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d107      	bne.n	8006704 <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e08b      	b.n	800681c <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_SPI_RegisterCallback+0x36>
 800670e:	2302      	movs	r3, #2
 8006710:	e084      	b.n	800681c <HAL_SPI_RegisterCallback+0x140>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b01      	cmp	r3, #1
 8006724:	d14e      	bne.n	80067c4 <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	2b09      	cmp	r3, #9
 800672a:	d842      	bhi.n	80067b2 <HAL_SPI_RegisterCallback+0xd6>
 800672c:	a201      	add	r2, pc, #4	; (adr r2, 8006734 <HAL_SPI_RegisterCallback+0x58>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	0800675d 	.word	0x0800675d
 8006738:	08006765 	.word	0x08006765
 800673c:	0800676d 	.word	0x0800676d
 8006740:	08006775 	.word	0x08006775
 8006744:	0800677d 	.word	0x0800677d
 8006748:	08006785 	.word	0x08006785
 800674c:	0800678d 	.word	0x0800678d
 8006750:	08006795 	.word	0x08006795
 8006754:	0800679f 	.word	0x0800679f
 8006758:	080067a9 	.word	0x080067a9
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006762:	e056      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800676a:	e052      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006772:	e04e      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800677a:	e04a      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006782:	e046      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800678a:	e042      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006792:	e03e      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800679c:	e039      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80067a6:	e034      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80067b0:	e02f      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	75fb      	strb	r3, [r7, #23]
        break;
 80067c2:	e026      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d118      	bne.n	8006802 <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 80067d0:	7afb      	ldrb	r3, [r7, #11]
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d002      	beq.n	80067dc <HAL_SPI_RegisterCallback+0x100>
 80067d6:	2b09      	cmp	r3, #9
 80067d8:	d005      	beq.n	80067e6 <HAL_SPI_RegisterCallback+0x10a>
 80067da:	e009      	b.n	80067f0 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 80067e4:	e015      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 80067ee:	e010      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006800:	e007      	b.n	8006812 <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
}
 800681c:	4618      	mov	r0, r3
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006842:	2b01      	cmp	r3, #1
 8006844:	d101      	bne.n	800684a <HAL_SPI_Transmit+0x22>
 8006846:	2302      	movs	r3, #2
 8006848:	e158      	b.n	8006afc <HAL_SPI_Transmit+0x2d4>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006852:	f7fd faff 	bl	8003e54 <HAL_GetTick>
 8006856:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006858:	88fb      	ldrh	r3, [r7, #6]
 800685a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d002      	beq.n	800686e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006868:	2302      	movs	r3, #2
 800686a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800686c:	e13d      	b.n	8006aea <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <HAL_SPI_Transmit+0x52>
 8006874:	88fb      	ldrh	r3, [r7, #6]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800687e:	e134      	b.n	8006aea <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2203      	movs	r2, #3
 8006884:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	88fa      	ldrh	r2, [r7, #6]
 800689e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ca:	d10f      	bne.n	80068ec <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d007      	beq.n	800690a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006908:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006912:	d94b      	bls.n	80069ac <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_SPI_Transmit+0xfa>
 800691c:	8afb      	ldrh	r3, [r7, #22]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d13e      	bne.n	80069a0 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006926:	881a      	ldrh	r2, [r3, #0]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006932:	1c9a      	adds	r2, r3, #2
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800693c:	b29b      	uxth	r3, r3
 800693e:	3b01      	subs	r3, #1
 8006940:	b29a      	uxth	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006946:	e02b      	b.n	80069a0 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b02      	cmp	r3, #2
 8006954:	d112      	bne.n	800697c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	881a      	ldrh	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	b29a      	uxth	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	87da      	strh	r2, [r3, #62]	; 0x3e
 800697a:	e011      	b.n	80069a0 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800697c:	f7fd fa6a 	bl	8003e54 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d803      	bhi.n	8006994 <HAL_SPI_Transmit+0x16c>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006992:	d102      	bne.n	800699a <HAL_SPI_Transmit+0x172>
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d102      	bne.n	80069a0 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800699e:	e0a4      	b.n	8006aea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1ce      	bne.n	8006948 <HAL_SPI_Transmit+0x120>
 80069aa:	e07c      	b.n	8006aa6 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d002      	beq.n	80069ba <HAL_SPI_Transmit+0x192>
 80069b4:	8afb      	ldrh	r3, [r7, #22]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d170      	bne.n	8006a9c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d912      	bls.n	80069ea <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	881a      	ldrh	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b02      	subs	r3, #2
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069e8:	e058      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	b29a      	uxth	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006a10:	e044      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d12b      	bne.n	8006a78 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d912      	bls.n	8006a50 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	881a      	ldrh	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	1c9a      	adds	r2, r3, #2
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	3b02      	subs	r3, #2
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4e:	e025      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	330c      	adds	r3, #12
 8006a5a:	7812      	ldrb	r2, [r2, #0]
 8006a5c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a76:	e011      	b.n	8006a9c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a78:	f7fd f9ec 	bl	8003e54 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d803      	bhi.n	8006a90 <HAL_SPI_Transmit+0x268>
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8e:	d102      	bne.n	8006a96 <HAL_SPI_Transmit+0x26e>
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d102      	bne.n	8006a9c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a9a:	e026      	b.n	8006aea <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1b5      	bne.n	8006a12 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aa6:	69ba      	ldr	r2, [r7, #24]
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f001 fb40 	bl	8008130 <SPI_EndRxTxTransaction>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	613b      	str	r3, [r7, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	77fb      	strb	r3, [r7, #31]
 8006ae6:	e000      	b.n	8006aea <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006ae8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af02      	add	r7, sp, #8
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	603b      	str	r3, [r7, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b20:	d112      	bne.n	8006b48 <HAL_SPI_Receive+0x44>
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10e      	bne.n	8006b48 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006b32:	88fa      	ldrh	r2, [r7, #6]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	4613      	mov	r3, r2
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f910 	bl	8006d64 <HAL_SPI_TransmitReceive>
 8006b44:	4603      	mov	r3, r0
 8006b46:	e109      	b.n	8006d5c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_SPI_Receive+0x52>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e102      	b.n	8006d5c <HAL_SPI_Receive+0x258>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b5e:	f7fd f979 	bl	8003e54 <HAL_GetTick>
 8006b62:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d002      	beq.n	8006b76 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b74:	e0e9      	b.n	8006d4a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_SPI_Receive+0x7e>
 8006b7c:	88fb      	ldrh	r3, [r7, #6]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006b86:	e0e0      	b.n	8006d4a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	88fa      	ldrh	r2, [r7, #6]
 8006ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	88fa      	ldrh	r2, [r7, #6]
 8006ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bd2:	d908      	bls.n	8006be6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006be2:	605a      	str	r2, [r3, #4]
 8006be4:	e007      	b.n	8006bf6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685a      	ldr	r2, [r3, #4]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bf4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfe:	d10f      	bne.n	8006c20 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c1e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d007      	beq.n	8006c3e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c3c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006c46:	d867      	bhi.n	8006d18 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006c48:	e030      	b.n	8006cac <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d117      	bne.n	8006c88 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f103 020c 	add.w	r2, r3, #12
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006c86:	e011      	b.n	8006cac <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c88:	f7fd f8e4 	bl	8003e54 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d803      	bhi.n	8006ca0 <HAL_SPI_Receive+0x19c>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9e:	d102      	bne.n	8006ca6 <HAL_SPI_Receive+0x1a2>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d102      	bne.n	8006cac <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006caa:	e04e      	b.n	8006d4a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1c8      	bne.n	8006c4a <HAL_SPI_Receive+0x146>
 8006cb8:	e034      	b.n	8006d24 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d115      	bne.n	8006cf4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	1c9a      	adds	r2, r3, #2
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006cf2:	e011      	b.n	8006d18 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cf4:	f7fd f8ae 	bl	8003e54 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d803      	bhi.n	8006d0c <HAL_SPI_Receive+0x208>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0a:	d102      	bne.n	8006d12 <HAL_SPI_Receive+0x20e>
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006d16:	e018      	b.n	8006d4a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1ca      	bne.n	8006cba <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f001 f9a9 	bl	8008080 <SPI_EndRxTransaction>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	75fb      	strb	r3, [r7, #23]
 8006d46:	e000      	b.n	8006d4a <HAL_SPI_Receive+0x246>
  }

error :
 8006d48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08a      	sub	sp, #40	; 0x28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006d72:	2301      	movs	r3, #1
 8006d74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_SPI_TransmitReceive+0x26>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e1fb      	b.n	8007182 <HAL_SPI_TransmitReceive+0x41e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2201      	movs	r2, #1
 8006d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d92:	f7fd f85f 	bl	8003e54 <HAL_GetTick>
 8006d96:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d9e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006da6:	887b      	ldrh	r3, [r7, #2]
 8006da8:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006daa:	887b      	ldrh	r3, [r7, #2]
 8006dac:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006dae:	7efb      	ldrb	r3, [r7, #27]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d00e      	beq.n	8006dd2 <HAL_SPI_TransmitReceive+0x6e>
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dba:	d106      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x66>
 8006dc4:	7efb      	ldrb	r3, [r7, #27]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d003      	beq.n	8006dd2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006dca:	2302      	movs	r3, #2
 8006dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006dd0:	e1cd      	b.n	800716e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x80>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_SPI_TransmitReceive+0x80>
 8006dde:	887b      	ldrh	r3, [r7, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d103      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006dea:	e1c0      	b.n	800716e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d003      	beq.n	8006e00 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2205      	movs	r2, #5
 8006dfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	887a      	ldrh	r2, [r7, #2]
 8006e10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	887a      	ldrh	r2, [r7, #2]
 8006e18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	887a      	ldrh	r2, [r7, #2]
 8006e26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	887a      	ldrh	r2, [r7, #2]
 8006e2c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e42:	d802      	bhi.n	8006e4a <HAL_SPI_TransmitReceive+0xe6>
 8006e44:	8a3b      	ldrh	r3, [r7, #16]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d908      	bls.n	8006e5c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	e007      	b.n	8006e6c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685a      	ldr	r2, [r3, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e6a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d007      	beq.n	8006e8a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e92:	d97c      	bls.n	8006f8e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <HAL_SPI_TransmitReceive+0x13e>
 8006e9c:	8a7b      	ldrh	r3, [r7, #18]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d169      	bne.n	8006f76 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	881a      	ldrh	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb2:	1c9a      	adds	r2, r3, #2
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ec6:	e056      	b.n	8006f76 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d11b      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x1aa>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d016      	beq.n	8006f0e <HAL_SPI_TransmitReceive+0x1aa>
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d113      	bne.n	8006f0e <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	881a      	ldrh	r2, [r3, #0]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	1c9a      	adds	r2, r3, #2
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	3b01      	subs	r3, #1
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d11c      	bne.n	8006f56 <HAL_SPI_TransmitReceive+0x1f2>
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d016      	beq.n	8006f56 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	b292      	uxth	r2, r2
 8006f34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	1c9a      	adds	r2, r3, #2
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f52:	2301      	movs	r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f56:	f7fc ff7d 	bl	8003e54 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d807      	bhi.n	8006f76 <HAL_SPI_TransmitReceive+0x212>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d003      	beq.n	8006f76 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006f74:	e0fb      	b.n	800716e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1a3      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x164>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d19d      	bne.n	8006ec8 <HAL_SPI_TransmitReceive+0x164>
 8006f8c:	e0df      	b.n	800714e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_SPI_TransmitReceive+0x23a>
 8006f96:	8a7b      	ldrh	r3, [r7, #18]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	f040 80cb 	bne.w	8007134 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d912      	bls.n	8006fce <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	881a      	ldrh	r2, [r3, #0]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb8:	1c9a      	adds	r2, r3, #2
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b02      	subs	r3, #2
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fcc:	e0b2      	b.n	8007134 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe0:	1c5a      	adds	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fea:	b29b      	uxth	r3, r3
 8006fec:	3b01      	subs	r3, #1
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff4:	e09e      	b.n	8007134 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b02      	cmp	r3, #2
 8007002:	d134      	bne.n	800706e <HAL_SPI_TransmitReceive+0x30a>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d02f      	beq.n	800706e <HAL_SPI_TransmitReceive+0x30a>
 800700e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12c      	bne.n	800706e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007018:	b29b      	uxth	r3, r3
 800701a:	2b01      	cmp	r3, #1
 800701c:	d912      	bls.n	8007044 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	881a      	ldrh	r2, [r3, #0]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	1c9a      	adds	r2, r3, #2
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b02      	subs	r3, #2
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007042:	e012      	b.n	800706a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	330c      	adds	r3, #12
 800704e:	7812      	ldrb	r2, [r2, #0]
 8007050:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f003 0301 	and.w	r3, r3, #1
 8007078:	2b01      	cmp	r3, #1
 800707a:	d148      	bne.n	800710e <HAL_SPI_TransmitReceive+0x3aa>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007082:	b29b      	uxth	r3, r3
 8007084:	2b00      	cmp	r3, #0
 8007086:	d042      	beq.n	800710e <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708e:	b29b      	uxth	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	d923      	bls.n	80070dc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709e:	b292      	uxth	r2, r2
 80070a0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	1c9a      	adds	r2, r3, #2
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b02      	subs	r3, #2
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d81f      	bhi.n	800710a <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d8:	605a      	str	r2, [r3, #4]
 80070da:	e016      	b.n	800710a <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f103 020c 	add.w	r2, r3, #12
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80070fe:	b29b      	uxth	r3, r3
 8007100:	3b01      	subs	r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800710a:	2301      	movs	r3, #1
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800710e:	f7fc fea1 	bl	8003e54 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711a:	429a      	cmp	r2, r3
 800711c:	d803      	bhi.n	8007126 <HAL_SPI_TransmitReceive+0x3c2>
 800711e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d102      	bne.n	800712c <HAL_SPI_TransmitReceive+0x3c8>
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	2b00      	cmp	r3, #0
 800712a:	d103      	bne.n	8007134 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007132:	e01c      	b.n	800716e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007138:	b29b      	uxth	r3, r3
 800713a:	2b00      	cmp	r3, #0
 800713c:	f47f af5b 	bne.w	8006ff6 <HAL_SPI_TransmitReceive+0x292>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f af54 	bne.w	8006ff6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 ffec 	bl	8008130 <SPI_EndRxTxTransaction>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d006      	beq.n	800716c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2220      	movs	r2, #32
 8007168:	661a      	str	r2, [r3, #96]	; 0x60
 800716a:	e000      	b.n	800716e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800716c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800717e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800719a:	2300      	movs	r3, #0
 800719c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_SPI_Transmit_DMA+0x20>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e0d8      	b.n	800735e <HAL_SPI_Transmit_DMA+0x1d2>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d002      	beq.n	80071c6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
 80071c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071c4:	e0c6      	b.n	8007354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_Transmit_DMA+0x46>
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d102      	bne.n	80071d8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80071d6:	e0bd      	b.n	8007354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2203      	movs	r2, #3
 80071dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	88fa      	ldrh	r2, [r7, #6]
 80071f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	88fa      	ldrh	r2, [r7, #6]
 80071f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007222:	d10f      	bne.n	8007244 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007232:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007242:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007248:	4a47      	ldr	r2, [pc, #284]	; (8007368 <HAL_SPI_Transmit_DMA+0x1dc>)
 800724a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007250:	4a46      	ldr	r2, [pc, #280]	; (800736c <HAL_SPI_Transmit_DMA+0x1e0>)
 8007252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	4a45      	ldr	r2, [pc, #276]	; (8007370 <HAL_SPI_Transmit_DMA+0x1e4>)
 800725a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007260:	2200      	movs	r2, #0
 8007262:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007272:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800727c:	d82d      	bhi.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007288:	d127      	bne.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728e:	b29b      	uxth	r3, r3
 8007290:	f003 0301 	and.w	r3, r3, #1
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10f      	bne.n	80072b8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072a6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	085b      	lsrs	r3, r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072b6:	e010      	b.n	80072da <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685a      	ldr	r2, [r3, #4]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072c6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3301      	adds	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	4619      	mov	r1, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	330c      	adds	r3, #12
 80072ea:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80072f2:	f7fd fdd3 	bl	8004e9c <HAL_DMA_Start_IT>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00c      	beq.n	8007316 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007300:	f043 0210 	orr.w	r2, r3, #16
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007314:	e01e      	b.n	8007354 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b40      	cmp	r3, #64	; 0x40
 8007322:	d007      	beq.n	8007334 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007332:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f042 0220 	orr.w	r2, r2, #32
 8007342:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0202 	orr.w	r2, r2, #2
 8007352:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	08007d7b 	.word	0x08007d7b
 800736c:	08007b91 	.word	0x08007b91
 8007370:	08007dd5 	.word	0x08007dd5

08007374 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	4613      	mov	r3, r2
 8007380:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007382:	2300      	movs	r3, #0
 8007384:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d110      	bne.n	80073b0 <HAL_SPI_Receive_DMA+0x3c>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007396:	d10b      	bne.n	80073b0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2204      	movs	r2, #4
 800739c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80073a0:	88fb      	ldrh	r3, [r7, #6]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	68b9      	ldr	r1, [r7, #8]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 f908 	bl	80075bc <HAL_SPI_TransmitReceive_DMA>
 80073ac:	4603      	mov	r3, r0
 80073ae:	e0fb      	b.n	80075a8 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_SPI_Receive_DMA+0x4a>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e0f4      	b.n	80075a8 <HAL_SPI_Receive_DMA+0x234>
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d002      	beq.n	80073d8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
 80073d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073d6:	e0e2      	b.n	800759e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SPI_Receive_DMA+0x70>
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d102      	bne.n	80073ea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80073e8:	e0d9      	b.n	800759e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2204      	movs	r2, #4
 80073ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	88fa      	ldrh	r2, [r7, #6]
 800740a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2200      	movs	r2, #0
 800741e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800742e:	d10f      	bne.n	8007450 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800744e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800745e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007468:	d908      	bls.n	800747c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	e042      	b.n	8007502 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685a      	ldr	r2, [r3, #4]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800748a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007496:	d134      	bne.n	8007502 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80074a6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d111      	bne.n	80074dc <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	085b      	lsrs	r3, r3, #1
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80074da:	e012      	b.n	8007502 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685a      	ldr	r2, [r3, #4]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074ea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	3301      	adds	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	4a2a      	ldr	r2, [pc, #168]	; (80075b0 <HAL_SPI_Receive_DMA+0x23c>)
 8007508:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750e:	4a29      	ldr	r2, [pc, #164]	; (80075b4 <HAL_SPI_Receive_DMA+0x240>)
 8007510:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007516:	4a28      	ldr	r2, [pc, #160]	; (80075b8 <HAL_SPI_Receive_DMA+0x244>)
 8007518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751e:	2200      	movs	r2, #0
 8007520:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	330c      	adds	r3, #12
 800752c:	4619      	mov	r1, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800753a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800753c:	f7fd fcae 	bl	8004e9c <HAL_DMA_Start_IT>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800754a:	f043 0210 	orr.w	r2, r3, #16
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800755e:	e01e      	b.n	800759e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d007      	beq.n	800757e <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800757c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f042 0220 	orr.w	r2, r2, #32
 800758c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3718      	adds	r7, #24
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	08007d99 	.word	0x08007d99
 80075b4:	08007c3b 	.word	0x08007c3b
 80075b8:	08007dd5 	.word	0x08007dd5

080075bc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80075ca:	2300      	movs	r3, #0
 80075cc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d101      	bne.n	80075dc <HAL_SPI_TransmitReceive_DMA+0x20>
 80075d8:	2302      	movs	r3, #2
 80075da:	e16c      	b.n	80078b6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075ea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80075f2:	7dbb      	ldrb	r3, [r7, #22]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d00d      	beq.n	8007614 <HAL_SPI_TransmitReceive_DMA+0x58>
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075fe:	d106      	bne.n	800760e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <HAL_SPI_TransmitReceive_DMA+0x52>
 8007608:	7dbb      	ldrb	r3, [r7, #22]
 800760a:	2b04      	cmp	r3, #4
 800760c:	d002      	beq.n	8007614 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800760e:	2302      	movs	r3, #2
 8007610:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007612:	e14b      	b.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007620:	887b      	ldrh	r3, [r7, #2]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800762a:	e13f      	b.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b04      	cmp	r3, #4
 8007636:	d003      	beq.n	8007640 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2205      	movs	r2, #5
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	887a      	ldrh	r2, [r7, #2]
 8007650:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	887a      	ldrh	r2, [r7, #2]
 8007656:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	887a      	ldrh	r2, [r7, #2]
 8007662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	887a      	ldrh	r2, [r7, #2]
 800766a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007688:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007692:	d908      	bls.n	80076a6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076a2:	605a      	str	r2, [r3, #4]
 80076a4:	e06f      	b.n	8007786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076b4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c0:	d126      	bne.n	8007710 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10f      	bne.n	80076ee <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685a      	ldr	r2, [r3, #4]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076dc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	085b      	lsrs	r3, r3, #1
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80076ec:	e010      	b.n	8007710 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076fc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007702:	b29b      	uxth	r3, r3
 8007704:	085b      	lsrs	r3, r3, #1
 8007706:	b29b      	uxth	r3, r3
 8007708:	3301      	adds	r3, #1
 800770a:	b29a      	uxth	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800771a:	d134      	bne.n	8007786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800772a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007732:	b29b      	uxth	r3, r3
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d111      	bne.n	8007760 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800774a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007752:	b29b      	uxth	r3, r3
 8007754:	085b      	lsrs	r3, r3, #1
 8007756:	b29a      	uxth	r2, r3
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800775e:	e012      	b.n	8007786 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800776e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007776:	b29b      	uxth	r3, r3
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	3301      	adds	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800778c:	b2db      	uxtb	r3, r3
 800778e:	2b04      	cmp	r3, #4
 8007790:	d108      	bne.n	80077a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	4a4a      	ldr	r2, [pc, #296]	; (80078c0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007798:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800779e:	4a49      	ldr	r2, [pc, #292]	; (80078c4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80077a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80077a2:	e007      	b.n	80077b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a8:	4a47      	ldr	r2, [pc, #284]	; (80078c8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80077aa:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b0:	4a46      	ldr	r2, [pc, #280]	; (80078cc <HAL_SPI_TransmitReceive_DMA+0x310>)
 80077b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077b8:	4a45      	ldr	r2, [pc, #276]	; (80078d0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80077ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c0:	2200      	movs	r2, #0
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	330c      	adds	r3, #12
 80077ce:	4619      	mov	r1, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80077dc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80077de:	f7fd fb5d 	bl	8004e9c <HAL_DMA_Start_IT>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00c      	beq.n	8007802 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077ec:	f043 0210 	orr.w	r2, r3, #16
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007800:	e054      	b.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0201 	orr.w	r2, r2, #1
 8007810:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	2200      	movs	r2, #0
 8007818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781e:	2200      	movs	r2, #0
 8007820:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	2200      	movs	r2, #0
 8007828:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	2200      	movs	r2, #0
 8007830:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783a:	4619      	mov	r1, r3
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007848:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800784a:	f7fd fb27 	bl	8004e9c <HAL_DMA_Start_IT>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00c      	beq.n	800786e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007858:	f043 0210 	orr.w	r2, r3, #16
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800786c:	e01e      	b.n	80078ac <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d007      	beq.n	800788c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800788a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0220 	orr.w	r2, r2, #32
 800789a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	685a      	ldr	r2, [r3, #4]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 0202 	orr.w	r2, r2, #2
 80078aa:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3718      	adds	r7, #24
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	08007d99 	.word	0x08007d99
 80078c4:	08007c3b 	.word	0x08007c3b
 80078c8:	08007db7 	.word	0x08007db7
 80078cc:	08007ce7 	.word	0x08007ce7
 80078d0:	08007dd5 	.word	0x08007dd5

080078d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b088      	sub	sp, #32
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	099b      	lsrs	r3, r3, #6
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10f      	bne.n	8007918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	099b      	lsrs	r3, r3, #6
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d004      	beq.n	8007918 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
    return;
 8007916:	e0d8      	b.n	8007aca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	f003 0301 	and.w	r3, r3, #1
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <HAL_SPI_IRQHandler+0x66>
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	09db      	lsrs	r3, r3, #7
 8007928:	f003 0301 	and.w	r3, r3, #1
 800792c:	2b00      	cmp	r3, #0
 800792e:	d004      	beq.n	800793a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
    return;
 8007938:	e0c7      	b.n	8007aca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	095b      	lsrs	r3, r3, #5
 800793e:	f003 0301 	and.w	r3, r3, #1
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10c      	bne.n	8007960 <HAL_SPI_IRQHandler+0x8c>
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	099b      	lsrs	r3, r3, #6
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	0a1b      	lsrs	r3, r3, #8
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	f000 80b5 	beq.w	8007aca <HAL_SPI_IRQHandler+0x1f6>
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	095b      	lsrs	r3, r3, #5
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	f000 80ae 	beq.w	8007aca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	099b      	lsrs	r3, r3, #6
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d023      	beq.n	80079c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b03      	cmp	r3, #3
 8007984:	d011      	beq.n	80079aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800798a:	f043 0204 	orr.w	r2, r3, #4
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	617b      	str	r3, [r7, #20]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	617b      	str	r3, [r7, #20]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	e00b      	b.n	80079c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079aa:	2300      	movs	r3, #0
 80079ac:	613b      	str	r3, [r7, #16]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	613b      	str	r3, [r7, #16]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	613b      	str	r3, [r7, #16]
 80079be:	693b      	ldr	r3, [r7, #16]
        return;
 80079c0:	e083      	b.n	8007aca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d014      	beq.n	80079f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80079da:	2300      	movs	r3, #0
 80079dc:	60fb      	str	r3, [r7, #12]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	60fb      	str	r3, [r7, #12]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	0a1b      	lsrs	r3, r3, #8
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a08:	f043 0208 	orr.w	r2, r3, #8
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007a10:	2300      	movs	r3, #0
 8007a12:	60bb      	str	r3, [r7, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	60bb      	str	r3, [r7, #8]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d050      	beq.n	8007ac8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007a34:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	f003 0302 	and.w	r3, r3, #2
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <HAL_SPI_IRQHandler+0x17e>
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d034      	beq.n	8007abc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0203 	bic.w	r2, r2, #3
 8007a60:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d011      	beq.n	8007a8e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	4a18      	ldr	r2, [pc, #96]	; (8007ad0 <HAL_SPI_IRQHandler+0x1fc>)
 8007a70:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fa70 	bl	8004f5c <HAL_DMA_Abort_IT>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a86:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d017      	beq.n	8007ac6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9a:	4a0d      	ldr	r2, [pc, #52]	; (8007ad0 <HAL_SPI_IRQHandler+0x1fc>)
 8007a9c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd fa5a 	bl	8004f5c <HAL_DMA_Abort_IT>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00b      	beq.n	8007ac6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8007aba:	e004      	b.n	8007ac6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8007ac4:	e000      	b.n	8007ac8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 8007ac6:	bf00      	nop
    return;
 8007ac8:	bf00      	nop
  }
}
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	08007e17 	.word	0x08007e17

08007ad4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007b82:	b2db      	uxtb	r3, r3
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b086      	sub	sp, #24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007b9e:	f7fc f959 	bl	8003e54 <HAL_GetTick>
 8007ba2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b20      	cmp	r3, #32
 8007bb0:	d03c      	beq.n	8007c2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f022 0220 	bic.w	r2, r2, #32
 8007bc0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0202 	bic.w	r2, r2, #2
 8007bd0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007bd2:	693a      	ldr	r2, [r7, #16]
 8007bd4:	2164      	movs	r1, #100	; 0x64
 8007bd6:	6978      	ldr	r0, [r7, #20]
 8007bd8:	f000 faaa 	bl	8008130 <SPI_EndRxTxTransaction>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	f043 0220 	orr.w	r2, r3, #32
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10a      	bne.n	8007c0c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60fb      	str	r3, [r7, #12]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c26:	6978      	ldr	r0, [r7, #20]
 8007c28:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007c2a:	e003      	b.n	8007c34 <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c30:	6978      	ldr	r0, [r7, #20]
 8007c32:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c48:	f7fc f904 	bl	8003e54 <HAL_GetTick>
 8007c4c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0320 	and.w	r3, r3, #32
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d03d      	beq.n	8007cd8 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f022 0220 	bic.w	r2, r2, #32
 8007c6a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10d      	bne.n	8007c90 <SPI_DMAReceiveCplt+0x56>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c7c:	d108      	bne.n	8007c90 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f022 0203 	bic.w	r2, r2, #3
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	e007      	b.n	8007ca0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0201 	bic.w	r2, r2, #1
 8007c9e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	2164      	movs	r1, #100	; 0x64
 8007ca4:	68f8      	ldr	r0, [r7, #12]
 8007ca6:	f000 f9eb 	bl	8008080 <SPI_EndRxTransaction>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007cd6:	e003      	b.n	8007ce0 <SPI_DMAReceiveCplt+0xa6>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cf4:	f7fc f8ae 	bl	8003e54 <HAL_GetTick>
 8007cf8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d031      	beq.n	8007d6c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0220 	bic.w	r2, r2, #32
 8007d16:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	2164      	movs	r1, #100	; 0x64
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fa07 	bl	8008130 <SPI_EndRxTxTransaction>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d2c:	f043 0220 	orr.w	r2, r3, #32
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0203 	bic.w	r2, r2, #3
 8007d42:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	2201      	movs	r2, #1
 8007d56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d004      	beq.n	8007d6c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007d6a:	e003      	b.n	8007d74 <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007d90:	bf00      	nop
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dae:	bf00      	nop
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b084      	sub	sp, #16
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0203 	bic.w	r2, r2, #3
 8007df0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df6:	f043 0210 	orr.w	r2, r3, #16
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e0e:	bf00      	nop
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e22:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
	...

08007e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	4613      	mov	r3, r2
 8007e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e54:	f7fb fffe 	bl	8003e54 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5c:	1a9b      	subs	r3, r3, r2
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4413      	add	r3, r2
 8007e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e64:	f7fb fff6 	bl	8003e54 <HAL_GetTick>
 8007e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e6a:	4b39      	ldr	r3, [pc, #228]	; (8007f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	015b      	lsls	r3, r3, #5
 8007e70:	0d1b      	lsrs	r3, r3, #20
 8007e72:	69fa      	ldr	r2, [r7, #28]
 8007e74:	fb02 f303 	mul.w	r3, r2, r3
 8007e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e7a:	e054      	b.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e82:	d050      	beq.n	8007f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e84:	f7fb ffe6 	bl	8003e54 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	69bb      	ldr	r3, [r7, #24]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d902      	bls.n	8007e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d13d      	bne.n	8007f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	685b      	ldr	r3, [r3, #4]
 8007eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007eb2:	d111      	bne.n	8007ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ebc:	d004      	beq.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ec6:	d107      	bne.n	8007ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee0:	d10f      	bne.n	8007f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e017      	b.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689a      	ldr	r2, [r3, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	bf0c      	ite	eq
 8007f36:	2301      	moveq	r3, #1
 8007f38:	2300      	movne	r3, #0
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	79fb      	ldrb	r3, [r7, #7]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d19b      	bne.n	8007e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3720      	adds	r7, #32
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000018 	.word	0x20000018

08007f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	; 0x28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007f66:	f7fb ff75 	bl	8003e54 <HAL_GetTick>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	4413      	add	r3, r2
 8007f74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007f76:	f7fb ff6d 	bl	8003e54 <HAL_GetTick>
 8007f7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	330c      	adds	r3, #12
 8007f82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007f84:	4b3d      	ldr	r3, [pc, #244]	; (800807c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4413      	add	r3, r2
 8007f8e:	00da      	lsls	r2, r3, #3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	0d1b      	lsrs	r3, r3, #20
 8007f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f96:	fb02 f303 	mul.w	r3, r2, r3
 8007f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007f9c:	e060      	b.n	8008060 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007fa4:	d107      	bne.n	8007fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d104      	bne.n	8007fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fbc:	d050      	beq.n	8008060 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007fbe:	f7fb ff49 	bl	8003e54 <HAL_GetTick>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	1ad3      	subs	r3, r2, r3
 8007fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d902      	bls.n	8007fd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d13d      	bne.n	8008050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fec:	d111      	bne.n	8008012 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	d004      	beq.n	8008002 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008000:	d107      	bne.n	8008012 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800801a:	d10f      	bne.n	800803c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800803a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e010      	b.n	8008072 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008056:	2300      	movs	r3, #0
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	3b01      	subs	r3, #1
 800805e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	4013      	ands	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	429a      	cmp	r2, r3
 800806e:	d196      	bne.n	8007f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3728      	adds	r7, #40	; 0x28
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000018 	.word	0x20000018

08008080 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af02      	add	r7, sp, #8
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008094:	d111      	bne.n	80080ba <SPI_EndRxTransaction+0x3a>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809e:	d004      	beq.n	80080aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a8:	d107      	bne.n	80080ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080b8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2180      	movs	r1, #128	; 0x80
 80080c4:	68f8      	ldr	r0, [r7, #12]
 80080c6:	f7ff febd 	bl	8007e44 <SPI_WaitFlagStateUntilTimeout>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d007      	beq.n	80080e0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080d4:	f043 0220 	orr.w	r2, r3, #32
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e023      	b.n	8008128 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080e8:	d11d      	bne.n	8008126 <SPI_EndRxTransaction+0xa6>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f2:	d004      	beq.n	80080fe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080fc:	d113      	bne.n	8008126 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2200      	movs	r2, #0
 8008106:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f7ff ff22 	bl	8007f54 <SPI_WaitFifoStateUntilTimeout>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800811a:	f043 0220 	orr.w	r2, r3, #32
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e000      	b.n	8008128 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3710      	adds	r7, #16
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	60b9      	str	r1, [r7, #8]
 800813a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	2200      	movs	r2, #0
 8008144:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff ff03 	bl	8007f54 <SPI_WaitFifoStateUntilTimeout>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e027      	b.n	80081b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	2200      	movs	r2, #0
 800816c:	2180      	movs	r1, #128	; 0x80
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7ff fe68 	bl	8007e44 <SPI_WaitFlagStateUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d007      	beq.n	800818a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800817e:	f043 0220 	orr.w	r2, r3, #32
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e014      	b.n	80081b4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	9300      	str	r3, [sp, #0]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2200      	movs	r2, #0
 8008192:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff fedc 	bl	8007f54 <SPI_WaitFifoStateUntilTimeout>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a6:	f043 0220 	orr.w	r2, r3, #32
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e000      	b.n	80081b4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e049      	b.n	8008262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7f8 fe86 	bl	8000ef4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	3304      	adds	r3, #4
 80081f8:	4619      	mov	r1, r3
 80081fa:	4610      	mov	r0, r2
 80081fc:	f000 f968 	bl	80084d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827a:	b2db      	uxtb	r3, r3
 800827c:	2b01      	cmp	r3, #1
 800827e:	d001      	beq.n	8008284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e047      	b.n	8008314 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2202      	movs	r2, #2
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a23      	ldr	r2, [pc, #140]	; (8008320 <HAL_TIM_Base_Start+0xb4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01d      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829e:	d018      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a1f      	ldr	r2, [pc, #124]	; (8008324 <HAL_TIM_Base_Start+0xb8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a1e      	ldr	r2, [pc, #120]	; (8008328 <HAL_TIM_Base_Start+0xbc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d00e      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a1c      	ldr	r2, [pc, #112]	; (800832c <HAL_TIM_Base_Start+0xc0>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d009      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a1b      	ldr	r2, [pc, #108]	; (8008330 <HAL_TIM_Base_Start+0xc4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d004      	beq.n	80082d2 <HAL_TIM_Base_Start+0x66>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <HAL_TIM_Base_Start+0xc8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d115      	bne.n	80082fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	4b17      	ldr	r3, [pc, #92]	; (8008338 <HAL_TIM_Base_Start+0xcc>)
 80082da:	4013      	ands	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b06      	cmp	r3, #6
 80082e2:	d015      	beq.n	8008310 <HAL_TIM_Base_Start+0xa4>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ea:	d011      	beq.n	8008310 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0201 	orr.w	r2, r2, #1
 80082fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082fc:	e008      	b.n	8008310 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f042 0201 	orr.w	r2, r2, #1
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	e000      	b.n	8008312 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	40012c00 	.word	0x40012c00
 8008324:	40000400 	.word	0x40000400
 8008328:	40000800 	.word	0x40000800
 800832c:	40000c00 	.word	0x40000c00
 8008330:	40013400 	.word	0x40013400
 8008334:	40014000 	.word	0x40014000
 8008338:	00010007 	.word	0x00010007

0800833c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008350:	2b01      	cmp	r3, #1
 8008352:	d101      	bne.n	8008358 <HAL_TIM_ConfigClockSource+0x1c>
 8008354:	2302      	movs	r3, #2
 8008356:	e0b6      	b.n	80084c6 <HAL_TIM_ConfigClockSource+0x18a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800837a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008394:	d03e      	beq.n	8008414 <HAL_TIM_ConfigClockSource+0xd8>
 8008396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800839a:	f200 8087 	bhi.w	80084ac <HAL_TIM_ConfigClockSource+0x170>
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a2:	f000 8086 	beq.w	80084b2 <HAL_TIM_ConfigClockSource+0x176>
 80083a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083aa:	d87f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083ac:	2b70      	cmp	r3, #112	; 0x70
 80083ae:	d01a      	beq.n	80083e6 <HAL_TIM_ConfigClockSource+0xaa>
 80083b0:	2b70      	cmp	r3, #112	; 0x70
 80083b2:	d87b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083b4:	2b60      	cmp	r3, #96	; 0x60
 80083b6:	d050      	beq.n	800845a <HAL_TIM_ConfigClockSource+0x11e>
 80083b8:	2b60      	cmp	r3, #96	; 0x60
 80083ba:	d877      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083bc:	2b50      	cmp	r3, #80	; 0x50
 80083be:	d03c      	beq.n	800843a <HAL_TIM_ConfigClockSource+0xfe>
 80083c0:	2b50      	cmp	r3, #80	; 0x50
 80083c2:	d873      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083c4:	2b40      	cmp	r3, #64	; 0x40
 80083c6:	d058      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x13e>
 80083c8:	2b40      	cmp	r3, #64	; 0x40
 80083ca:	d86f      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083cc:	2b30      	cmp	r3, #48	; 0x30
 80083ce:	d064      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15e>
 80083d0:	2b30      	cmp	r3, #48	; 0x30
 80083d2:	d86b      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083d4:	2b20      	cmp	r3, #32
 80083d6:	d060      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15e>
 80083d8:	2b20      	cmp	r3, #32
 80083da:	d867      	bhi.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d05c      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15e>
 80083e0:	2b10      	cmp	r3, #16
 80083e2:	d05a      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x15e>
 80083e4:	e062      	b.n	80084ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6818      	ldr	r0, [r3, #0]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	6899      	ldr	r1, [r3, #8]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	f000 f97f 	bl	80086f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68ba      	ldr	r2, [r7, #8]
 8008410:	609a      	str	r2, [r3, #8]
      break;
 8008412:	e04f      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6818      	ldr	r0, [r3, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	6899      	ldr	r1, [r3, #8]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f000 f968 	bl	80086f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	689a      	ldr	r2, [r3, #8]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008436:	609a      	str	r2, [r3, #8]
      break;
 8008438:	e03c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	6859      	ldr	r1, [r3, #4]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	461a      	mov	r2, r3
 8008448:	f000 f8dc 	bl	8008604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2150      	movs	r1, #80	; 0x50
 8008452:	4618      	mov	r0, r3
 8008454:	f000 f935 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8008458:	e02c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6859      	ldr	r1, [r3, #4]
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	461a      	mov	r2, r3
 8008468:	f000 f8fb 	bl	8008662 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2160      	movs	r1, #96	; 0x60
 8008472:	4618      	mov	r0, r3
 8008474:	f000 f925 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8008478:	e01c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6859      	ldr	r1, [r3, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	461a      	mov	r2, r3
 8008488:	f000 f8bc 	bl	8008604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2140      	movs	r1, #64	; 0x40
 8008492:	4618      	mov	r0, r3
 8008494:	f000 f915 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 8008498:	e00c      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4619      	mov	r1, r3
 80084a4:	4610      	mov	r0, r2
 80084a6:	f000 f90c 	bl	80086c2 <TIM_ITRx_SetConfig>
      break;
 80084aa:	e003      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
      break;
 80084b0:	e000      	b.n	80084b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80084b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4a40      	ldr	r2, [pc, #256]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d013      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ee:	d00f      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a3d      	ldr	r2, [pc, #244]	; (80085e8 <TIM_Base_SetConfig+0x118>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00b      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a3c      	ldr	r2, [pc, #240]	; (80085ec <TIM_Base_SetConfig+0x11c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d007      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3b      	ldr	r2, [pc, #236]	; (80085f0 <TIM_Base_SetConfig+0x120>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d003      	beq.n	8008510 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3a      	ldr	r2, [pc, #232]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d108      	bne.n	8008522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	685b      	ldr	r3, [r3, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	4313      	orrs	r3, r2
 8008520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a2f      	ldr	r2, [pc, #188]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d01f      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d01b      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <TIM_Base_SetConfig+0x118>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d017      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a2b      	ldr	r2, [pc, #172]	; (80085ec <TIM_Base_SetConfig+0x11c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2a      	ldr	r2, [pc, #168]	; (80085f0 <TIM_Base_SetConfig+0x120>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00f      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a29      	ldr	r2, [pc, #164]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00b      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a28      	ldr	r2, [pc, #160]	; (80085f8 <TIM_Base_SetConfig+0x128>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d007      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a27      	ldr	r2, [pc, #156]	; (80085fc <TIM_Base_SetConfig+0x12c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d003      	beq.n	800856a <TIM_Base_SetConfig+0x9a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a26      	ldr	r2, [pc, #152]	; (8008600 <TIM_Base_SetConfig+0x130>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d108      	bne.n	800857c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a10      	ldr	r2, [pc, #64]	; (80085e4 <TIM_Base_SetConfig+0x114>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d00f      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <TIM_Base_SetConfig+0x124>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d00b      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <TIM_Base_SetConfig+0x128>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d007      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <TIM_Base_SetConfig+0x12c>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d003      	beq.n	80085c8 <TIM_Base_SetConfig+0xf8>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <TIM_Base_SetConfig+0x130>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d103      	bne.n	80085d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	615a      	str	r2, [r3, #20]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	40012c00 	.word	0x40012c00
 80085e8:	40000400 	.word	0x40000400
 80085ec:	40000800 	.word	0x40000800
 80085f0:	40000c00 	.word	0x40000c00
 80085f4:	40013400 	.word	0x40013400
 80085f8:	40014000 	.word	0x40014000
 80085fc:	40014400 	.word	0x40014400
 8008600:	40014800 	.word	0x40014800

08008604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008604:	b480      	push	{r7}
 8008606:	b087      	sub	sp, #28
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6a1b      	ldr	r3, [r3, #32]
 8008614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	699b      	ldr	r3, [r3, #24]
 8008626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800862e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	4313      	orrs	r3, r2
 8008638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f023 030a 	bic.w	r3, r3, #10
 8008640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	621a      	str	r2, [r3, #32]
}
 8008656:	bf00      	nop
 8008658:	371c      	adds	r7, #28
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008662:	b480      	push	{r7}
 8008664:	b087      	sub	sp, #28
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0210 	bic.w	r2, r3, #16
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800869e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	011b      	lsls	r3, r3, #4
 80086a4:	693a      	ldr	r2, [r7, #16]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	693a      	ldr	r2, [r7, #16]
 80086b4:	621a      	str	r2, [r3, #32]
}
 80086b6:	bf00      	nop
 80086b8:	371c      	adds	r7, #28
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b085      	sub	sp, #20
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086da:	683a      	ldr	r2, [r7, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	4313      	orrs	r3, r2
 80086e0:	f043 0307 	orr.w	r3, r3, #7
 80086e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	609a      	str	r2, [r3, #8]
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	021a      	lsls	r2, r3, #8
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	431a      	orrs	r2, r3
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4313      	orrs	r3, r2
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	4313      	orrs	r3, r2
 8008724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	609a      	str	r2, [r3, #8]
}
 800872c:	bf00      	nop
 800872e:	371c      	adds	r7, #28
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e068      	b.n	8008822 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a2e      	ldr	r2, [pc, #184]	; (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a2d      	ldr	r2, [pc, #180]	; (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800878a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a1e      	ldr	r2, [pc, #120]	; (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01d      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c2:	d018      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d013      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1a      	ldr	r2, [pc, #104]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00e      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a18      	ldr	r2, [pc, #96]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d009      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a13      	ldr	r2, [pc, #76]	; (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d004      	beq.n	80087f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a14      	ldr	r2, [pc, #80]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d10c      	bne.n	8008810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	4313      	orrs	r3, r2
 8008806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	40012c00 	.word	0x40012c00
 8008834:	40013400 	.word	0x40013400
 8008838:	40000400 	.word	0x40000400
 800883c:	40000800 	.word	0x40000800
 8008840:	40000c00 	.word	0x40000c00
 8008844:	40014000 	.word	0x40014000

08008848 <__errno>:
 8008848:	4b01      	ldr	r3, [pc, #4]	; (8008850 <__errno+0x8>)
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	20000088 	.word	0x20000088

08008854 <__libc_init_array>:
 8008854:	b570      	push	{r4, r5, r6, lr}
 8008856:	4d0d      	ldr	r5, [pc, #52]	; (800888c <__libc_init_array+0x38>)
 8008858:	4c0d      	ldr	r4, [pc, #52]	; (8008890 <__libc_init_array+0x3c>)
 800885a:	1b64      	subs	r4, r4, r5
 800885c:	10a4      	asrs	r4, r4, #2
 800885e:	2600      	movs	r6, #0
 8008860:	42a6      	cmp	r6, r4
 8008862:	d109      	bne.n	8008878 <__libc_init_array+0x24>
 8008864:	4d0b      	ldr	r5, [pc, #44]	; (8008894 <__libc_init_array+0x40>)
 8008866:	4c0c      	ldr	r4, [pc, #48]	; (8008898 <__libc_init_array+0x44>)
 8008868:	f000 fca2 	bl	80091b0 <_init>
 800886c:	1b64      	subs	r4, r4, r5
 800886e:	10a4      	asrs	r4, r4, #2
 8008870:	2600      	movs	r6, #0
 8008872:	42a6      	cmp	r6, r4
 8008874:	d105      	bne.n	8008882 <__libc_init_array+0x2e>
 8008876:	bd70      	pop	{r4, r5, r6, pc}
 8008878:	f855 3b04 	ldr.w	r3, [r5], #4
 800887c:	4798      	blx	r3
 800887e:	3601      	adds	r6, #1
 8008880:	e7ee      	b.n	8008860 <__libc_init_array+0xc>
 8008882:	f855 3b04 	ldr.w	r3, [r5], #4
 8008886:	4798      	blx	r3
 8008888:	3601      	adds	r6, #1
 800888a:	e7f2      	b.n	8008872 <__libc_init_array+0x1e>
 800888c:	0800f1f8 	.word	0x0800f1f8
 8008890:	0800f1f8 	.word	0x0800f1f8
 8008894:	0800f1f8 	.word	0x0800f1f8
 8008898:	0800f1fc 	.word	0x0800f1fc

0800889c <memset>:
 800889c:	4402      	add	r2, r0
 800889e:	4603      	mov	r3, r0
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d100      	bne.n	80088a6 <memset+0xa>
 80088a4:	4770      	bx	lr
 80088a6:	f803 1b01 	strb.w	r1, [r3], #1
 80088aa:	e7f9      	b.n	80088a0 <memset+0x4>

080088ac <sniprintf>:
 80088ac:	b40c      	push	{r2, r3}
 80088ae:	b530      	push	{r4, r5, lr}
 80088b0:	4b17      	ldr	r3, [pc, #92]	; (8008910 <sniprintf+0x64>)
 80088b2:	1e0c      	subs	r4, r1, #0
 80088b4:	681d      	ldr	r5, [r3, #0]
 80088b6:	b09d      	sub	sp, #116	; 0x74
 80088b8:	da08      	bge.n	80088cc <sniprintf+0x20>
 80088ba:	238b      	movs	r3, #139	; 0x8b
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	f04f 30ff 	mov.w	r0, #4294967295
 80088c2:	b01d      	add	sp, #116	; 0x74
 80088c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80088c8:	b002      	add	sp, #8
 80088ca:	4770      	bx	lr
 80088cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80088d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80088d4:	bf14      	ite	ne
 80088d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80088da:	4623      	moveq	r3, r4
 80088dc:	9304      	str	r3, [sp, #16]
 80088de:	9307      	str	r3, [sp, #28]
 80088e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80088e4:	9002      	str	r0, [sp, #8]
 80088e6:	9006      	str	r0, [sp, #24]
 80088e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80088ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80088ee:	ab21      	add	r3, sp, #132	; 0x84
 80088f0:	a902      	add	r1, sp, #8
 80088f2:	4628      	mov	r0, r5
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	f000 f869 	bl	80089cc <_svfiprintf_r>
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	bfbc      	itt	lt
 80088fe:	238b      	movlt	r3, #139	; 0x8b
 8008900:	602b      	strlt	r3, [r5, #0]
 8008902:	2c00      	cmp	r4, #0
 8008904:	d0dd      	beq.n	80088c2 <sniprintf+0x16>
 8008906:	9b02      	ldr	r3, [sp, #8]
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
 800890c:	e7d9      	b.n	80088c2 <sniprintf+0x16>
 800890e:	bf00      	nop
 8008910:	20000088 	.word	0x20000088

08008914 <__ssputs_r>:
 8008914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008918:	688e      	ldr	r6, [r1, #8]
 800891a:	429e      	cmp	r6, r3
 800891c:	4682      	mov	sl, r0
 800891e:	460c      	mov	r4, r1
 8008920:	4690      	mov	r8, r2
 8008922:	461f      	mov	r7, r3
 8008924:	d838      	bhi.n	8008998 <__ssputs_r+0x84>
 8008926:	898a      	ldrh	r2, [r1, #12]
 8008928:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800892c:	d032      	beq.n	8008994 <__ssputs_r+0x80>
 800892e:	6825      	ldr	r5, [r4, #0]
 8008930:	6909      	ldr	r1, [r1, #16]
 8008932:	eba5 0901 	sub.w	r9, r5, r1
 8008936:	6965      	ldr	r5, [r4, #20]
 8008938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800893c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008940:	3301      	adds	r3, #1
 8008942:	444b      	add	r3, r9
 8008944:	106d      	asrs	r5, r5, #1
 8008946:	429d      	cmp	r5, r3
 8008948:	bf38      	it	cc
 800894a:	461d      	movcc	r5, r3
 800894c:	0553      	lsls	r3, r2, #21
 800894e:	d531      	bpl.n	80089b4 <__ssputs_r+0xa0>
 8008950:	4629      	mov	r1, r5
 8008952:	f000 fb63 	bl	800901c <_malloc_r>
 8008956:	4606      	mov	r6, r0
 8008958:	b950      	cbnz	r0, 8008970 <__ssputs_r+0x5c>
 800895a:	230c      	movs	r3, #12
 800895c:	f8ca 3000 	str.w	r3, [sl]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	f04f 30ff 	mov.w	r0, #4294967295
 800896c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008970:	6921      	ldr	r1, [r4, #16]
 8008972:	464a      	mov	r2, r9
 8008974:	f000 fabe 	bl	8008ef4 <memcpy>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800897e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008982:	81a3      	strh	r3, [r4, #12]
 8008984:	6126      	str	r6, [r4, #16]
 8008986:	6165      	str	r5, [r4, #20]
 8008988:	444e      	add	r6, r9
 800898a:	eba5 0509 	sub.w	r5, r5, r9
 800898e:	6026      	str	r6, [r4, #0]
 8008990:	60a5      	str	r5, [r4, #8]
 8008992:	463e      	mov	r6, r7
 8008994:	42be      	cmp	r6, r7
 8008996:	d900      	bls.n	800899a <__ssputs_r+0x86>
 8008998:	463e      	mov	r6, r7
 800899a:	6820      	ldr	r0, [r4, #0]
 800899c:	4632      	mov	r2, r6
 800899e:	4641      	mov	r1, r8
 80089a0:	f000 fab6 	bl	8008f10 <memmove>
 80089a4:	68a3      	ldr	r3, [r4, #8]
 80089a6:	1b9b      	subs	r3, r3, r6
 80089a8:	60a3      	str	r3, [r4, #8]
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	4433      	add	r3, r6
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	2000      	movs	r0, #0
 80089b2:	e7db      	b.n	800896c <__ssputs_r+0x58>
 80089b4:	462a      	mov	r2, r5
 80089b6:	f000 fba5 	bl	8009104 <_realloc_r>
 80089ba:	4606      	mov	r6, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d1e1      	bne.n	8008984 <__ssputs_r+0x70>
 80089c0:	6921      	ldr	r1, [r4, #16]
 80089c2:	4650      	mov	r0, sl
 80089c4:	f000 fabe 	bl	8008f44 <_free_r>
 80089c8:	e7c7      	b.n	800895a <__ssputs_r+0x46>
	...

080089cc <_svfiprintf_r>:
 80089cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d0:	4698      	mov	r8, r3
 80089d2:	898b      	ldrh	r3, [r1, #12]
 80089d4:	061b      	lsls	r3, r3, #24
 80089d6:	b09d      	sub	sp, #116	; 0x74
 80089d8:	4607      	mov	r7, r0
 80089da:	460d      	mov	r5, r1
 80089dc:	4614      	mov	r4, r2
 80089de:	d50e      	bpl.n	80089fe <_svfiprintf_r+0x32>
 80089e0:	690b      	ldr	r3, [r1, #16]
 80089e2:	b963      	cbnz	r3, 80089fe <_svfiprintf_r+0x32>
 80089e4:	2140      	movs	r1, #64	; 0x40
 80089e6:	f000 fb19 	bl	800901c <_malloc_r>
 80089ea:	6028      	str	r0, [r5, #0]
 80089ec:	6128      	str	r0, [r5, #16]
 80089ee:	b920      	cbnz	r0, 80089fa <_svfiprintf_r+0x2e>
 80089f0:	230c      	movs	r3, #12
 80089f2:	603b      	str	r3, [r7, #0]
 80089f4:	f04f 30ff 	mov.w	r0, #4294967295
 80089f8:	e0d1      	b.n	8008b9e <_svfiprintf_r+0x1d2>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	616b      	str	r3, [r5, #20]
 80089fe:	2300      	movs	r3, #0
 8008a00:	9309      	str	r3, [sp, #36]	; 0x24
 8008a02:	2320      	movs	r3, #32
 8008a04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a08:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a0c:	2330      	movs	r3, #48	; 0x30
 8008a0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008bb8 <_svfiprintf_r+0x1ec>
 8008a12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a16:	f04f 0901 	mov.w	r9, #1
 8008a1a:	4623      	mov	r3, r4
 8008a1c:	469a      	mov	sl, r3
 8008a1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a22:	b10a      	cbz	r2, 8008a28 <_svfiprintf_r+0x5c>
 8008a24:	2a25      	cmp	r2, #37	; 0x25
 8008a26:	d1f9      	bne.n	8008a1c <_svfiprintf_r+0x50>
 8008a28:	ebba 0b04 	subs.w	fp, sl, r4
 8008a2c:	d00b      	beq.n	8008a46 <_svfiprintf_r+0x7a>
 8008a2e:	465b      	mov	r3, fp
 8008a30:	4622      	mov	r2, r4
 8008a32:	4629      	mov	r1, r5
 8008a34:	4638      	mov	r0, r7
 8008a36:	f7ff ff6d 	bl	8008914 <__ssputs_r>
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f000 80aa 	beq.w	8008b94 <_svfiprintf_r+0x1c8>
 8008a40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a42:	445a      	add	r2, fp
 8008a44:	9209      	str	r2, [sp, #36]	; 0x24
 8008a46:	f89a 3000 	ldrb.w	r3, [sl]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 80a2 	beq.w	8008b94 <_svfiprintf_r+0x1c8>
 8008a50:	2300      	movs	r3, #0
 8008a52:	f04f 32ff 	mov.w	r2, #4294967295
 8008a56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a5a:	f10a 0a01 	add.w	sl, sl, #1
 8008a5e:	9304      	str	r3, [sp, #16]
 8008a60:	9307      	str	r3, [sp, #28]
 8008a62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a66:	931a      	str	r3, [sp, #104]	; 0x68
 8008a68:	4654      	mov	r4, sl
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a70:	4851      	ldr	r0, [pc, #324]	; (8008bb8 <_svfiprintf_r+0x1ec>)
 8008a72:	f7f7 fbad 	bl	80001d0 <memchr>
 8008a76:	9a04      	ldr	r2, [sp, #16]
 8008a78:	b9d8      	cbnz	r0, 8008ab2 <_svfiprintf_r+0xe6>
 8008a7a:	06d0      	lsls	r0, r2, #27
 8008a7c:	bf44      	itt	mi
 8008a7e:	2320      	movmi	r3, #32
 8008a80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a84:	0711      	lsls	r1, r2, #28
 8008a86:	bf44      	itt	mi
 8008a88:	232b      	movmi	r3, #43	; 0x2b
 8008a8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a8e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a92:	2b2a      	cmp	r3, #42	; 0x2a
 8008a94:	d015      	beq.n	8008ac2 <_svfiprintf_r+0xf6>
 8008a96:	9a07      	ldr	r2, [sp, #28]
 8008a98:	4654      	mov	r4, sl
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f04f 0c0a 	mov.w	ip, #10
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aa6:	3b30      	subs	r3, #48	; 0x30
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d94e      	bls.n	8008b4a <_svfiprintf_r+0x17e>
 8008aac:	b1b0      	cbz	r0, 8008adc <_svfiprintf_r+0x110>
 8008aae:	9207      	str	r2, [sp, #28]
 8008ab0:	e014      	b.n	8008adc <_svfiprintf_r+0x110>
 8008ab2:	eba0 0308 	sub.w	r3, r0, r8
 8008ab6:	fa09 f303 	lsl.w	r3, r9, r3
 8008aba:	4313      	orrs	r3, r2
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	46a2      	mov	sl, r4
 8008ac0:	e7d2      	b.n	8008a68 <_svfiprintf_r+0x9c>
 8008ac2:	9b03      	ldr	r3, [sp, #12]
 8008ac4:	1d19      	adds	r1, r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	9103      	str	r1, [sp, #12]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	bfbb      	ittet	lt
 8008ace:	425b      	neglt	r3, r3
 8008ad0:	f042 0202 	orrlt.w	r2, r2, #2
 8008ad4:	9307      	strge	r3, [sp, #28]
 8008ad6:	9307      	strlt	r3, [sp, #28]
 8008ad8:	bfb8      	it	lt
 8008ada:	9204      	strlt	r2, [sp, #16]
 8008adc:	7823      	ldrb	r3, [r4, #0]
 8008ade:	2b2e      	cmp	r3, #46	; 0x2e
 8008ae0:	d10c      	bne.n	8008afc <_svfiprintf_r+0x130>
 8008ae2:	7863      	ldrb	r3, [r4, #1]
 8008ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8008ae6:	d135      	bne.n	8008b54 <_svfiprintf_r+0x188>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	9203      	str	r2, [sp, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bfb8      	it	lt
 8008af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008af8:	3402      	adds	r4, #2
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008bc8 <_svfiprintf_r+0x1fc>
 8008b00:	7821      	ldrb	r1, [r4, #0]
 8008b02:	2203      	movs	r2, #3
 8008b04:	4650      	mov	r0, sl
 8008b06:	f7f7 fb63 	bl	80001d0 <memchr>
 8008b0a:	b140      	cbz	r0, 8008b1e <_svfiprintf_r+0x152>
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	eba0 000a 	sub.w	r0, r0, sl
 8008b12:	fa03 f000 	lsl.w	r0, r3, r0
 8008b16:	9b04      	ldr	r3, [sp, #16]
 8008b18:	4303      	orrs	r3, r0
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	9304      	str	r3, [sp, #16]
 8008b1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b22:	4826      	ldr	r0, [pc, #152]	; (8008bbc <_svfiprintf_r+0x1f0>)
 8008b24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b28:	2206      	movs	r2, #6
 8008b2a:	f7f7 fb51 	bl	80001d0 <memchr>
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	d038      	beq.n	8008ba4 <_svfiprintf_r+0x1d8>
 8008b32:	4b23      	ldr	r3, [pc, #140]	; (8008bc0 <_svfiprintf_r+0x1f4>)
 8008b34:	bb1b      	cbnz	r3, 8008b7e <_svfiprintf_r+0x1b2>
 8008b36:	9b03      	ldr	r3, [sp, #12]
 8008b38:	3307      	adds	r3, #7
 8008b3a:	f023 0307 	bic.w	r3, r3, #7
 8008b3e:	3308      	adds	r3, #8
 8008b40:	9303      	str	r3, [sp, #12]
 8008b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b44:	4433      	add	r3, r6
 8008b46:	9309      	str	r3, [sp, #36]	; 0x24
 8008b48:	e767      	b.n	8008a1a <_svfiprintf_r+0x4e>
 8008b4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b4e:	460c      	mov	r4, r1
 8008b50:	2001      	movs	r0, #1
 8008b52:	e7a5      	b.n	8008aa0 <_svfiprintf_r+0xd4>
 8008b54:	2300      	movs	r3, #0
 8008b56:	3401      	adds	r4, #1
 8008b58:	9305      	str	r3, [sp, #20]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	f04f 0c0a 	mov.w	ip, #10
 8008b60:	4620      	mov	r0, r4
 8008b62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b66:	3a30      	subs	r2, #48	; 0x30
 8008b68:	2a09      	cmp	r2, #9
 8008b6a:	d903      	bls.n	8008b74 <_svfiprintf_r+0x1a8>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0c5      	beq.n	8008afc <_svfiprintf_r+0x130>
 8008b70:	9105      	str	r1, [sp, #20]
 8008b72:	e7c3      	b.n	8008afc <_svfiprintf_r+0x130>
 8008b74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b78:	4604      	mov	r4, r0
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e7f0      	b.n	8008b60 <_svfiprintf_r+0x194>
 8008b7e:	ab03      	add	r3, sp, #12
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	462a      	mov	r2, r5
 8008b84:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <_svfiprintf_r+0x1f8>)
 8008b86:	a904      	add	r1, sp, #16
 8008b88:	4638      	mov	r0, r7
 8008b8a:	f3af 8000 	nop.w
 8008b8e:	1c42      	adds	r2, r0, #1
 8008b90:	4606      	mov	r6, r0
 8008b92:	d1d6      	bne.n	8008b42 <_svfiprintf_r+0x176>
 8008b94:	89ab      	ldrh	r3, [r5, #12]
 8008b96:	065b      	lsls	r3, r3, #25
 8008b98:	f53f af2c 	bmi.w	80089f4 <_svfiprintf_r+0x28>
 8008b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b9e:	b01d      	add	sp, #116	; 0x74
 8008ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba4:	ab03      	add	r3, sp, #12
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	462a      	mov	r2, r5
 8008baa:	4b06      	ldr	r3, [pc, #24]	; (8008bc4 <_svfiprintf_r+0x1f8>)
 8008bac:	a904      	add	r1, sp, #16
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f000 f87a 	bl	8008ca8 <_printf_i>
 8008bb4:	e7eb      	b.n	8008b8e <_svfiprintf_r+0x1c2>
 8008bb6:	bf00      	nop
 8008bb8:	0800f1c4 	.word	0x0800f1c4
 8008bbc:	0800f1ce 	.word	0x0800f1ce
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	08008915 	.word	0x08008915
 8008bc8:	0800f1ca 	.word	0x0800f1ca

08008bcc <_printf_common>:
 8008bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd0:	4616      	mov	r6, r2
 8008bd2:	4699      	mov	r9, r3
 8008bd4:	688a      	ldr	r2, [r1, #8]
 8008bd6:	690b      	ldr	r3, [r1, #16]
 8008bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bfb8      	it	lt
 8008be0:	4613      	movlt	r3, r2
 8008be2:	6033      	str	r3, [r6, #0]
 8008be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008be8:	4607      	mov	r7, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	b10a      	cbz	r2, 8008bf2 <_printf_common+0x26>
 8008bee:	3301      	adds	r3, #1
 8008bf0:	6033      	str	r3, [r6, #0]
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	0699      	lsls	r1, r3, #26
 8008bf6:	bf42      	ittt	mi
 8008bf8:	6833      	ldrmi	r3, [r6, #0]
 8008bfa:	3302      	addmi	r3, #2
 8008bfc:	6033      	strmi	r3, [r6, #0]
 8008bfe:	6825      	ldr	r5, [r4, #0]
 8008c00:	f015 0506 	ands.w	r5, r5, #6
 8008c04:	d106      	bne.n	8008c14 <_printf_common+0x48>
 8008c06:	f104 0a19 	add.w	sl, r4, #25
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	6832      	ldr	r2, [r6, #0]
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	42ab      	cmp	r3, r5
 8008c12:	dc26      	bgt.n	8008c62 <_printf_common+0x96>
 8008c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008c18:	1e13      	subs	r3, r2, #0
 8008c1a:	6822      	ldr	r2, [r4, #0]
 8008c1c:	bf18      	it	ne
 8008c1e:	2301      	movne	r3, #1
 8008c20:	0692      	lsls	r2, r2, #26
 8008c22:	d42b      	bmi.n	8008c7c <_printf_common+0xb0>
 8008c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c28:	4649      	mov	r1, r9
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	47c0      	blx	r8
 8008c2e:	3001      	adds	r0, #1
 8008c30:	d01e      	beq.n	8008c70 <_printf_common+0xa4>
 8008c32:	6823      	ldr	r3, [r4, #0]
 8008c34:	68e5      	ldr	r5, [r4, #12]
 8008c36:	6832      	ldr	r2, [r6, #0]
 8008c38:	f003 0306 	and.w	r3, r3, #6
 8008c3c:	2b04      	cmp	r3, #4
 8008c3e:	bf08      	it	eq
 8008c40:	1aad      	subeq	r5, r5, r2
 8008c42:	68a3      	ldr	r3, [r4, #8]
 8008c44:	6922      	ldr	r2, [r4, #16]
 8008c46:	bf0c      	ite	eq
 8008c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c4c:	2500      	movne	r5, #0
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	bfc4      	itt	gt
 8008c52:	1a9b      	subgt	r3, r3, r2
 8008c54:	18ed      	addgt	r5, r5, r3
 8008c56:	2600      	movs	r6, #0
 8008c58:	341a      	adds	r4, #26
 8008c5a:	42b5      	cmp	r5, r6
 8008c5c:	d11a      	bne.n	8008c94 <_printf_common+0xc8>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e008      	b.n	8008c74 <_printf_common+0xa8>
 8008c62:	2301      	movs	r3, #1
 8008c64:	4652      	mov	r2, sl
 8008c66:	4649      	mov	r1, r9
 8008c68:	4638      	mov	r0, r7
 8008c6a:	47c0      	blx	r8
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d103      	bne.n	8008c78 <_printf_common+0xac>
 8008c70:	f04f 30ff 	mov.w	r0, #4294967295
 8008c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c78:	3501      	adds	r5, #1
 8008c7a:	e7c6      	b.n	8008c0a <_printf_common+0x3e>
 8008c7c:	18e1      	adds	r1, r4, r3
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	2030      	movs	r0, #48	; 0x30
 8008c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c86:	4422      	add	r2, r4
 8008c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c90:	3302      	adds	r3, #2
 8008c92:	e7c7      	b.n	8008c24 <_printf_common+0x58>
 8008c94:	2301      	movs	r3, #1
 8008c96:	4622      	mov	r2, r4
 8008c98:	4649      	mov	r1, r9
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	47c0      	blx	r8
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d0e6      	beq.n	8008c70 <_printf_common+0xa4>
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	e7d9      	b.n	8008c5a <_printf_common+0x8e>
	...

08008ca8 <_printf_i>:
 8008ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cac:	7e0f      	ldrb	r7, [r1, #24]
 8008cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008cb0:	2f78      	cmp	r7, #120	; 0x78
 8008cb2:	4691      	mov	r9, r2
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	469a      	mov	sl, r3
 8008cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008cbe:	d807      	bhi.n	8008cd0 <_printf_i+0x28>
 8008cc0:	2f62      	cmp	r7, #98	; 0x62
 8008cc2:	d80a      	bhi.n	8008cda <_printf_i+0x32>
 8008cc4:	2f00      	cmp	r7, #0
 8008cc6:	f000 80d8 	beq.w	8008e7a <_printf_i+0x1d2>
 8008cca:	2f58      	cmp	r7, #88	; 0x58
 8008ccc:	f000 80a3 	beq.w	8008e16 <_printf_i+0x16e>
 8008cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008cd8:	e03a      	b.n	8008d50 <_printf_i+0xa8>
 8008cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008cde:	2b15      	cmp	r3, #21
 8008ce0:	d8f6      	bhi.n	8008cd0 <_printf_i+0x28>
 8008ce2:	a101      	add	r1, pc, #4	; (adr r1, 8008ce8 <_printf_i+0x40>)
 8008ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ce8:	08008d41 	.word	0x08008d41
 8008cec:	08008d55 	.word	0x08008d55
 8008cf0:	08008cd1 	.word	0x08008cd1
 8008cf4:	08008cd1 	.word	0x08008cd1
 8008cf8:	08008cd1 	.word	0x08008cd1
 8008cfc:	08008cd1 	.word	0x08008cd1
 8008d00:	08008d55 	.word	0x08008d55
 8008d04:	08008cd1 	.word	0x08008cd1
 8008d08:	08008cd1 	.word	0x08008cd1
 8008d0c:	08008cd1 	.word	0x08008cd1
 8008d10:	08008cd1 	.word	0x08008cd1
 8008d14:	08008e61 	.word	0x08008e61
 8008d18:	08008d85 	.word	0x08008d85
 8008d1c:	08008e43 	.word	0x08008e43
 8008d20:	08008cd1 	.word	0x08008cd1
 8008d24:	08008cd1 	.word	0x08008cd1
 8008d28:	08008e83 	.word	0x08008e83
 8008d2c:	08008cd1 	.word	0x08008cd1
 8008d30:	08008d85 	.word	0x08008d85
 8008d34:	08008cd1 	.word	0x08008cd1
 8008d38:	08008cd1 	.word	0x08008cd1
 8008d3c:	08008e4b 	.word	0x08008e4b
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	1d1a      	adds	r2, r3, #4
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	602a      	str	r2, [r5, #0]
 8008d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d50:	2301      	movs	r3, #1
 8008d52:	e0a3      	b.n	8008e9c <_printf_i+0x1f4>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	6829      	ldr	r1, [r5, #0]
 8008d58:	0606      	lsls	r6, r0, #24
 8008d5a:	f101 0304 	add.w	r3, r1, #4
 8008d5e:	d50a      	bpl.n	8008d76 <_printf_i+0xce>
 8008d60:	680e      	ldr	r6, [r1, #0]
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	2e00      	cmp	r6, #0
 8008d66:	da03      	bge.n	8008d70 <_printf_i+0xc8>
 8008d68:	232d      	movs	r3, #45	; 0x2d
 8008d6a:	4276      	negs	r6, r6
 8008d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d70:	485e      	ldr	r0, [pc, #376]	; (8008eec <_printf_i+0x244>)
 8008d72:	230a      	movs	r3, #10
 8008d74:	e019      	b.n	8008daa <_printf_i+0x102>
 8008d76:	680e      	ldr	r6, [r1, #0]
 8008d78:	602b      	str	r3, [r5, #0]
 8008d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d7e:	bf18      	it	ne
 8008d80:	b236      	sxthne	r6, r6
 8008d82:	e7ef      	b.n	8008d64 <_printf_i+0xbc>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	6820      	ldr	r0, [r4, #0]
 8008d88:	1d19      	adds	r1, r3, #4
 8008d8a:	6029      	str	r1, [r5, #0]
 8008d8c:	0601      	lsls	r1, r0, #24
 8008d8e:	d501      	bpl.n	8008d94 <_printf_i+0xec>
 8008d90:	681e      	ldr	r6, [r3, #0]
 8008d92:	e002      	b.n	8008d9a <_printf_i+0xf2>
 8008d94:	0646      	lsls	r6, r0, #25
 8008d96:	d5fb      	bpl.n	8008d90 <_printf_i+0xe8>
 8008d98:	881e      	ldrh	r6, [r3, #0]
 8008d9a:	4854      	ldr	r0, [pc, #336]	; (8008eec <_printf_i+0x244>)
 8008d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8008d9e:	bf0c      	ite	eq
 8008da0:	2308      	moveq	r3, #8
 8008da2:	230a      	movne	r3, #10
 8008da4:	2100      	movs	r1, #0
 8008da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008daa:	6865      	ldr	r5, [r4, #4]
 8008dac:	60a5      	str	r5, [r4, #8]
 8008dae:	2d00      	cmp	r5, #0
 8008db0:	bfa2      	ittt	ge
 8008db2:	6821      	ldrge	r1, [r4, #0]
 8008db4:	f021 0104 	bicge.w	r1, r1, #4
 8008db8:	6021      	strge	r1, [r4, #0]
 8008dba:	b90e      	cbnz	r6, 8008dc0 <_printf_i+0x118>
 8008dbc:	2d00      	cmp	r5, #0
 8008dbe:	d04d      	beq.n	8008e5c <_printf_i+0x1b4>
 8008dc0:	4615      	mov	r5, r2
 8008dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8008dca:	5dc7      	ldrb	r7, [r0, r7]
 8008dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008dd0:	4637      	mov	r7, r6
 8008dd2:	42bb      	cmp	r3, r7
 8008dd4:	460e      	mov	r6, r1
 8008dd6:	d9f4      	bls.n	8008dc2 <_printf_i+0x11a>
 8008dd8:	2b08      	cmp	r3, #8
 8008dda:	d10b      	bne.n	8008df4 <_printf_i+0x14c>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	07de      	lsls	r6, r3, #31
 8008de0:	d508      	bpl.n	8008df4 <_printf_i+0x14c>
 8008de2:	6923      	ldr	r3, [r4, #16]
 8008de4:	6861      	ldr	r1, [r4, #4]
 8008de6:	4299      	cmp	r1, r3
 8008de8:	bfde      	ittt	le
 8008dea:	2330      	movle	r3, #48	; 0x30
 8008dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008df4:	1b52      	subs	r2, r2, r5
 8008df6:	6122      	str	r2, [r4, #16]
 8008df8:	f8cd a000 	str.w	sl, [sp]
 8008dfc:	464b      	mov	r3, r9
 8008dfe:	aa03      	add	r2, sp, #12
 8008e00:	4621      	mov	r1, r4
 8008e02:	4640      	mov	r0, r8
 8008e04:	f7ff fee2 	bl	8008bcc <_printf_common>
 8008e08:	3001      	adds	r0, #1
 8008e0a:	d14c      	bne.n	8008ea6 <_printf_i+0x1fe>
 8008e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e10:	b004      	add	sp, #16
 8008e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e16:	4835      	ldr	r0, [pc, #212]	; (8008eec <_printf_i+0x244>)
 8008e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008e1c:	6829      	ldr	r1, [r5, #0]
 8008e1e:	6823      	ldr	r3, [r4, #0]
 8008e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8008e24:	6029      	str	r1, [r5, #0]
 8008e26:	061d      	lsls	r5, r3, #24
 8008e28:	d514      	bpl.n	8008e54 <_printf_i+0x1ac>
 8008e2a:	07df      	lsls	r7, r3, #31
 8008e2c:	bf44      	itt	mi
 8008e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008e32:	6023      	strmi	r3, [r4, #0]
 8008e34:	b91e      	cbnz	r6, 8008e3e <_printf_i+0x196>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	f023 0320 	bic.w	r3, r3, #32
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	2310      	movs	r3, #16
 8008e40:	e7b0      	b.n	8008da4 <_printf_i+0xfc>
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	f043 0320 	orr.w	r3, r3, #32
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	2378      	movs	r3, #120	; 0x78
 8008e4c:	4828      	ldr	r0, [pc, #160]	; (8008ef0 <_printf_i+0x248>)
 8008e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e52:	e7e3      	b.n	8008e1c <_printf_i+0x174>
 8008e54:	0659      	lsls	r1, r3, #25
 8008e56:	bf48      	it	mi
 8008e58:	b2b6      	uxthmi	r6, r6
 8008e5a:	e7e6      	b.n	8008e2a <_printf_i+0x182>
 8008e5c:	4615      	mov	r5, r2
 8008e5e:	e7bb      	b.n	8008dd8 <_printf_i+0x130>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	6826      	ldr	r6, [r4, #0]
 8008e64:	6961      	ldr	r1, [r4, #20]
 8008e66:	1d18      	adds	r0, r3, #4
 8008e68:	6028      	str	r0, [r5, #0]
 8008e6a:	0635      	lsls	r5, r6, #24
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	d501      	bpl.n	8008e74 <_printf_i+0x1cc>
 8008e70:	6019      	str	r1, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <_printf_i+0x1d2>
 8008e74:	0670      	lsls	r0, r6, #25
 8008e76:	d5fb      	bpl.n	8008e70 <_printf_i+0x1c8>
 8008e78:	8019      	strh	r1, [r3, #0]
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6123      	str	r3, [r4, #16]
 8008e7e:	4615      	mov	r5, r2
 8008e80:	e7ba      	b.n	8008df8 <_printf_i+0x150>
 8008e82:	682b      	ldr	r3, [r5, #0]
 8008e84:	1d1a      	adds	r2, r3, #4
 8008e86:	602a      	str	r2, [r5, #0]
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	6862      	ldr	r2, [r4, #4]
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f7f7 f99e 	bl	80001d0 <memchr>
 8008e94:	b108      	cbz	r0, 8008e9a <_printf_i+0x1f2>
 8008e96:	1b40      	subs	r0, r0, r5
 8008e98:	6060      	str	r0, [r4, #4]
 8008e9a:	6863      	ldr	r3, [r4, #4]
 8008e9c:	6123      	str	r3, [r4, #16]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ea4:	e7a8      	b.n	8008df8 <_printf_i+0x150>
 8008ea6:	6923      	ldr	r3, [r4, #16]
 8008ea8:	462a      	mov	r2, r5
 8008eaa:	4649      	mov	r1, r9
 8008eac:	4640      	mov	r0, r8
 8008eae:	47d0      	blx	sl
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d0ab      	beq.n	8008e0c <_printf_i+0x164>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	079b      	lsls	r3, r3, #30
 8008eb8:	d413      	bmi.n	8008ee2 <_printf_i+0x23a>
 8008eba:	68e0      	ldr	r0, [r4, #12]
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	4298      	cmp	r0, r3
 8008ec0:	bfb8      	it	lt
 8008ec2:	4618      	movlt	r0, r3
 8008ec4:	e7a4      	b.n	8008e10 <_printf_i+0x168>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	4632      	mov	r2, r6
 8008eca:	4649      	mov	r1, r9
 8008ecc:	4640      	mov	r0, r8
 8008ece:	47d0      	blx	sl
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	d09b      	beq.n	8008e0c <_printf_i+0x164>
 8008ed4:	3501      	adds	r5, #1
 8008ed6:	68e3      	ldr	r3, [r4, #12]
 8008ed8:	9903      	ldr	r1, [sp, #12]
 8008eda:	1a5b      	subs	r3, r3, r1
 8008edc:	42ab      	cmp	r3, r5
 8008ede:	dcf2      	bgt.n	8008ec6 <_printf_i+0x21e>
 8008ee0:	e7eb      	b.n	8008eba <_printf_i+0x212>
 8008ee2:	2500      	movs	r5, #0
 8008ee4:	f104 0619 	add.w	r6, r4, #25
 8008ee8:	e7f5      	b.n	8008ed6 <_printf_i+0x22e>
 8008eea:	bf00      	nop
 8008eec:	0800f1d5 	.word	0x0800f1d5
 8008ef0:	0800f1e6 	.word	0x0800f1e6

08008ef4 <memcpy>:
 8008ef4:	440a      	add	r2, r1
 8008ef6:	4291      	cmp	r1, r2
 8008ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008efc:	d100      	bne.n	8008f00 <memcpy+0xc>
 8008efe:	4770      	bx	lr
 8008f00:	b510      	push	{r4, lr}
 8008f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	d1f9      	bne.n	8008f02 <memcpy+0xe>
 8008f0e:	bd10      	pop	{r4, pc}

08008f10 <memmove>:
 8008f10:	4288      	cmp	r0, r1
 8008f12:	b510      	push	{r4, lr}
 8008f14:	eb01 0402 	add.w	r4, r1, r2
 8008f18:	d902      	bls.n	8008f20 <memmove+0x10>
 8008f1a:	4284      	cmp	r4, r0
 8008f1c:	4623      	mov	r3, r4
 8008f1e:	d807      	bhi.n	8008f30 <memmove+0x20>
 8008f20:	1e43      	subs	r3, r0, #1
 8008f22:	42a1      	cmp	r1, r4
 8008f24:	d008      	beq.n	8008f38 <memmove+0x28>
 8008f26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008f2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008f2e:	e7f8      	b.n	8008f22 <memmove+0x12>
 8008f30:	4402      	add	r2, r0
 8008f32:	4601      	mov	r1, r0
 8008f34:	428a      	cmp	r2, r1
 8008f36:	d100      	bne.n	8008f3a <memmove+0x2a>
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f42:	e7f7      	b.n	8008f34 <memmove+0x24>

08008f44 <_free_r>:
 8008f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d044      	beq.n	8008fd4 <_free_r+0x90>
 8008f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f1a1 0404 	sub.w	r4, r1, #4
 8008f56:	bfb8      	it	lt
 8008f58:	18e4      	addlt	r4, r4, r3
 8008f5a:	f000 f913 	bl	8009184 <__malloc_lock>
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <_free_r+0x94>)
 8008f60:	9801      	ldr	r0, [sp, #4]
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	b933      	cbnz	r3, 8008f74 <_free_r+0x30>
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	b003      	add	sp, #12
 8008f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f70:	f000 b90e 	b.w	8009190 <__malloc_unlock>
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d908      	bls.n	8008f8a <_free_r+0x46>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf01      	itttt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	1949      	addeq	r1, r1, r5
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	e7ed      	b.n	8008f66 <_free_r+0x22>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x50>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x46>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1855      	adds	r5, r2, r1
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x70>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	4421      	add	r1, r4
 8008fa0:	1854      	adds	r4, r2, r1
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1e0      	bne.n	8008f6a <_free_r+0x26>
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	6053      	str	r3, [r2, #4]
 8008fae:	4421      	add	r1, r4
 8008fb0:	6011      	str	r1, [r2, #0]
 8008fb2:	e7da      	b.n	8008f6a <_free_r+0x26>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x78>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	e7d6      	b.n	8008f6a <_free_r+0x26>
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	1961      	adds	r1, r4, r5
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf04      	itt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	bf04      	itt	eq
 8008fcc:	1949      	addeq	r1, r1, r5
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	6054      	str	r4, [r2, #4]
 8008fd2:	e7ca      	b.n	8008f6a <_free_r+0x26>
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	2000b96c 	.word	0x2000b96c

08008fdc <sbrk_aligned>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4e0e      	ldr	r6, [pc, #56]	; (8009018 <sbrk_aligned+0x3c>)
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	6831      	ldr	r1, [r6, #0]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	b911      	cbnz	r1, 8008fee <sbrk_aligned+0x12>
 8008fe8:	f000 f8bc 	bl	8009164 <_sbrk_r>
 8008fec:	6030      	str	r0, [r6, #0]
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f8b7 	bl	8009164 <_sbrk_r>
 8008ff6:	1c43      	adds	r3, r0, #1
 8008ff8:	d00a      	beq.n	8009010 <sbrk_aligned+0x34>
 8008ffa:	1cc4      	adds	r4, r0, #3
 8008ffc:	f024 0403 	bic.w	r4, r4, #3
 8009000:	42a0      	cmp	r0, r4
 8009002:	d007      	beq.n	8009014 <sbrk_aligned+0x38>
 8009004:	1a21      	subs	r1, r4, r0
 8009006:	4628      	mov	r0, r5
 8009008:	f000 f8ac 	bl	8009164 <_sbrk_r>
 800900c:	3001      	adds	r0, #1
 800900e:	d101      	bne.n	8009014 <sbrk_aligned+0x38>
 8009010:	f04f 34ff 	mov.w	r4, #4294967295
 8009014:	4620      	mov	r0, r4
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	2000b970 	.word	0x2000b970

0800901c <_malloc_r>:
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	1ccd      	adds	r5, r1, #3
 8009022:	f025 0503 	bic.w	r5, r5, #3
 8009026:	3508      	adds	r5, #8
 8009028:	2d0c      	cmp	r5, #12
 800902a:	bf38      	it	cc
 800902c:	250c      	movcc	r5, #12
 800902e:	2d00      	cmp	r5, #0
 8009030:	4607      	mov	r7, r0
 8009032:	db01      	blt.n	8009038 <_malloc_r+0x1c>
 8009034:	42a9      	cmp	r1, r5
 8009036:	d905      	bls.n	8009044 <_malloc_r+0x28>
 8009038:	230c      	movs	r3, #12
 800903a:	603b      	str	r3, [r7, #0]
 800903c:	2600      	movs	r6, #0
 800903e:	4630      	mov	r0, r6
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	4e2e      	ldr	r6, [pc, #184]	; (8009100 <_malloc_r+0xe4>)
 8009046:	f000 f89d 	bl	8009184 <__malloc_lock>
 800904a:	6833      	ldr	r3, [r6, #0]
 800904c:	461c      	mov	r4, r3
 800904e:	bb34      	cbnz	r4, 800909e <_malloc_r+0x82>
 8009050:	4629      	mov	r1, r5
 8009052:	4638      	mov	r0, r7
 8009054:	f7ff ffc2 	bl	8008fdc <sbrk_aligned>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	4604      	mov	r4, r0
 800905c:	d14d      	bne.n	80090fa <_malloc_r+0xde>
 800905e:	6834      	ldr	r4, [r6, #0]
 8009060:	4626      	mov	r6, r4
 8009062:	2e00      	cmp	r6, #0
 8009064:	d140      	bne.n	80090e8 <_malloc_r+0xcc>
 8009066:	6823      	ldr	r3, [r4, #0]
 8009068:	4631      	mov	r1, r6
 800906a:	4638      	mov	r0, r7
 800906c:	eb04 0803 	add.w	r8, r4, r3
 8009070:	f000 f878 	bl	8009164 <_sbrk_r>
 8009074:	4580      	cmp	r8, r0
 8009076:	d13a      	bne.n	80090ee <_malloc_r+0xd2>
 8009078:	6821      	ldr	r1, [r4, #0]
 800907a:	3503      	adds	r5, #3
 800907c:	1a6d      	subs	r5, r5, r1
 800907e:	f025 0503 	bic.w	r5, r5, #3
 8009082:	3508      	adds	r5, #8
 8009084:	2d0c      	cmp	r5, #12
 8009086:	bf38      	it	cc
 8009088:	250c      	movcc	r5, #12
 800908a:	4629      	mov	r1, r5
 800908c:	4638      	mov	r0, r7
 800908e:	f7ff ffa5 	bl	8008fdc <sbrk_aligned>
 8009092:	3001      	adds	r0, #1
 8009094:	d02b      	beq.n	80090ee <_malloc_r+0xd2>
 8009096:	6823      	ldr	r3, [r4, #0]
 8009098:	442b      	add	r3, r5
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	e00e      	b.n	80090bc <_malloc_r+0xa0>
 800909e:	6822      	ldr	r2, [r4, #0]
 80090a0:	1b52      	subs	r2, r2, r5
 80090a2:	d41e      	bmi.n	80090e2 <_malloc_r+0xc6>
 80090a4:	2a0b      	cmp	r2, #11
 80090a6:	d916      	bls.n	80090d6 <_malloc_r+0xba>
 80090a8:	1961      	adds	r1, r4, r5
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	6025      	str	r5, [r4, #0]
 80090ae:	bf18      	it	ne
 80090b0:	6059      	strne	r1, [r3, #4]
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	bf08      	it	eq
 80090b6:	6031      	streq	r1, [r6, #0]
 80090b8:	5162      	str	r2, [r4, r5]
 80090ba:	604b      	str	r3, [r1, #4]
 80090bc:	4638      	mov	r0, r7
 80090be:	f104 060b 	add.w	r6, r4, #11
 80090c2:	f000 f865 	bl	8009190 <__malloc_unlock>
 80090c6:	f026 0607 	bic.w	r6, r6, #7
 80090ca:	1d23      	adds	r3, r4, #4
 80090cc:	1af2      	subs	r2, r6, r3
 80090ce:	d0b6      	beq.n	800903e <_malloc_r+0x22>
 80090d0:	1b9b      	subs	r3, r3, r6
 80090d2:	50a3      	str	r3, [r4, r2]
 80090d4:	e7b3      	b.n	800903e <_malloc_r+0x22>
 80090d6:	6862      	ldr	r2, [r4, #4]
 80090d8:	42a3      	cmp	r3, r4
 80090da:	bf0c      	ite	eq
 80090dc:	6032      	streq	r2, [r6, #0]
 80090de:	605a      	strne	r2, [r3, #4]
 80090e0:	e7ec      	b.n	80090bc <_malloc_r+0xa0>
 80090e2:	4623      	mov	r3, r4
 80090e4:	6864      	ldr	r4, [r4, #4]
 80090e6:	e7b2      	b.n	800904e <_malloc_r+0x32>
 80090e8:	4634      	mov	r4, r6
 80090ea:	6876      	ldr	r6, [r6, #4]
 80090ec:	e7b9      	b.n	8009062 <_malloc_r+0x46>
 80090ee:	230c      	movs	r3, #12
 80090f0:	603b      	str	r3, [r7, #0]
 80090f2:	4638      	mov	r0, r7
 80090f4:	f000 f84c 	bl	8009190 <__malloc_unlock>
 80090f8:	e7a1      	b.n	800903e <_malloc_r+0x22>
 80090fa:	6025      	str	r5, [r4, #0]
 80090fc:	e7de      	b.n	80090bc <_malloc_r+0xa0>
 80090fe:	bf00      	nop
 8009100:	2000b96c 	.word	0x2000b96c

08009104 <_realloc_r>:
 8009104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009108:	4680      	mov	r8, r0
 800910a:	4614      	mov	r4, r2
 800910c:	460e      	mov	r6, r1
 800910e:	b921      	cbnz	r1, 800911a <_realloc_r+0x16>
 8009110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009114:	4611      	mov	r1, r2
 8009116:	f7ff bf81 	b.w	800901c <_malloc_r>
 800911a:	b92a      	cbnz	r2, 8009128 <_realloc_r+0x24>
 800911c:	f7ff ff12 	bl	8008f44 <_free_r>
 8009120:	4625      	mov	r5, r4
 8009122:	4628      	mov	r0, r5
 8009124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009128:	f000 f838 	bl	800919c <_malloc_usable_size_r>
 800912c:	4284      	cmp	r4, r0
 800912e:	4607      	mov	r7, r0
 8009130:	d802      	bhi.n	8009138 <_realloc_r+0x34>
 8009132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009136:	d812      	bhi.n	800915e <_realloc_r+0x5a>
 8009138:	4621      	mov	r1, r4
 800913a:	4640      	mov	r0, r8
 800913c:	f7ff ff6e 	bl	800901c <_malloc_r>
 8009140:	4605      	mov	r5, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d0ed      	beq.n	8009122 <_realloc_r+0x1e>
 8009146:	42bc      	cmp	r4, r7
 8009148:	4622      	mov	r2, r4
 800914a:	4631      	mov	r1, r6
 800914c:	bf28      	it	cs
 800914e:	463a      	movcs	r2, r7
 8009150:	f7ff fed0 	bl	8008ef4 <memcpy>
 8009154:	4631      	mov	r1, r6
 8009156:	4640      	mov	r0, r8
 8009158:	f7ff fef4 	bl	8008f44 <_free_r>
 800915c:	e7e1      	b.n	8009122 <_realloc_r+0x1e>
 800915e:	4635      	mov	r5, r6
 8009160:	e7df      	b.n	8009122 <_realloc_r+0x1e>
	...

08009164 <_sbrk_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d06      	ldr	r5, [pc, #24]	; (8009180 <_sbrk_r+0x1c>)
 8009168:	2300      	movs	r3, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	602b      	str	r3, [r5, #0]
 8009170:	f7f8 fb96 	bl	80018a0 <_sbrk>
 8009174:	1c43      	adds	r3, r0, #1
 8009176:	d102      	bne.n	800917e <_sbrk_r+0x1a>
 8009178:	682b      	ldr	r3, [r5, #0]
 800917a:	b103      	cbz	r3, 800917e <_sbrk_r+0x1a>
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	bd38      	pop	{r3, r4, r5, pc}
 8009180:	2000b974 	.word	0x2000b974

08009184 <__malloc_lock>:
 8009184:	4801      	ldr	r0, [pc, #4]	; (800918c <__malloc_lock+0x8>)
 8009186:	f000 b811 	b.w	80091ac <__retarget_lock_acquire_recursive>
 800918a:	bf00      	nop
 800918c:	2000b978 	.word	0x2000b978

08009190 <__malloc_unlock>:
 8009190:	4801      	ldr	r0, [pc, #4]	; (8009198 <__malloc_unlock+0x8>)
 8009192:	f000 b80c 	b.w	80091ae <__retarget_lock_release_recursive>
 8009196:	bf00      	nop
 8009198:	2000b978 	.word	0x2000b978

0800919c <_malloc_usable_size_r>:
 800919c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091a0:	1f18      	subs	r0, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bfbc      	itt	lt
 80091a6:	580b      	ldrlt	r3, [r1, r0]
 80091a8:	18c0      	addlt	r0, r0, r3
 80091aa:	4770      	bx	lr

080091ac <__retarget_lock_acquire_recursive>:
 80091ac:	4770      	bx	lr

080091ae <__retarget_lock_release_recursive>:
 80091ae:	4770      	bx	lr

080091b0 <_init>:
 80091b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b2:	bf00      	nop
 80091b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091b6:	bc08      	pop	{r3}
 80091b8:	469e      	mov	lr, r3
 80091ba:	4770      	bx	lr

080091bc <_fini>:
 80091bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091be:	bf00      	nop
 80091c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c2:	bc08      	pop	{r3}
 80091c4:	469e      	mov	lr, r3
 80091c6:	4770      	bx	lr
