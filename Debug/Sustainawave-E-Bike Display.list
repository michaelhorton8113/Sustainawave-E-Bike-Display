
Sustainawave-E-Bike Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08007440  08007440  00017440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b4  080074b4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080074b4  080074b4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074b4  080074b4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074b4  080074b4  000174b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080074bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000070  0800752c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000458  0800752c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016857  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f0  00000000  00000000  000368f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f8  00000000  00000000  00039de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  0003b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000299ec  00000000  00000000  0003c630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e5f  00000000  00000000  0006601c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5fbb  00000000  00000000  0007de7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005640  00000000  00000000  00173e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007428 	.word	0x08007428

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08007428 	.word	0x08007428

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f002 fbae 	bl	800292c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f816 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f924 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8ec 	bl	80003b4 <MX_DMA_Init>
  MX_TIM2_Init();
 80001dc:	f000 f898 	bl	8000310 <MX_TIM2_Init>
  MX_CAN1_Init();
 80001e0:	f000 f860 	bl	80002a4 <MX_CAN1_Init>
  MX_DISPLAY_Init();
 80001e4:	f000 ffb7 	bl	8001156 <MX_DISPLAY_Init>
  /* USER CODE BEGIN 2 */

  /* Start VESC communication */
  vesc_init(&hcan1);
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <main+0x34>)
 80001ea:	f000 ff23 	bl	8001034 <vesc_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(400);
 80001ee:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80001f2:	f002 fc17 	bl	8002a24 <HAL_Delay>
    /* USER CODE END WHILE */

  MX_DISPLAY_Process();
 80001f6:	f000 ffcc 	bl	8001192 <MX_DISPLAY_Process>
	  HAL_Delay(400);
 80001fa:	e7f8      	b.n	80001ee <main+0x26>
 80001fc:	2000008c 	.word	0x2000008c

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b096      	sub	sp, #88	; 0x58
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0314 	add.w	r3, r7, #20
 800020a:	2244      	movs	r2, #68	; 0x44
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f007 f902 	bl	8007418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	463b      	mov	r3, r7
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000222:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000226:	f004 f8db 	bl	80043e0 <HAL_PWREx_ControlVoltageScaling>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000230:	f000 f99a 	bl	8000568 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000234:	2302      	movs	r3, #2
 8000236:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800023c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800023e:	2310      	movs	r3, #16
 8000240:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000246:	2302      	movs	r3, #2
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800024e:	230a      	movs	r3, #10
 8000250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000252:	2307      	movs	r3, #7
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000256:	2302      	movs	r3, #2
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f004 f912 	bl	800448c <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800026e:	f000 f97b 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2104      	movs	r1, #4
 800028a:	4618      	mov	r0, r3
 800028c:	f004 fcda 	bl	8004c44 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000296:	f000 f967 	bl	8000568 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80002a8:	4b17      	ldr	r3, [pc, #92]	; (8000308 <MX_CAN1_Init+0x64>)
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <MX_CAN1_Init+0x68>)
 80002ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80002ae:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MX_CAN1_Init+0x64>)
 80002b0:	2210      	movs	r2, #16
 80002b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <MX_CAN1_Init+0x64>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80002ba:	4b13      	ldr	r3, [pc, #76]	; (8000308 <MX_CAN1_Init+0x64>)
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_CAN1_Init+0x64>)
 80002c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 80002c8:	4b0f      	ldr	r3, [pc, #60]	; (8000308 <MX_CAN1_Init+0x64>)
 80002ca:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80002ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <MX_CAN1_Init+0x64>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80002d6:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_CAN1_Init+0x64>)
 80002d8:	2200      	movs	r2, #0
 80002da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <MX_CAN1_Init+0x64>)
 80002de:	2200      	movs	r2, #0
 80002e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80002e2:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_CAN1_Init+0x64>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <MX_CAN1_Init+0x64>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80002ee:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_CAN1_Init+0x64>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80002f4:	4804      	ldr	r0, [pc, #16]	; (8000308 <MX_CAN1_Init+0x64>)
 80002f6:	f002 fbb9 	bl	8002a6c <HAL_CAN_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000300:	f000 f932 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000304:	bf00      	nop
 8000306:	bd80      	pop	{r7, pc}
 8000308:	2000008c 	.word	0x2000008c
 800030c:	40006400 	.word	0x40006400

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032e:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2520;
 8000336:	4b1e      	ldr	r3, [pc, #120]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000338:	f640 12d8 	movw	r2, #2520	; 0x9d8
 800033c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033e:	4b1c      	ldr	r3, [pc, #112]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000344:	4b1a      	ldr	r3, [pc, #104]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800034a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034c:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <MX_TIM2_Init+0xa0>)
 800034e:	2200      	movs	r2, #0
 8000350:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000352:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000358:	4815      	ldr	r0, [pc, #84]	; (80003b0 <MX_TIM2_Init+0xa0>)
 800035a:	f006 fcf3 	bl	8006d44 <HAL_TIM_Base_Init>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000364:	f000 f900 	bl	8000568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036e:	f107 0310 	add.w	r3, r7, #16
 8000372:	4619      	mov	r1, r3
 8000374:	480e      	ldr	r0, [pc, #56]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000376:	f006 fda5 	bl	8006ec4 <HAL_TIM_ConfigClockSource>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000380:	f000 f8f2 	bl	8000568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000384:	2310      	movs	r3, #16
 8000386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000388:	2300      	movs	r3, #0
 800038a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4619      	mov	r1, r3
 8000390:	4807      	ldr	r0, [pc, #28]	; (80003b0 <MX_TIM2_Init+0xa0>)
 8000392:	f006 ff95 	bl	80072c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800039c:	f000 f8e4 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start(&htim2);
 80003a0:	4803      	ldr	r0, [pc, #12]	; (80003b0 <MX_TIM2_Init+0xa0>)
 80003a2:	f006 fd27 	bl	8006df4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM2_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3720      	adds	r7, #32
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	200000b4 	.word	0x200000b4

080003b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <MX_DMA_Init+0x68>)
 80003bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003be:	4a17      	ldr	r2, [pc, #92]	; (800041c <MX_DMA_Init+0x68>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6493      	str	r3, [r2, #72]	; 0x48
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_DMA_Init+0x68>)
 80003c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003ca:	f003 0301 	and.w	r3, r3, #1
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2102      	movs	r1, #2
 80003d6:	200c      	movs	r0, #12
 80003d8:	f003 f9ad 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80003dc:	200c      	movs	r0, #12
 80003de:	f003 f9c6 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2102      	movs	r1, #2
 80003e6:	200d      	movs	r0, #13
 80003e8:	f003 f9a5 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80003ec:	200d      	movs	r0, #13
 80003ee:	f003 f9be 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 3, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2103      	movs	r1, #3
 80003f6:	200e      	movs	r0, #14
 80003f8:	f003 f99d 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003fc:	200e      	movs	r0, #14
 80003fe:	f003 f9b6 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 3, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2103      	movs	r1, #3
 8000406:	200f      	movs	r0, #15
 8000408:	f003 f995 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800040c:	200f      	movs	r0, #15
 800040e:	f003 f9ae 	bl	800376e <HAL_NVIC_EnableIRQ>

}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
 8000434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000436:	4b49      	ldr	r3, [pc, #292]	; (800055c <MX_GPIO_Init+0x13c>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	4a48      	ldr	r2, [pc, #288]	; (800055c <MX_GPIO_Init+0x13c>)
 800043c:	f043 0304 	orr.w	r3, r3, #4
 8000440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000442:	4b46      	ldr	r3, [pc, #280]	; (800055c <MX_GPIO_Init+0x13c>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	f003 0304 	and.w	r3, r3, #4
 800044a:	60bb      	str	r3, [r7, #8]
 800044c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044e:	4b43      	ldr	r3, [pc, #268]	; (800055c <MX_GPIO_Init+0x13c>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a42      	ldr	r2, [pc, #264]	; (800055c <MX_GPIO_Init+0x13c>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4b40      	ldr	r3, [pc, #256]	; (800055c <MX_GPIO_Init+0x13c>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0301 	and.w	r3, r3, #1
 8000462:	607b      	str	r3, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b3d      	ldr	r3, [pc, #244]	; (800055c <MX_GPIO_Init+0x13c>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	4a3c      	ldr	r2, [pc, #240]	; (800055c <MX_GPIO_Init+0x13c>)
 800046c:	f043 0302 	orr.w	r3, r3, #2
 8000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000472:	4b3a      	ldr	r3, [pc, #232]	; (800055c <MX_GPIO_Init+0x13c>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	603b      	str	r3, [r7, #0]
 800047c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISP_NRESET_Pin|SPIB_NCS_Pin|SPIA_NCS_Pin, GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	f240 3102 	movw	r1, #770	; 0x302
 8000484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000488:	f003 ff84 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIA_DCX_GPIO_Port, SPIA_DCX_Pin, GPIO_PIN_RESET);
 800048c:	2200      	movs	r2, #0
 800048e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000492:	4833      	ldr	r0, [pc, #204]	; (8000560 <MX_GPIO_Init+0x140>)
 8000494:	f003 ff7e 	bl	8004394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_USER_Pin JOY_UP_Pin JOY_CENTER_Pin */
  GPIO_InitStruct.Pin = BUTTON_USER_Pin|JOY_UP_Pin|JOY_CENTER_Pin;
 8000498:	f242 0381 	movw	r3, #8321	; 0x2081
 800049c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049e:	2300      	movs	r3, #0
 80004a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a6:	f107 030c 	add.w	r3, r7, #12
 80004aa:	4619      	mov	r1, r3
 80004ac:	482d      	ldr	r0, [pc, #180]	; (8000564 <MX_GPIO_Init+0x144>)
 80004ae:	f003 fcd3 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_TE_Pin */
  GPIO_InitStruct.Pin = DISP_TE_Pin;
 80004b2:	2301      	movs	r3, #1
 80004b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004b6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80004ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DISP_TE_GPIO_Port, &GPIO_InitStruct);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ca:	f003 fcc5 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_NRESET_Pin */
  GPIO_InitStruct.Pin = DISP_NRESET_Pin;
 80004ce:	2302      	movs	r3, #2
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DISP_NRESET_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f003 fcb6 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_DOWN_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_DOWN_Pin|JOY_LEFT_Pin;
 80004ec:	2351      	movs	r3, #81	; 0x51
 80004ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f0:	2300      	movs	r3, #0
 80004f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f8:	f107 030c 	add.w	r3, r7, #12
 80004fc:	4619      	mov	r1, r3
 80004fe:	4818      	ldr	r0, [pc, #96]	; (8000560 <MX_GPIO_Init+0x140>)
 8000500:	f003 fcaa 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPIA_DCX_Pin */
  GPIO_InitStruct.Pin = SPIA_DCX_Pin;
 8000504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000508:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050a:	2301      	movs	r3, #1
 800050c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800050e:	2301      	movs	r3, #1
 8000510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIA_DCX_GPIO_Port, &GPIO_InitStruct);
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	4810      	ldr	r0, [pc, #64]	; (8000560 <MX_GPIO_Init+0x140>)
 800051e:	f003 fc9b 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPIB_NCS_Pin SPIA_NCS_Pin */
  GPIO_InitStruct.Pin = SPIB_NCS_Pin|SPIA_NCS_Pin;
 8000522:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000526:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800052c:	2301      	movs	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000530:	2303      	movs	r3, #3
 8000532:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	4619      	mov	r1, r3
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f003 fc8b 	bl	8003e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 4, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2104      	movs	r1, #4
 8000546:	2006      	movs	r0, #6
 8000548:	f003 f8f5 	bl	8003736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800054c:	2006      	movs	r0, #6
 800054e:	f003 f90e 	bl	800376e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000552:	bf00      	nop
 8000554:	3720      	adds	r7, #32
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000
 8000560:	48000400 	.word	0x48000400
 8000564:	48000800 	.word	0x48000800

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6613      	str	r3, [r2, #96]	; 0x60
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	6593      	str	r3, [r2, #88]	; 0x58
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x44>)
 80005a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <HAL_CAN_MspInit+0xa0>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d139      	bne.n	8000652 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 80005e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005e8:	6593      	str	r3, [r2, #88]	; 0x58
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <HAL_CAN_MspInit+0xa4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800060e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000614:	2302      	movs	r3, #2
 8000616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061c:	2303      	movs	r3, #3
 800061e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000620:	2309      	movs	r3, #9
 8000622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062e:	f003 fc13 	bl	8003e58 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 13, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	210d      	movs	r1, #13
 8000636:	2013      	movs	r0, #19
 8000638:	f003 f87d 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800063c:	2013      	movs	r0, #19
 800063e:	f003 f896 	bl	800376e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 14, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	210e      	movs	r1, #14
 8000646:	2014      	movs	r0, #20
 8000648:	f003 f875 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800064c:	2014      	movs	r0, #20
 800064e:	f003 f88e 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000652:	bf00      	nop
 8000654:	3728      	adds	r7, #40	; 0x28
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40006400 	.word	0x40006400
 8000660:	40021000 	.word	0x40021000

08000664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000674:	d10b      	bne.n	800068e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4b09      	ldr	r3, [pc, #36]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067a:	4a08      	ldr	r2, [pc, #32]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6593      	str	r3, [r2, #88]	; 0x58
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <HAL_TIM_Base_MspInit+0x38>)
 8000684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	40021000 	.word	0x40021000

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr

080006cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ec:	f002 f97a 	bl	80029e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <EXTI0_IRQHandler+0x10>)
 80006fa:	f003 fb59 	bl	8003db0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000360 	.word	0x20000360

08000708 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <DMA1_Channel2_IRQHandler+0x10>)
 800070e:	f003 fa42 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000300 	.word	0x20000300

0800071c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <DMA1_Channel3_IRQHandler+0x10>)
 8000722:	f003 fa38 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200002b8 	.word	0x200002b8

08000730 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <DMA1_Channel4_IRQHandler+0x10>)
 8000736:	f003 fa2e 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000228 	.word	0x20000228

08000744 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <DMA1_Channel5_IRQHandler+0x10>)
 800074a:	f003 fa24 	bl	8003b96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000270 	.word	0x20000270

08000758 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <CAN1_TX_IRQHandler+0x10>)
 800075e:	f002 fcc6 	bl	80030ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000008c 	.word	0x2000008c

0800076c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <CAN1_RX0_IRQHandler+0x10>)
 8000772:	f002 fcbc 	bl	80030ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000008c 	.word	0x2000008c

08000780 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <SPI1_IRQHandler+0x10>)
 8000786:	f005 fe69 	bl	800645c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000018c 	.word	0x2000018c

08000794 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000798:	4802      	ldr	r0, [pc, #8]	; (80007a4 <SPI2_IRQHandler+0x10>)
 800079a:	f005 fe5f 	bl	800645c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000100 	.word	0x20000100

080007a8 <BSP_SPI2_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]

  hspi2.Instance  = SPI2;
 80007b2:	4b16      	ldr	r3, [pc, #88]	; (800080c <BSP_SPI2_Init+0x64>)
 80007b4:	4a16      	ldr	r2, [pc, #88]	; (8000810 <BSP_SPI2_Init+0x68>)
 80007b6:	601a      	str	r2, [r3, #0]

  if(SPI2InitCounter++ == 0)
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <BSP_SPI2_Init+0x6c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	1c5a      	adds	r2, r3, #1
 80007be:	4915      	ldr	r1, [pc, #84]	; (8000814 <BSP_SPI2_Init+0x6c>)
 80007c0:	600a      	str	r2, [r1, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d11d      	bne.n	8000802 <BSP_SPI2_Init+0x5a>
  {
    if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80007c6:	4811      	ldr	r0, [pc, #68]	; (800080c <BSP_SPI2_Init+0x64>)
 80007c8:	f005 ff98 	bl	80066fc <HAL_SPI_GetState>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d117      	bne.n	8000802 <BSP_SPI2_Init+0x5a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI2_MspInit(&hspi2);
#else
        if(IsSPI2MspCbValid == 0U)
 80007d2:	4b11      	ldr	r3, [pc, #68]	; (8000818 <BSP_SPI2_Init+0x70>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d107      	bne.n	80007ea <BSP_SPI2_Init+0x42>
        {
            if(BSP_SPI2_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 80007da:	f000 f965 	bl	8000aa8 <BSP_SPI2_RegisterDefaultMspCallbacks>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <BSP_SPI2_Init+0x42>
            {
                return BSP_ERROR_MSP_FAILURE;
 80007e4:	f06f 0309 	mvn.w	r3, #9
 80007e8:	e00c      	b.n	8000804 <BSP_SPI2_Init+0x5c>
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d108      	bne.n	8000802 <BSP_SPI2_Init+0x5a>
        {
            /* Init the SPI */
            if (MX_SPI2_Init(&hspi2) != HAL_OK)
 80007f0:	4806      	ldr	r0, [pc, #24]	; (800080c <BSP_SPI2_Init+0x64>)
 80007f2:	f000 f9bd 	bl	8000b70 <MX_SPI2_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d002      	beq.n	8000802 <BSP_SPI2_Init+0x5a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80007fc:	f06f 0307 	mvn.w	r3, #7
 8000800:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 8000802:	687b      	ldr	r3, [r7, #4]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000100 	.word	0x20000100
 8000810:	40003800 	.word	0x40003800
 8000814:	2000021c 	.word	0x2000021c
 8000818:	20000218 	.word	0x20000218

0800081c <BSP_SPI2_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI2_DeInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 8000822:	f06f 0307 	mvn.w	r3, #7
 8000826:	607b      	str	r3, [r7, #4]
  if (SPI2InitCounter > 0)
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <BSP_SPI2_DeInit+0x40>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d010      	beq.n	8000852 <BSP_SPI2_DeInit+0x36>
  {
    if (--SPI2InitCounter == 0)
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <BSP_SPI2_DeInit+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	3b01      	subs	r3, #1
 8000836:	4a09      	ldr	r2, [pc, #36]	; (800085c <BSP_SPI2_DeInit+0x40>)
 8000838:	6013      	str	r3, [r2, #0]
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <BSP_SPI2_DeInit+0x40>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d107      	bne.n	8000852 <BSP_SPI2_DeInit+0x36>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI2_MspDeInit(&hspi2);
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi2) == HAL_OK)
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <BSP_SPI2_DeInit+0x44>)
 8000844:	f004 fcc4 	bl	80051d0 <HAL_SPI_DeInit>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d101      	bne.n	8000852 <BSP_SPI2_DeInit+0x36>
      {
        ret = BSP_ERROR_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8000852:	687b      	ldr	r3, [r7, #4]
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000021c 	.word	0x2000021c
 8000860:	20000100 	.word	0x20000100

08000864 <BSP_SPI2_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send(uint8_t *pData, uint16_t Length)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 8000874:	887a      	ldrh	r2, [r7, #2]
 8000876:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	4806      	ldr	r0, [pc, #24]	; (8000898 <BSP_SPI2_Send+0x34>)
 800087e:	f004 fd97 	bl	80053b0 <HAL_SPI_Transmit>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d002      	beq.n	800088e <BSP_SPI2_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000888:	f06f 0305 	mvn.w	r3, #5
 800088c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000100 	.word	0x20000100

0800089c <BSP_SPI2_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv(uint8_t *pData, uint16_t Length)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi2, pData, Length, BUS_SPI2_POLL_TIMEOUT) != HAL_OK)
 80008ac:	887a      	ldrh	r2, [r7, #2]
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <BSP_SPI2_Recv+0x34>)
 80008b6:	f004 fee9 	bl	800568c <HAL_SPI_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <BSP_SPI2_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80008c0:	f06f 0305 	mvn.w	r3, #5
 80008c4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80008c6:	68fb      	ldr	r3, [r7, #12]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000100 	.word	0x20000100

080008d4 <BSP_SPI2_Send_DMA>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI2_Send_DMA(uint8_t *pData, uint16_t Length)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit_DMA(&hspi2, pData, Length) != HAL_OK)
 80008e4:	887b      	ldrh	r3, [r7, #2]
 80008e6:	461a      	mov	r2, r3
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <BSP_SPI2_Send_DMA+0x34>)
 80008ec:	f005 fa12 	bl	8005d14 <HAL_SPI_Transmit_DMA>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <BSP_SPI2_Send_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80008f6:	f06f 0305 	mvn.w	r3, #5
 80008fa:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000100 	.word	0x20000100

0800090c <BSP_SPI2_Recv_DMA>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI2_Recv_DMA(uint8_t *pData, uint16_t Length)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive_DMA(&hspi2, pData, Length) != HAL_OK)
 800091c:	887b      	ldrh	r3, [r7, #2]
 800091e:	461a      	mov	r2, r3
 8000920:	6879      	ldr	r1, [r7, #4]
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <BSP_SPI2_Recv_DMA+0x34>)
 8000924:	f005 faea 	bl	8005efc <HAL_SPI_Receive_DMA>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d002      	beq.n	8000934 <BSP_SPI2_Recv_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 800092e:	f06f 0305 	mvn.w	r3, #5
 8000932:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000934:	68fb      	ldr	r3, [r7, #12]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000100 	.word	0x20000100

08000944 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <BSP_SPI1_Init+0x64>)
 8000950:	4a16      	ldr	r2, [pc, #88]	; (80009ac <BSP_SPI1_Init+0x68>)
 8000952:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <BSP_SPI1_Init+0x6c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	4915      	ldr	r1, [pc, #84]	; (80009b0 <BSP_SPI1_Init+0x6c>)
 800095c:	600a      	str	r2, [r1, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11d      	bne.n	800099e <BSP_SPI1_Init+0x5a>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8000962:	4811      	ldr	r0, [pc, #68]	; (80009a8 <BSP_SPI1_Init+0x64>)
 8000964:	f005 feca 	bl	80066fc <HAL_SPI_GetState>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d117      	bne.n	800099e <BSP_SPI1_Init+0x5a>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
#else
        if(IsSPI1MspCbValid == 0U)
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <BSP_SPI1_Init+0x70>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d107      	bne.n	8000986 <BSP_SPI1_Init+0x42>
        {
            if(BSP_SPI1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 8000976:	f000 f8c9 	bl	8000b0c <BSP_SPI1_RegisterDefaultMspCallbacks>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d002      	beq.n	8000986 <BSP_SPI1_Init+0x42>
            {
                return BSP_ERROR_MSP_FAILURE;
 8000980:	f06f 0309 	mvn.w	r3, #9
 8000984:	e00c      	b.n	80009a0 <BSP_SPI1_Init+0x5c>
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d108      	bne.n	800099e <BSP_SPI1_Init+0x5a>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <BSP_SPI1_Init+0x64>)
 800098e:	f000 fa1f 	bl	8000dd0 <MX_SPI1_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <BSP_SPI1_Init+0x5a>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8000998:	f06f 0307 	mvn.w	r3, #7
 800099c:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000018c 	.word	0x2000018c
 80009ac:	40013000 	.word	0x40013000
 80009b0:	20000224 	.word	0x20000224
 80009b4:	20000220 	.word	0x20000220

080009b8 <BSP_SPI1_DeInit>:
  * @brief  DeInitializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_DeInit(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_BUS_FAILURE;
 80009be:	f06f 0307 	mvn.w	r3, #7
 80009c2:	607b      	str	r3, [r7, #4]
  if (SPI1InitCounter > 0)
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <BSP_SPI1_DeInit+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d010      	beq.n	80009ee <BSP_SPI1_DeInit+0x36>
  {
    if (--SPI1InitCounter == 0)
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <BSP_SPI1_DeInit+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	3b01      	subs	r3, #1
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <BSP_SPI1_DeInit+0x40>)
 80009d4:	6013      	str	r3, [r2, #0]
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <BSP_SPI1_DeInit+0x40>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d107      	bne.n	80009ee <BSP_SPI1_DeInit+0x36>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
      SPI1_MspDeInit(&hspi1);
#endif
      /* DeInit the SPI*/
      if (HAL_SPI_DeInit(&hspi1) == HAL_OK)
 80009de:	4807      	ldr	r0, [pc, #28]	; (80009fc <BSP_SPI1_DeInit+0x44>)
 80009e0:	f004 fbf6 	bl	80051d0 <HAL_SPI_DeInit>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d101      	bne.n	80009ee <BSP_SPI1_DeInit+0x36>
      {
        ret = BSP_ERROR_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80009ee:	687b      	ldr	r3, [r7, #4]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000224 	.word	0x20000224
 80009fc:	2000018c 	.word	0x2000018c

08000a00 <BSP_SPI1_Send>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a10:	887a      	ldrh	r2, [r7, #2]
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <BSP_SPI1_Send+0x34>)
 8000a1a:	f004 fcc9 	bl	80053b0 <HAL_SPI_Transmit>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <BSP_SPI1_Send+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a24:	f06f 0305 	mvn.w	r3, #5
 8000a28:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000018c 	.word	0x2000018c

08000a38 <BSP_SPI1_Recv>:
  * @param  pData: Pointer to data buffer to receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Receive(&hspi1, pData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8000a48:	887a      	ldrh	r2, [r7, #2]
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <BSP_SPI1_Recv+0x34>)
 8000a52:	f004 fe1b 	bl	800568c <HAL_SPI_Receive>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d002      	beq.n	8000a62 <BSP_SPI1_Recv+0x2a>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a5c:	f06f 0305 	mvn.w	r3, #5
 8000a60:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2000018c 	.word	0x2000018c

08000a70 <BSP_SPI1_Send_DMA>:
  * @param  pData: Pointer to data buffer to send
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send_DMA(uint8_t *pData, uint16_t Length)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  if(HAL_SPI_Transmit_DMA(&hspi1, pData, Length) != HAL_OK)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	461a      	mov	r2, r3
 8000a84:	6879      	ldr	r1, [r7, #4]
 8000a86:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <BSP_SPI1_Send_DMA+0x34>)
 8000a88:	f005 f944 	bl	8005d14 <HAL_SPI_Transmit_DMA>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d002      	beq.n	8000a98 <BSP_SPI1_Send_DMA+0x28>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8000a92:	f06f 0305 	mvn.w	r3, #5
 8000a96:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8000a98:	68fb      	ldr	r3, [r7, #12]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3710      	adds	r7, #16
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000018c 	.word	0x2000018c

08000aa8 <BSP_SPI2_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP SPI2 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_SPI2_RegisterDefaultMspCallbacks (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  __HAL_SPI_RESET_HANDLE_STATE(&hspi2);
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Register MspInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPINIT_CB_ID, SPI2_MspInit)  != HAL_OK)
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <BSP_SPI2_RegisterDefaultMspCallbacks+0x58>)
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	480c      	ldr	r0, [pc, #48]	; (8000afc <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8000aca:	f004 fbcb 	bl	8005264 <HAL_SPI_RegisterCallback>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d002      	beq.n	8000ada <BSP_SPI2_RegisterDefaultMspCallbacks+0x32>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8000ad4:	f06f 0303 	mvn.w	r3, #3
 8000ad8:	e00e      	b.n	8000af8 <BSP_SPI2_RegisterDefaultMspCallbacks+0x50>
  }

  /* Register MspDeInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi2, HAL_SPI_MSPDEINIT_CB_ID, SPI2_MspDeInit) != HAL_OK)
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <BSP_SPI2_RegisterDefaultMspCallbacks+0x5c>)
 8000adc:	2109      	movs	r1, #9
 8000ade:	4807      	ldr	r0, [pc, #28]	; (8000afc <BSP_SPI2_RegisterDefaultMspCallbacks+0x54>)
 8000ae0:	f004 fbc0 	bl	8005264 <HAL_SPI_RegisterCallback>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <BSP_SPI2_RegisterDefaultMspCallbacks+0x48>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8000aea:	f06f 0303 	mvn.w	r3, #3
 8000aee:	e003      	b.n	8000af8 <BSP_SPI2_RegisterDefaultMspCallbacks+0x50>
  }
  IsSPI2MspCbValid = 1;
 8000af0:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <BSP_SPI2_RegisterDefaultMspCallbacks+0x60>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000100 	.word	0x20000100
 8000b00:	08000bf5 	.word	0x08000bf5
 8000b04:	08000d75 	.word	0x08000d75
 8000b08:	20000218 	.word	0x20000218

08000b0c <BSP_SPI1_RegisterDefaultMspCallbacks>:
/**
  * @brief Register Default BSP SPI1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_SPI1_RegisterDefaultMspCallbacks (void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0

  __HAL_SPI_RESET_HANDLE_STATE(&hspi1);
 8000b10:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Register MspInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPINIT_CB_ID, SPI1_MspInit)  != HAL_OK)
 8000b28:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <BSP_SPI1_RegisterDefaultMspCallbacks+0x58>)
 8000b2a:	2108      	movs	r1, #8
 8000b2c:	480c      	ldr	r0, [pc, #48]	; (8000b60 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 8000b2e:	f004 fb99 	bl	8005264 <HAL_SPI_RegisterCallback>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <BSP_SPI1_RegisterDefaultMspCallbacks+0x32>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8000b38:	f06f 0303 	mvn.w	r3, #3
 8000b3c:	e00e      	b.n	8000b5c <BSP_SPI1_RegisterDefaultMspCallbacks+0x50>
  }

  /* Register MspDeInit Callback */
  if (HAL_SPI_RegisterCallback(&hspi1, HAL_SPI_MSPDEINIT_CB_ID, SPI1_MspDeInit) != HAL_OK)
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <BSP_SPI1_RegisterDefaultMspCallbacks+0x5c>)
 8000b40:	2109      	movs	r1, #9
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <BSP_SPI1_RegisterDefaultMspCallbacks+0x54>)
 8000b44:	f004 fb8e 	bl	8005264 <HAL_SPI_RegisterCallback>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d002      	beq.n	8000b54 <BSP_SPI1_RegisterDefaultMspCallbacks+0x48>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8000b4e:	f06f 0303 	mvn.w	r3, #3
 8000b52:	e003      	b.n	8000b5c <BSP_SPI1_RegisterDefaultMspCallbacks+0x50>
  }
  IsSPI1MspCbValid = 1;
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <BSP_SPI1_RegisterDefaultMspCallbacks+0x60>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000018c 	.word	0x2000018c
 8000b64:	08000e55 	.word	0x08000e55
 8000b68:	08000fb9 	.word	0x08000fb9
 8000b6c:	20000220 	.word	0x20000220

08000b70 <MX_SPI2_Init>:
}

/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef* hspi)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI2;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_SPI2_Init+0x80>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b88:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b96:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000baa:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2207      	movs	r2, #7
 8000bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f004 fa20 	bl	800501c <HAL_SPI_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_SPI2_Init+0x76>
  {
    ret = HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40003800 	.word	0x40003800

08000bf4 <SPI2_MspInit>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

static void SPI2_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bfc:	4b56      	ldr	r3, [pc, #344]	; (8000d58 <SPI2_MspInit+0x164>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	4a55      	ldr	r2, [pc, #340]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6593      	str	r3, [r2, #88]	; 0x58
 8000c08:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c14:	4b50      	ldr	r3, [pc, #320]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	4a4f      	ldr	r2, [pc, #316]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c20:	4b4d      	ldr	r3, [pc, #308]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a49      	ldr	r2, [pc, #292]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c32:	f043 0302 	orr.w	r3, r3, #2
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <SPI2_MspInit+0x164>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8000c44:	2304      	movs	r3, #4
 8000c46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8000c54:	2305      	movs	r3, #5
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	483f      	ldr	r0, [pc, #252]	; (8000d5c <SPI2_MspInit+0x168>)
 8000c60:	f003 f8fa 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8000c64:	2308      	movs	r3, #8
 8000c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c70:	2303      	movs	r3, #3
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8000c74:	2305      	movs	r3, #5
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4837      	ldr	r0, [pc, #220]	; (8000d5c <SPI2_MspInit+0x168>)
 8000c80:	f003 f8ea 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482f      	ldr	r0, [pc, #188]	; (8000d60 <SPI2_MspInit+0x16c>)
 8000ca2:	f003 f8d9 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <SPI2_MspInit+0x170>)
 8000ca8:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <SPI2_MspInit+0x174>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 8000cac:	4b2d      	ldr	r3, [pc, #180]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cb2:	4b2c      	ldr	r3, [pc, #176]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb8:	4b2a      	ldr	r3, [pc, #168]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cbe:	4b29      	ldr	r3, [pc, #164]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cc0:	2280      	movs	r2, #128	; 0x80
 8000cc2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cca:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ccc:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000cd4:	4b23      	ldr	r3, [pc, #140]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cda:	4b22      	ldr	r3, [pc, #136]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi2_rx);
 8000ce2:	4820      	ldr	r0, [pc, #128]	; (8000d64 <SPI2_MspInit+0x170>)
 8000ce4:	f002 fd6c 	bl	80037c0 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cec:	659a      	str	r2, [r3, #88]	; 0x58
 8000cee:	4a1d      	ldr	r2, [pc, #116]	; (8000d64 <SPI2_MspInit+0x170>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000cf4:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <SPI2_MspInit+0x178>)
 8000cf6:	4a1e      	ldr	r2, [pc, #120]	; (8000d70 <SPI2_MspInit+0x17c>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <SPI2_MspInit+0x178>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d02:	2210      	movs	r2, #16
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d0e:	2280      	movs	r2, #128	; 0x80
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d12:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d18:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d20:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi2_tx);
 8000d2e:	480f      	ldr	r0, [pc, #60]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d30:	f002 fd46 	bl	80037c0 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d38:	655a      	str	r2, [r3, #84]	; 0x54
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <SPI2_MspInit+0x178>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2103      	movs	r1, #3
 8000d44:	2024      	movs	r0, #36	; 0x24
 8000d46:	f002 fcf6 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d4a:	2024      	movs	r0, #36	; 0x24
 8000d4c:	f002 fd0f 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3728      	adds	r7, #40	; 0x28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48000800 	.word	0x48000800
 8000d60:	48000400 	.word	0x48000400
 8000d64:	20000228 	.word	0x20000228
 8000d68:	40020044 	.word	0x40020044
 8000d6c:	20000270 	.word	0x20000270
 8000d70:	40020058 	.word	0x40020058

08000d74 <SPI2_MspDeInit>:

static void SPI2_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <SPI2_MspDeInit+0x50>)
 8000d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <SPI2_MspDeInit+0x50>)
 8000d82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d86:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    HAL_GPIO_DeInit(BUS_SPI2_MISO_GPIO_PORT, BUS_SPI2_MISO_GPIO_PIN);
 8000d88:	2104      	movs	r1, #4
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <SPI2_MspDeInit+0x54>)
 8000d8c:	f003 fa0e 	bl	80041ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_MOSI_GPIO_PORT, BUS_SPI2_MOSI_GPIO_PIN);
 8000d90:	2108      	movs	r1, #8
 8000d92:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <SPI2_MspDeInit+0x54>)
 8000d94:	f003 fa0a 	bl	80041ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI2_SCK_GPIO_PORT, BUS_SPI2_SCK_GPIO_PIN);
 8000d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <SPI2_MspDeInit+0x58>)
 8000d9e:	f003 fa05 	bl	80041ac <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da6:	4618      	mov	r0, r3
 8000da8:	f002 fdc2 	bl	8003930 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmatx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db0:	4618      	mov	r0, r3
 8000db2:	f002 fdbd 	bl	8003930 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8000db6:	2024      	movs	r0, #36	; 0x24
 8000db8:	f002 fce7 	bl	800378a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	48000800 	.word	0x48000800
 8000dcc:	48000400 	.word	0x48000400

08000dd0 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a1c      	ldr	r2, [pc, #112]	; (8000e50 <MX_SPI1_Init+0x80>)
 8000de0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000de8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000df6:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e0a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2207      	movs	r2, #7
 8000e28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f004 f8f0 	bl	800501c <HAL_SPI_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40013000 	.word	0x40013000

08000e54 <SPI1_MspInit>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi1_rx;

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e5c:	4b51      	ldr	r3, [pc, #324]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e60:	4a50      	ldr	r2, [pc, #320]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e66:	6613      	str	r3, [r2, #96]	; 0x60
 8000e68:	4b4e      	ldr	r3, [pc, #312]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e74:	4b4b      	ldr	r3, [pc, #300]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	4a4a      	ldr	r2, [pc, #296]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e80:	4b48      	ldr	r3, [pc, #288]	; (8000fa4 <SPI1_MspInit+0x150>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8000e8c:	2320      	movs	r3, #32
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eaa:	f002 ffd5 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8000eae:	2340      	movs	r3, #64	; 0x40
 8000eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f002 ffc4 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eee:	f002 ffb3 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <SPI1_MspInit+0x158>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000efe:	4b2a      	ldr	r3, [pc, #168]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f00:	2210      	movs	r2, #16
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b27      	ldr	r3, [pc, #156]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f10:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f20:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000f26:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2c:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi1_tx);
 8000f2e:	481e      	ldr	r0, [pc, #120]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f30:	f002 fc46 	bl	80037c0 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f38:	655a      	str	r2, [r3, #84]	; 0x54
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <SPI1_MspInit+0x154>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6293      	str	r3, [r2, #40]	; 0x28

    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <SPI1_MspInit+0x160>)
 8000f44:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f5a:	2280      	movs	r2, #128	; 0x80
 8000f5c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f64:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f6c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f74:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_spi1_rx);
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f7c:	f002 fc20 	bl	80037c0 <HAL_DMA_Init>

  __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f84:	659a      	str	r2, [r3, #88]	; 0x58
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SPI1_MspInit+0x15c>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	2023      	movs	r0, #35	; 0x23
 8000f92:	f002 fbd0 	bl	8003736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f96:	2023      	movs	r0, #35	; 0x23
 8000f98:	f002 fbe9 	bl	800376e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	200002b8 	.word	0x200002b8
 8000fac:	40020030 	.word	0x40020030
 8000fb0:	20000300 	.word	0x20000300
 8000fb4:	4002001c 	.word	0x4002001c

08000fb8 <SPI1_MspDeInit>:

static void SPI1_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <SPI1_MspDeInit+0x54>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	4a11      	ldr	r2, [pc, #68]	; (800100c <SPI1_MspDeInit+0x54>)
 8000fc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fca:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(BUS_SPI1_SCK_GPIO_PORT, BUS_SPI1_SCK_GPIO_PIN);
 8000fcc:	2120      	movs	r1, #32
 8000fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd2:	f003 f8eb 	bl	80041ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MISO_GPIO_PORT, BUS_SPI1_MISO_GPIO_PIN);
 8000fd6:	2140      	movs	r1, #64	; 0x40
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f003 f8e6 	bl	80041ac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_SPI1_MOSI_GPIO_PORT, BUS_SPI1_MOSI_GPIO_PIN);
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f003 f8e1 	bl	80041ac <HAL_GPIO_DeInit>

    /* Peripheral DMA DeInit*/
    HAL_DMA_DeInit(spiHandle->hdmatx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc9e 	bl	8003930 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(spiHandle->hdmarx);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fc99 	bl	8003930 <HAL_DMA_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8000ffe:	2023      	movs	r0, #35	; 0x23
 8001000:	f002 fbc3 	bl	800378a <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000

08001010 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <SystemInit+0x20>)
 8001016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800101a:	4a05      	ldr	r2, [pc, #20]	; (8001030 <SystemInit+0x20>)
 800101c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <vesc_init>:

static CAN_HandleTypeDef *vesc_can;
static VESC_Status status;

void vesc_init(CAN_HandleTypeDef *can_handle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	; 0x30
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	/* Get pointer to the CAN handle */
	vesc_can = can_handle;
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <vesc_init+0x58>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
  /* CAN filter to receive all messages */
  CAN_FilterTypeDef filter;
  filter.FilterActivation = CAN_FILTER_ENABLE;
 8001042:	2301      	movs	r3, #1
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  filter.FilterBank = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  filter.FilterMaskIdHigh = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  filter.FilterMaskIdLow = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 800105a:	2301      	movs	r3, #1
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(vesc_can, &filter);
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <vesc_init+0x58>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f107 0208 	add.w	r2, r7, #8
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f001 fdfa 	bl	8002c62 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(vesc_can);
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <vesc_init+0x58>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f001 febf 	bl	8002df6 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(vesc_can, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <vesc_init+0x58>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f002 f80f 	bl	80030a2 <HAL_CAN_ActivateNotification>
}
 8001084:	bf00      	nop
 8001086:	3730      	adds	r7, #48	; 0x30
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000358 	.word	0x20000358

08001090 <HAL_CAN_TxMailbox1CompleteCallback>:
	  __asm__("nop");
  }
}

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	__asm__("nop");
 8001098:	bf00      	nop
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rxHeader;

  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, RxData) != HAL_OK)
 80010b0:	f107 0208 	add.w	r2, r7, #8
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f001 fee0 	bl	8002e7e <HAL_CAN_GetRxMessage>
  {
    // Error occurred while receiving CAN message
  }

  // Check if the received message is from the VESC (assuming VESC has a specific CAN ID) - using 101 -> change to actual ID
  if ((rxHeader.ExtId & 0x00FF) == vesc_id)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4a0e      	ldr	r2, [pc, #56]	; (80010fc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80010c4:	7812      	ldrb	r2, [r2, #0]
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d111      	bne.n	80010ee <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
  {
    // Copy the received VESC message to vescMessage array
    for (int i = 0; i < 8; i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
 80010ce:	e00b      	b.n	80010e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
    {
      vescMessage[i] = RxData[i];
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	4413      	add	r3, r2
 80010d6:	7819      	ldrb	r1, [r3, #0]
 80010d8:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3301      	adds	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	; 0x24
 80010e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	ddf0      	ble.n	80010d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
    }
  }
}
 80010ee:	bf00      	nop
 80010f0:	3728      	adds	r7, #40	; 0x28
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000348 	.word	0x20000348
 80010fc:	20000004 	.word	0x20000004
 8001100:	20000350 	.word	0x20000350

08001104 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001108:	f7ff ff82 	bl	8001010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <LoopForever+0x6>)
  ldr r1, =_edata
 800110e:	490d      	ldr	r1, [pc, #52]	; (8001144 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001110:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <LoopForever+0xe>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001114:	e002      	b.n	800111c <LoopCopyDataInit>

08001116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111a:	3304      	adds	r3, #4

0800111c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800111c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001120:	d3f9      	bcc.n	8001116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001124:	4c0a      	ldr	r4, [pc, #40]	; (8001150 <LoopForever+0x16>)
  movs r3, #0
 8001126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001128:	e001      	b.n	800112e <LoopFillZerobss>

0800112a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800112c:	3204      	adds	r2, #4

0800112e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001130:	d3fb      	bcc.n	800112a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001132:	f006 f94d 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001136:	f7ff f847 	bl	80001c8 <main>

0800113a <LoopForever>:

LoopForever:
    b LoopForever
 800113a:	e7fe      	b.n	800113a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001148:	080074bc 	.word	0x080074bc
  ldr r2, =_sbss
 800114c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001150:	20000458 	.word	0x20000458

08001154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC1_2_IRQHandler>

08001156 <MX_DISPLAY_Init>:

/**
 * Initialize DISPLAY application
 */
void MX_DISPLAY_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_DISPLAY_Init 0 */

  /* USER CODE END MX_DISPLAY_Init 0 */
  if(BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f843 	bl	80011e8 <BSP_LCD_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_DISPLAY_Init+0x16>
  {
    Error_Handler();
 8001168:	f7ff f9fe 	bl	8000568 <Error_Handler>
  }
  if(BSP_MEM_Init(0) != BSP_ERROR_NONE)
 800116c:	2000      	movs	r0, #0
 800116e:	f000 fa65 	bl	800163c <BSP_MEM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_DISPLAY_Init+0x26>
  {
    Error_Handler();
 8001178:	f7ff f9f6 	bl	8000568 <Error_Handler>
  }
  if(BSP_KEY_Init(0, KEY_ORIENTATION_PORTRAIT) != BSP_ERROR_NONE)
 800117c:	2100      	movs	r1, #0
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f81c 	bl	80011bc <BSP_KEY_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_DISPLAY_Init+0x38>
  {
    Error_Handler();
 800118a:	f7ff f9ed 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN MX_DISPLAY_Init 1 */

  /* USER CODE END MX_DISPLAY_Init 1 */
}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}

08001192 <MX_DISPLAY_Process>:

/**
 * DISPLAY application entry function
 */
void MX_DISPLAY_Process(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_DISPLAY_Process */

  /* USER CODE END MX_DISPLAY_Process */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <BSP_LCD_SignalTearingEffectEvent>:

void BSP_LCD_SignalTearingEffectEvent(uint32_t Instance, uint8_t state, uint16_t Line)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	70fb      	strb	r3, [r7, #3]
 80011ac:	4613      	mov	r3, r2
 80011ae:	803b      	strh	r3, [r7, #0]
    {
      /* TE event is done : de-allow display refresh */
    }
    /* USER CODE END BSP_LCD_SignalTearingEffectEvent */
  }
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <BSP_KEY_Init>:
  * @param  Instance:     KEY Instance.
  * @param  Orientation:  KEY Orientation.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_KEY_Init(uint32_t Instance, uint8_t Orientation)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	460b      	mov	r3, r1
 80011c6:	70fb      	strb	r3, [r7, #3]
  int32_t ret = BSP_ERROR_NONE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]

  BSP_KEY_CHECK_PARAMS(Instance);

  KeyCtx[Instance].Orientation = Orientation;
 80011cc:	78fa      	ldrb	r2, [r7, #3]
 80011ce:	4905      	ldr	r1, [pc, #20]	; (80011e4 <BSP_KEY_Init+0x28>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  return ret;
 80011d6:	68fb      	ldr	r3, [r7, #12]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	2000035c 	.word	0x2000035c

080011e8 <BSP_LCD_Init>:
  *          @arg @ref LCD_ORIENTATION_PORTRAIT_ROT180    Portrait rotated 180° orientation choice of LCD screen
  *          @arg @ref LCD_ORIENTATION_LANDSCAPE_ROT180   Landscape rotated 180° orientation choice of LCD screen
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80011f2:	f06f 030a 	mvn.w	r3, #10
 80011f6:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <BSP_LCD_Init+0x1c>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b03      	cmp	r3, #3
 8001202:	d903      	bls.n	800120c <BSP_LCD_Init+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001204:	f06f 0301 	mvn.w	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	e00e      	b.n	800122a <BSP_LCD_Init+0x42>
  }
  else
  {
    /* LCD OS Initialize */
    if(LCD_OS_Initialize(0) != LCD_OS_ERROR_NONE)
 800120c:	2000      	movs	r0, #0
 800120e:	f000 f9e9 	bl	80015e4 <LCD_OS_Initialize>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <BSP_LCD_Init+0x38>
    {
      ret = BSP_ERROR_NO_INIT;
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e004      	b.n	800122a <BSP_LCD_Init+0x42>
    }
    else
    {
      /* Probe the LCD Component driver */
      ret = LCD_Probe(Instance, Orientation);
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f810 	bl	8001248 <LCD_Probe>
 8001228:	60f8      	str	r0, [r7, #12]
    }
  }

  return ret;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <BSP_LCD_SignalTransferDone>:
/**
  * @brief  Signal Transfer Event.
  * @param  Instance:     LCD Instance.
  */
__WEAK void BSP_LCD_SignalTransferDone(uint32_t Instance)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if (Instance < LCD_INSTANCES_NBR)
  {
    /* This is the user's Callback to be implemented at the application level */
  }
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LCD_Probe>:
  * @param  Instance:     LCD Instance.
  * @param  Orientation:  LCD Orientation
  * @retval int32_t:      BSP status.
  */
static int32_t LCD_Probe(uint32_t Instance, uint32_t Orientation)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	; 0x40
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001252:	2300      	movs	r3, #0
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
  ILI9341_InitParams_t ILI9341_InitParams;

  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <LCD_Probe+0xd0>)
 8001258:	4a30      	ldr	r2, [pc, #192]	; (800131c <LCD_Probe+0xd4>)
 800125a:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <LCD_Probe+0xd0>)
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <LCD_Probe+0xd8>)
 8001260:	605a      	str	r2, [r3, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <LCD_Probe+0xd0>)
 8001264:	4a2f      	ldr	r2, [pc, #188]	; (8001324 <LCD_Probe+0xdc>)
 8001266:	611a      	str	r2, [r3, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 8001268:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <LCD_Probe+0xd0>)
 800126a:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <LCD_Probe+0xe0>)
 800126c:	60da      	str	r2, [r3, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <LCD_Probe+0xd0>)
 8001270:	4a2e      	ldr	r2, [pc, #184]	; (800132c <LCD_Probe+0xe4>)
 8001272:	615a      	str	r2, [r3, #20]
  IOCtx.SendDataDMA      = LCD_IO_SendDataDMA;
 8001274:	4b28      	ldr	r3, [pc, #160]	; (8001318 <LCD_Probe+0xd0>)
 8001276:	4a2e      	ldr	r2, [pc, #184]	; (8001330 <LCD_Probe+0xe8>)
 8001278:	619a      	str	r2, [r3, #24]
  IOCtx.RecvData         = LCD_IO_RecvData;
 800127a:	4b27      	ldr	r3, [pc, #156]	; (8001318 <LCD_Probe+0xd0>)
 800127c:	4a2d      	ldr	r2, [pc, #180]	; (8001334 <LCD_Probe+0xec>)
 800127e:	61da      	str	r2, [r3, #28]
  IOCtx.RecvDataDMA      = LCD_IO_RecvDataDMA;
 8001280:	4b25      	ldr	r3, [pc, #148]	; (8001318 <LCD_Probe+0xd0>)
 8001282:	4a2d      	ldr	r2, [pc, #180]	; (8001338 <LCD_Probe+0xf0>)
 8001284:	621a      	str	r2, [r3, #32]
  IOCtx.GetTick          = LCD_IO_GetTick;
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <LCD_Probe+0xd0>)
 8001288:	4a2c      	ldr	r2, [pc, #176]	; (800133c <LCD_Probe+0xf4>)
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  IOCtx.Delay            = LCD_IO_Delay;
 800128c:	4b22      	ldr	r3, [pc, #136]	; (8001318 <LCD_Probe+0xd0>)
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <LCD_Probe+0xf8>)
 8001290:	629a      	str	r2, [r3, #40]	; 0x28

  if(ILI9341_RegisterBusIO(&ObjCtx, &IOCtx) != ILI9341_OK)
 8001292:	4921      	ldr	r1, [pc, #132]	; (8001318 <LCD_Probe+0xd0>)
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <LCD_Probe+0xfc>)
 8001296:	f000 fadd 	bl	8001854 <ILI9341_RegisterBusIO>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <LCD_Probe+0x60>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80012a0:	f06f 0306 	mvn.w	r3, #6
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a6:	e031      	b.n	800130c <LCD_Probe+0xc4>
  }
  else
  {
    LcdCompObj = &ObjCtx;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <LCD_Probe+0x100>)
 80012aa:	4a26      	ldr	r2, [pc, #152]	; (8001344 <LCD_Probe+0xfc>)
 80012ac:	601a      	str	r2, [r3, #0]

    /* LCD Initialization */
    LcdDrv = (LCD_Drv_t *)&ILI9341_LCD_Driver;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <LCD_Probe+0x104>)
 80012b0:	4a27      	ldr	r2, [pc, #156]	; (8001350 <LCD_Probe+0x108>)
 80012b2:	601a      	str	r2, [r3, #0]

    ObjCtx.IsInitialized = 0;
 80012b4:	4b23      	ldr	r3, [pc, #140]	; (8001344 <LCD_Probe+0xfc>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    ILI9341_InitParams.Endian         = ILI9341_ENDIAN_BIG;
 80012bc:	2300      	movs	r3, #0
 80012be:	733b      	strb	r3, [r7, #12]
    ILI9341_InitParams.SwapRB         = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
    ILI9341_InitParams.ColorCoding    = ILI9341_FORMAT_DEFAULT;
 80012c4:	2355      	movs	r3, #85	; 0x55
 80012c6:	617b      	str	r3, [r7, #20]
    ILI9341_InitParams.Orientation    = Orientation;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
    ILI9341_InitParams.TEScanline     = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61fb      	str	r3, [r7, #28]
    ILI9341_InitParams.TEMode         = ILI9341_TE_MODE_1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f887 3020 	strb.w	r3, [r7, #32]
    ILI9341_InitParams.Timings.hsync  = ILI9341_HSYNC;
 80012d6:	2309      	movs	r3, #9
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    ILI9341_InitParams.Timings.hbp    = ILI9341_HBP;
 80012da:	231d      	movs	r3, #29
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    ILI9341_InitParams.Timings.hfp    = ILI9341_HFP;
 80012de:	2302      	movs	r3, #2
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    ILI9341_InitParams.Timings.vsync  = ILI9341_VSYNC;
 80012e2:	2301      	movs	r3, #1
 80012e4:	633b      	str	r3, [r7, #48]	; 0x30
    ILI9341_InitParams.Timings.vbp    = ILI9341_VBP;
 80012e6:	2303      	movs	r3, #3
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
    ILI9341_InitParams.Timings.vfp    = ILI9341_VFP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
    if(LcdDrv->Init(LcdCompObj, &ILI9341_InitParams) != ILI9341_OK)
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <LCD_Probe+0x104>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <LCD_Probe+0x100>)
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	f107 010c 	add.w	r1, r7, #12
 80012fc:	4610      	mov	r0, r2
 80012fe:	4798      	blx	r3
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <LCD_Probe+0xc4>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8001306:	f06f 0304 	mvn.w	r3, #4
 800130a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 800130c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800130e:	4618      	mov	r0, r3
 8001310:	3740      	adds	r7, #64	; 0x40
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000370 	.word	0x20000370
 800131c:	08001401 	.word	0x08001401
 8001320:	08001481 	.word	0x08001481
 8001324:	080014ed 	.word	0x080014ed
 8001328:	0800149d 	.word	0x0800149d
 800132c:	08001507 	.word	0x08001507
 8001330:	08001541 	.word	0x08001541
 8001334:	08001571 	.word	0x08001571
 8001338:	080015c9 	.word	0x080015c9
 800133c:	08001391 	.word	0x08001391
 8001340:	080013a7 	.word	0x080013a7
 8001344:	2000039c 	.word	0x2000039c
 8001348:	20000368 	.word	0x20000368
 800134c:	2000036c 	.word	0x2000036c
 8001350:	20000008 	.word	0x20000008

08001354 <LCD_TECallback>:
  * @brief HCI Transport Layer Low Level Interrupt Service Routine
  * @param  None
  * @retval None
  */
static void LCD_TECallback(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
  uint8_t state = ((LCD_TE_GPIO_PORT->IDR & LCD_TE_GPIO_PIN) == 0x00u ? 0 : 1);
 800135a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	bf14      	ite	ne
 8001368:	2301      	movne	r3, #1
 800136a:	2300      	moveq	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	71fb      	strb	r3, [r7, #7]

  HAL_EXTI_ClearPending(&hexti_lcd_te, EXTI_TRIGGER_RISING_FALLING);
 8001370:	2103      	movs	r1, #3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <LCD_TECallback+0x38>)
 8001374:	f002 fd4c 	bl	8003e10 <HAL_EXTI_ClearPending>

  /* Call BSP_LCD_SignalTearingEffectEvent() */
  BSP_LCD_SignalTearingEffectEvent(0, state, 0);
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2200      	movs	r2, #0
 800137c:	4619      	mov	r1, r3
 800137e:	2000      	movs	r0, #0
 8001380:	f7ff ff0e 	bl	80011a0 <BSP_LCD_SignalTearingEffectEvent>
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000360 	.word	0x20000360

08001390 <LCD_IO_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval int32_t:  Tick value.
  */
static int32_t LCD_IO_GetTick(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 8001396:	f001 fb39 	bl	8002a0c <HAL_GetTick>
 800139a:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 800139c:	687b      	ldr	r3, [r7, #4]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <LCD_IO_Delay>:
  * @brief  LCD IO delay
  * @param  Delay:    Delay in ms
  * @retval int32_t:  Error status
  */
static int32_t LCD_IO_Delay(uint32_t Delay)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f001 fb38 	bl	8002a24 <HAL_Delay>
  return BSP_ERROR_NONE;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <SPI_TxCpltCallback>:

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
static void SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(hspi == &hLCDSPI)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <SPI_TxCpltCallback+0x3c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d111      	bne.n	80013f4 <SPI_TxCpltCallback+0x34>
  {
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 80013d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80013d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d8:	619a      	str	r2, [r3, #24]

    /* Go back to 8-bit mode */
    hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80013e0:	60da      	str	r2, [r3, #12]
    HAL_SPI_Init(hspi);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 fe1a 	bl	800501c <HAL_SPI_Init>
    /* USER CODE BEGIN SPI_TxCpltCallback */

    /* USER CODE END SPI_TxCpltCallback */

    /* Unlock LCD ressources */
    LCD_OS_UnlockFromISR(0);
 80013e8:	2000      	movs	r0, #0
 80013ea:	f000 f915 	bl	8001618 <LCD_OS_UnlockFromISR>

    /* Signal Transfer Done Event */
    BSP_LCD_SignalTransferDone(0);
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff20 	bl	8001234 <BSP_LCD_SignalTransferDone>
  }
}
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000018c 	.word	0x2000018c

08001400 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN LCD_IO_Init 1 */

  /* USER CODE END LCD_IO_Init 1 */

  LCD_RST_LOW();
 800140a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800140e:	2202      	movs	r2, #2
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_Delay(100);
 8001412:	2064      	movs	r0, #100	; 0x64
 8001414:	f001 fb06 	bl	8002a24 <HAL_Delay>
  LCD_RST_HIGH();
 8001418:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800141c:	2202      	movs	r2, #2
 800141e:	619a      	str	r2, [r3, #24]
  HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f001 faff 	bl	8002a24 <HAL_Delay>

  /* turn LCD on = drive pin low (active low) */
  /* Set or Reset the control line */
  LCD_CS_HIGH();
 8001426:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800142a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142e:	619a      	str	r2, [r3, #24]
  LCD_DC_HIGH();
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <LCD_IO_Init+0x6c>)
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	629a      	str	r2, [r3, #40]	; 0x28

  ret = LCD_SPI_Init();
 8001438:	f7ff fa84 	bl	8000944 <BSP_SPI1_Init>
 800143c:	6078      	str	r0, [r7, #4]

  if(ret == BSP_ERROR_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10e      	bne.n	8001462 <LCD_IO_Init+0x62>
  {
    /* Register TE event IRQ handler */
    HAL_EXTI_GetHandle(&hexti_lcd_te, LCD_TE_GPIO_LINE);
 8001444:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8001448:	4809      	ldr	r0, [pc, #36]	; (8001470 <LCD_IO_Init+0x70>)
 800144a:	f002 fc9d 	bl	8003d88 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hexti_lcd_te, HAL_EXTI_COMMON_CB_ID, LCD_TECallback);
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <LCD_IO_Init+0x74>)
 8001450:	2100      	movs	r1, #0
 8001452:	4807      	ldr	r0, [pc, #28]	; (8001470 <LCD_IO_Init+0x70>)
 8001454:	f002 fc7e 	bl	8003d54 <HAL_EXTI_RegisterCallback>

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Register SPI Tx Complete Callback */
    HAL_SPI_RegisterCallback(&hLCDSPI, HAL_SPI_TX_COMPLETE_CB_ID, SPI_TxCpltCallback);
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <LCD_IO_Init+0x78>)
 800145a:	2100      	movs	r1, #0
 800145c:	4807      	ldr	r0, [pc, #28]	; (800147c <LCD_IO_Init+0x7c>)
 800145e:	f003 ff01 	bl	8005264 <HAL_SPI_RegisterCallback>

  /* USER CODE BEGIN LCD_IO_Init 2 */

  /* USER CODE END LCD_IO_Init 2 */

  return ret;
 8001462:	687b      	ldr	r3, [r7, #4]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	48000400 	.word	0x48000400
 8001470:	20000360 	.word	0x20000360
 8001474:	08001355 	.word	0x08001355
 8001478:	080013c1 	.word	0x080013c1
 800147c:	2000018c 	.word	0x2000018c

08001480 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]

  ret = LCD_SPI_DeInit();
 800148a:	f7ff fa95 	bl	80009b8 <BSP_SPI1_DeInit>
 800148e:	6078      	str	r0, [r7, #4]

  return ret;
 8001490:	687b      	ldr	r3, [r7, #4]
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <LCD_IO_WriteReg>:
  * @param  Reg    Register to be written
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_WriteReg(volatile uint8_t *Reg, uint32_t Length)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 80014aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28

  LCD_DC_HIGH();
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <LCD_IO_WriteReg+0x4c>)
 80014b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28

  ret = LCD_SPI_Send((uint8_t *)Reg, Length);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fa9c 	bl	8000a00 <BSP_SPI1_Send>
 80014c8:	60f8      	str	r0, [r7, #12]

  LCD_DC_LOW();
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <LCD_IO_WriteReg+0x4c>)
 80014cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014d0:	619a      	str	r2, [r3, #24]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 80014d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80014d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014da:	619a      	str	r2, [r3, #24]

  return ret;
 80014dc:	68fb      	ldr	r3, [r7, #12]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	48000400 	.word	0x48000400

080014ec <LCD_IO_ReadReg>:
  * @param  Reg    Register to be read
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(volatile uint8_t *Reg, uint32_t Length)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_ReadReg */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80014f6:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_ReadReg */
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
 800150e:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 8001514:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800151c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send(pData, Length);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4619      	mov	r1, r3
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fa6b 	bl	8000a00 <BSP_SPI1_Send>
 800152a:	60f8      	str	r0, [r7, #12]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800152c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001534:	619a      	str	r2, [r3, #24]

  return ret;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <LCD_IO_SendDataDMA>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 800154e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001556:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send Data */
  ret = LCD_SPI_Send_DMA(pData, Length);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fa86 	bl	8000a70 <BSP_SPI1_Send_DMA>
 8001564:	60f8      	str	r0, [r7, #12]

  return ret;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LCD_IO_RecvData>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvData(uint8_t *pData, uint32_t Length)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]

  /* Select : Chip Select low */
  LCD_CS_LOW();
 800157e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001586:	629a      	str	r2, [r3, #40]	; 0x28

  LCD_DC_HIGH();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <LCD_IO_RecvData+0x54>)
 800158a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800158e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Write Register to read */
  ret = LCD_SPI_Send(pData, 1);
 8001590:	2101      	movs	r1, #1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff fa34 	bl	8000a00 <BSP_SPI1_Send>
 8001598:	60f8      	str	r0, [r7, #12]

  LCD_DC_LOW();
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <LCD_IO_RecvData+0x54>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	619a      	str	r2, [r3, #24]

  /* Receive the Data */
  ret = LCD_SPI_Recv(pData, Length);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4619      	mov	r1, r3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff fa45 	bl	8000a38 <BSP_SPI1_Recv>
 80015ae:	60f8      	str	r0, [r7, #12]

  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 80015b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b8:	619a      	str	r2, [r3, #24]

  return ret;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	48000400 	.word	0x48000400

080015c8 <LCD_IO_RecvDataDMA>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvDataDMA(uint8_t *pData, uint32_t Length)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_RecvDataDMA */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80015d2:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_RecvDataDMA */
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <LCD_OS_Initialize>:
  * @brief  Initialize the LCD OS ressources.
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_Initialize(uint32_t Instance)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e006      	b.n	8001600 <LCD_OS_Initialize+0x1c>
  {
    lcd_sem[i] = 0;
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <LCD_OS_Initialize+0x30>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	3301      	adds	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f5      	beq.n	80015f2 <LCD_OS_Initialize+0xe>
  }
  return LCD_OS_ERROR_NONE;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	200003f0 	.word	0x200003f0

08001618 <LCD_OS_UnlockFromISR>:
  * @brief  Safe unlock the LCD ressources in interrupt context.
  * @param  Instance LCD Instance
  * @retval LCD_OS_Error_t
  */
uint8_t LCD_OS_UnlockFromISR(uint32_t Instance)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  lcd_sem[Instance] = 0;
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <LCD_OS_UnlockFromISR+0x20>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
  return LCD_OS_ERROR_NONE;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	200003f0 	.word	0x200003f0

0800163c <BSP_MEM_Init>:
  * @brief  Initializes the External Memory.
  * @param  Instance:     External Memory Instance.
  * @retval int32_t:      BSP status.
  */
int32_t BSP_MEM_Init(uint32_t Instance)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001644:	f06f 030a 	mvn.w	r3, #10
 8001648:	60fb      	str	r3, [r7, #12]

  BSP_MEM_CHECK_PARAMS(Instance);

  /* MEM OS Initialize */
  if(MEM_OS_Initialize(0) != MEM_OS_ERROR_NONE)
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f8d6 	bl	80017fc <MEM_OS_Initialize>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <BSP_MEM_Init+0x22>
  {
    ret = BSP_ERROR_NO_INIT;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	e009      	b.n	8001672 <BSP_MEM_Init+0x36>
  }
  else
  {
    /* Reset Handlers */
    MemCompObj = NULL;
 800165e:	4b07      	ldr	r3, [pc, #28]	; (800167c <BSP_MEM_Init+0x40>)
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
    MemDrv = NULL;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <BSP_MEM_Init+0x44>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

    ret = MEM_Probe(Instance);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f814 	bl	8001698 <MEM_Probe>
 8001670:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001672:	68fb      	ldr	r3, [r7, #12]
}
 8001674:	4618      	mov	r0, r3
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200003f4 	.word	0x200003f4
 8001680:	200003f8 	.word	0x200003f8

08001684 <BSP_MEM_SignalTransferDone>:
/**
  * @brief  Signal Transfer Event Done.
  * @param  Instance:     External Memory Instance.
  */
__WEAK void BSP_MEM_SignalTransferDone(uint32_t Instance)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* This is the user's Callback to be implemented at the application level */
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <MEM_Probe>:
  * @brief  Register Bus IOs for instance 0 if MX25L6433F ID is OK
  * @param  Instance:     External Memory Instance.
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_Probe(uint32_t Instance)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  uint32_t id = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]

  /* Configure the lcd driver : map to MEM_IO function*/
  IOCtx.Init              = MEM_IO_Init;
 80016a8:	4b29      	ldr	r3, [pc, #164]	; (8001750 <MEM_Probe+0xb8>)
 80016aa:	4a2a      	ldr	r2, [pc, #168]	; (8001754 <MEM_Probe+0xbc>)
 80016ac:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit            = MEM_IO_DeInit;
 80016ae:	4b28      	ldr	r3, [pc, #160]	; (8001750 <MEM_Probe+0xb8>)
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <MEM_Probe+0xc0>)
 80016b2:	605a      	str	r2, [r3, #4]
  IOCtx.SendData          = 0;
 80016b4:	4b26      	ldr	r3, [pc, #152]	; (8001750 <MEM_Probe+0xb8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  IOCtx.SendDataDMA       = 0;
 80016ba:	4b25      	ldr	r3, [pc, #148]	; (8001750 <MEM_Probe+0xb8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  IOCtx.RecvData          = 0;
 80016c0:	4b23      	ldr	r3, [pc, #140]	; (8001750 <MEM_Probe+0xb8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  IOCtx.RecvDataDMA       = 0;
 80016c6:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MEM_Probe+0xb8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]

  /* Set Base Address */
  IOCtx.Address           = MEM_BASE_ADDRESS;
 80016cc:	4b20      	ldr	r3, [pc, #128]	; (8001750 <MEM_Probe+0xb8>)
 80016ce:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 80016d2:	609a      	str	r2, [r3, #8]

  /* Register OSPI handle */
  ObjCtx.handle           = &hMEMSPI;
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <MEM_Probe+0xc4>)
 80016d6:	4a22      	ldr	r2, [pc, #136]	; (8001760 <MEM_Probe+0xc8>)
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset Initialization state */
  ObjCtx.IsInitialized = 0;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MEM_Probe+0xc4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

  /* Register the BusIO Driver */
  if(MX25L6433F_RegisterBusIO(&ObjCtx, &IOCtx) != MX25L6433F_OK)
 80016e2:	491b      	ldr	r1, [pc, #108]	; (8001750 <MEM_Probe+0xb8>)
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <MEM_Probe+0xc4>)
 80016e6:	f000 fcc4 	bl	8002072 <MX25L6433F_RegisterBusIO>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <MEM_Probe+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80016f0:	f06f 0304 	mvn.w	r3, #4
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e025      	b.n	8001744 <MEM_Probe+0xac>
  }
  else
  {
    /* Set MEM component object */
    MemCompObj = &ObjCtx;
 80016f8:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <MEM_Probe+0xcc>)
 80016fa:	4a18      	ldr	r2, [pc, #96]	; (800175c <MEM_Probe+0xc4>)
 80016fc:	601a      	str	r2, [r3, #0]

    /* Check for Device ID */
    if((MX25L6433F_MEM_Driver.ReadID(MemCompObj, &id) == MX25L6433F_OK) && (id == MX25L6433F_ID))
 80016fe:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MEM_Probe+0xd0>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	4a18      	ldr	r2, [pc, #96]	; (8001764 <MEM_Probe+0xcc>)
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	f107 0108 	add.w	r1, r7, #8
 800170a:	4610      	mov	r0, r2
 800170c:	4798      	blx	r3
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d114      	bne.n	800173e <MEM_Probe+0xa6>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4a15      	ldr	r2, [pc, #84]	; (800176c <MEM_Probe+0xd4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d110      	bne.n	800173e <MEM_Probe+0xa6>
    {
      /* Initialize the memory driver */
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MEM_Probe+0xd0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a10      	ldr	r2, [pc, #64]	; (8001764 <MEM_Probe+0xcc>)
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	4610      	mov	r0, r2
 8001726:	4798      	blx	r3
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d103      	bne.n	8001736 <MEM_Probe+0x9e>
      {
        MemDrv = (MEM_Drv_t *)&MX25L6433F_MEM_Driver;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MEM_Probe+0xd8>)
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <MEM_Probe+0xd0>)
 8001732:	601a      	str	r2, [r3, #0]
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 8001734:	e006      	b.n	8001744 <MEM_Probe+0xac>
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8001736:	f06f 0304 	mvn.w	r3, #4
 800173a:	60fb      	str	r3, [r7, #12]
      if(MX25L6433F_MEM_Driver.Init(MemCompObj) == MX25L6433F_OK)
 800173c:	e002      	b.n	8001744 <MEM_Probe+0xac>
      }
    }
    else
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800173e:	f06f 0306 	mvn.w	r3, #6
 8001742:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001744:	68fb      	ldr	r3, [r7, #12]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003fc 	.word	0x200003fc
 8001754:	080017a9 	.word	0x080017a9
 8001758:	080017e1 	.word	0x080017e1
 800175c:	2000041c 	.word	0x2000041c
 8001760:	20000100 	.word	0x20000100
 8001764:	200003f4 	.word	0x200003f4
 8001768:	08007480 	.word	0x08007480
 800176c:	001720c2 	.word	0x001720c2
 8001770:	200003f8 	.word	0x200003f8

08001774 <SPI_RxCpltCallback>:
  /**
  * @brief  Transfer Read Complete CallBack
  * @param  hspi SPI Handler
  */
static void SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(hspi == ObjCtx.handle)
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <SPI_RxCpltCallback+0x30>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	687a      	ldr	r2, [r7, #4]
 8001782:	429a      	cmp	r2, r3
 8001784:	d10a      	bne.n	800179c <SPI_RxCpltCallback+0x28>
  {
    /* Set the nCS */
    MEM_CS_HIGH();
 8001786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800178a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178e:	619a      	str	r2, [r3, #24]

    /* Unlock MEM ressources */
    MEM_OS_UnlockFromISR(0);
 8001790:	2000      	movs	r0, #0
 8001792:	f000 f84d 	bl	8001830 <MEM_OS_UnlockFromISR>

    /* Signal Transfer Done Event */
    BSP_MEM_SignalTransferDone(0);
 8001796:	2000      	movs	r0, #0
 8001798:	f7ff ff74 	bl	8001684 <BSP_MEM_SignalTransferDone>
  }
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000041c 	.word	0x2000041c

080017a8 <MEM_IO_Init>:
  * @brief  Initializes MEM low level.
  * @param  None
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_IO_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	607b      	str	r3, [r7, #4]

  ret = MEM_SPI_Init();
 80017b2:	f7fe fff9 	bl	80007a8 <BSP_SPI2_Init>
 80017b6:	6078      	str	r0, [r7, #4]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if(ret == BSP_ERROR_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d106      	bne.n	80017cc <MEM_IO_Init+0x24>
  {
    HAL_SPI_RegisterCallback((SPI_HandleTypeDef *)ObjCtx.handle, HAL_SPI_RX_COMPLETE_CB_ID, SPI_RxCpltCallback);
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MEM_IO_Init+0x30>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	4a06      	ldr	r2, [pc, #24]	; (80017dc <MEM_IO_Init+0x34>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f003 fd4c 	bl	8005264 <HAL_SPI_RegisterCallback>
  }
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  return ret;
 80017cc:	687b      	ldr	r3, [r7, #4]
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000041c 	.word	0x2000041c
 80017dc:	08001775 	.word	0x08001775

080017e0 <MEM_IO_DeInit>:
  * @brief  DeInitializes MEM low level
  * @param  None
  * @retval int32_t:      BSP status.
  */
static int32_t MEM_IO_DeInit(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]

  ret = MEM_SPI_DeInit();
 80017ea:	f7ff f817 	bl	800081c <BSP_SPI2_DeInit>
 80017ee:	6078      	str	r0, [r7, #4]

  return ret;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <MEM_OS_Initialize>:
  * @brief  Initialize the MEM OS ressources.
  * @param  Instance MEM Instance
  * @retval MEM_OS_Error_t
  */
uint8_t MEM_OS_Initialize(uint32_t Instance)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint8_t i;
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e006      	b.n	8001818 <MEM_OS_Initialize+0x1c>
  {
    mem_sem[i] = 0;
 800180a:	7bfb      	ldrb	r3, [r7, #15]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <MEM_OS_Initialize+0x30>)
 800180e:	2100      	movs	r1, #0
 8001810:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < MEM_INSTANCES_NBR; i++)
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	3301      	adds	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f5      	beq.n	800180a <MEM_OS_Initialize+0xe>
  }
  return MEM_OS_ERROR_NONE;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	20000444 	.word	0x20000444

08001830 <MEM_OS_UnlockFromISR>:
  * @brief  Safe unlock the MEM ressources in interrupt context.
  * @param  Instance MEM Instance
  * @retval MEM_OS_Error_t
  */
uint8_t MEM_OS_UnlockFromISR(uint32_t Instance)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  mem_sem[Instance] = 0;
 8001838:	4a05      	ldr	r2, [pc, #20]	; (8001850 <MEM_OS_UnlockFromISR+0x20>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
  return MEM_OS_ERROR_NONE;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	20000444 	.word	0x20000444

08001854 <ILI9341_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ILI9341_RegisterBusIO (ILI9341_Object_t *pObj, ILI9341_IO_t *pIO)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <ILI9341_RegisterBusIO+0x18>
  {
    ret = ILI9341_ERROR;
 8001864:	f04f 33ff 	mov.w	r3, #4294967295
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	e048      	b.n	80018fe <ILI9341_RegisterBusIO+0xaa>
  }
  else
  {
    pObj->IO.Init         = pIO->Init;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address      = pIO->Address;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	891a      	ldrh	r2, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg     = pIO->WriteReg;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg      = pIO->ReadReg;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData     = pIO->SendData;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	695a      	ldr	r2, [r3, #20]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	615a      	str	r2, [r3, #20]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	619a      	str	r2, [r3, #24]
    pObj->IO.RecvData     = pIO->RecvData;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	61da      	str	r2, [r3, #28]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	6a1a      	ldr	r2, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	621a      	str	r2, [r3, #32]
    pObj->IO.GetTick      = pIO->GetTick;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24

    pObj->Ctx.ReadReg     = ILI9341_ReadRegWrap;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a12      	ldr	r2, [pc, #72]	; (8001908 <ILI9341_RegisterBusIO+0xb4>)
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30
    pObj->Ctx.WriteReg    = ILI9341_WriteRegWrap;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a11      	ldr	r2, [pc, #68]	; (800190c <ILI9341_RegisterBusIO+0xb8>)
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.SendData    = ILI9341_SendDataWrap;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a11      	ldr	r2, [pc, #68]	; (8001910 <ILI9341_RegisterBusIO+0xbc>)
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
    pObj->Ctx.SendDataDMA = ILI9341_SendDataDMAWrap;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <ILI9341_RegisterBusIO+0xc0>)
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
    pObj->Ctx.RecvData    = ILI9341_RecvDataWrap;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a10      	ldr	r2, [pc, #64]	; (8001918 <ILI9341_RegisterBusIO+0xc4>)
 80018d8:	63da      	str	r2, [r3, #60]	; 0x3c
    pObj->Ctx.RecvDataDMA = ILI9341_RecvDataDMAWrap;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <ILI9341_RegisterBusIO+0xc8>)
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
    pObj->Ctx.handle      = pObj;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44

    if(pObj->IO.Init != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <ILI9341_RegisterBusIO+0xa4>
    {
      ret = pObj->IO.Init();
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4798      	blx	r3
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	e002      	b.n	80018fe <ILI9341_RegisterBusIO+0xaa>
    }
    else
    {
      ret = ILI9341_ERROR;
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
 80018fc:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80018fe:	68fb      	ldr	r3, [r7, #12]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	08001efb 	.word	0x08001efb
 800190c:	08001f1f 	.word	0x08001f1f
 8001910:	08001f43 	.word	0x08001f43
 8001914:	08001f67 	.word	0x08001f67
 8001918:	08001f8b 	.word	0x08001f8b
 800191c:	08001faf 	.word	0x08001faf

08001920 <ILI9341_Init>:
  * @param  pObj Component object
  * @param  pInitParams Initialization Parameters
  * @retval Component status
  */
int32_t ILI9341_Init(ILI9341_Object_t *pObj, ILI9341_InitParams_t* pInitParams)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af02      	add	r7, sp, #8
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint8_t i;
  uint8_t __IO parameter[4];
  uint8_t __IO reg;
  int32_t ret = ILI9341_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]

  if((pObj == NULL) || (pInitParams->Orientation > ILI9341_ORIENTATION_LANDSCAPE_ROT180))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <ILI9341_Init+0x1c>
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d903      	bls.n	8001944 <ILI9341_Init+0x24>
  {
    ret = ILI9341_ERROR;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e164      	b.n	8001c0e <ILI9341_Init+0x2ee>
  }
  else if (pObj->IsInitialized == 0)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 815f 	bne.w	8001c0e <ILI9341_Init+0x2ee>
  {
    pObj->IsInitialized = 1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Sleep In Command */
    reg = ILI9341_SPLIN;
 8001958:	2310      	movs	r3, #16
 800195a:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	332c      	adds	r3, #44	; 0x2c
 8001960:	f107 010b 	add.w	r1, r7, #11
 8001964:	2201      	movs	r2, #1
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fb4d 	bl	8002006 <ili9341_write_reg>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	4413      	add	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
    /* Wait for 10ms */
    ILI9341_Delay(pObj, 10);
 8001974:	210a      	movs	r1, #10
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 fb2b 	bl	8001fd2 <ILI9341_Delay>

    /* SW Reset Command */
    reg = ILI9341_SWRESET;
 800197c:	2301      	movs	r3, #1
 800197e:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	332c      	adds	r3, #44	; 0x2c
 8001984:	f107 010b 	add.w	r1, r7, #11
 8001988:	2201      	movs	r2, #1
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fb3b 	bl	8002006 <ili9341_write_reg>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4413      	add	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
    /* Wait for 200ms */
    ILI9341_Delay(pObj, 200);
 8001998:	21c8      	movs	r1, #200	; 0xc8
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 fb19 	bl	8001fd2 <ILI9341_Delay>

    /* Sleep Out Command */
    reg = ILI9341_SLEEP_OUT;
 80019a0:	2311      	movs	r3, #17
 80019a2:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	332c      	adds	r3, #44	; 0x2c
 80019a8:	f107 010b 	add.w	r1, r7, #11
 80019ac:	2201      	movs	r2, #1
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 fb29 	bl	8002006 <ili9341_write_reg>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4413      	add	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
    ILI9341_Delay(pObj, 200);
 80019bc:	21c8      	movs	r1, #200	; 0xc8
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 fb07 	bl	8001fd2 <ILI9341_Delay>

    if(pInitParams->SwapRB)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <ILI9341_Init+0xd2>
    {
      for(i = 0; i < 4; i++)
 80019cc:	2300      	movs	r3, #0
 80019ce:	75fb      	strb	r3, [r7, #23]
 80019d0:	e00c      	b.n	80019ec <ILI9341_Init+0xcc>
      {
        OrientationTab[i] |= 0x08;
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	4a93      	ldr	r2, [pc, #588]	; (8001c24 <ILI9341_Init+0x304>)
 80019d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	f042 0208 	orr.w	r2, r2, #8
 80019e0:	4990      	ldr	r1, [pc, #576]	; (8001c24 <ILI9341_Init+0x304>)
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for(i = 0; i < 4; i++)
 80019e6:	7dfb      	ldrb	r3, [r7, #23]
 80019e8:	3301      	adds	r3, #1
 80019ea:	75fb      	strb	r3, [r7, #23]
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d9ef      	bls.n	80019d2 <ILI9341_Init+0xb2>
      }
    }

    /* Set Display Orientation */
    ret += ILI9341_SetOrientation(pObj, pInitParams->Orientation);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f977 	bl	8001cec <ILI9341_SetOrientation>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4413      	add	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]

    /* Set Full Screen Display Window */
    ret += ILI9341_SetDisplayWindow(pObj, 0U, 0U, ILI9341_WIDTH, ILI9341_HEIGHT);
 8001a06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	23f0      	movs	r3, #240	; 0xf0
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2100      	movs	r1, #0
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f9f2 	bl	8001dfc <ILI9341_SetDisplayWindow>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    /* Set Pixel Format */
    reg = ILI9341_PIXEL_FORMAT;
 8001a20:	233a      	movs	r3, #58	; 0x3a
 8001a22:	72fb      	strb	r3, [r7, #11]
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	733b      	strb	r3, [r7, #12]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	332c      	adds	r3, #44	; 0x2c
 8001a30:	f107 010b 	add.w	r1, r7, #11
 8001a34:	2201      	movs	r2, #1
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 fae5 	bl	8002006 <ili9341_write_reg>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4413      	add	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	332c      	adds	r3, #44	; 0x2c
 8001a48:	f107 010c 	add.w	r1, r7, #12
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 faeb 	bl	800202a <ili9341_send_data>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	4413      	add	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]

    /* Frame Rate Control in normal mode */
    reg = ILI9341_FRMCTR1;
 8001a5c:	23b1      	movs	r3, #177	; 0xb1
 8001a5e:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x00; /* fosc/1 */
 8001a60:	2300      	movs	r3, #0
 8001a62:	733b      	strb	r3, [r7, #12]
    parameter[1] = 0x1F; /* Default is 61 Hz */
 8001a64:	231f      	movs	r3, #31
 8001a66:	737b      	strb	r3, [r7, #13]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	332c      	adds	r3, #44	; 0x2c
 8001a6c:	f107 010b 	add.w	r1, r7, #11
 8001a70:	2201      	movs	r2, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fac7 	bl	8002006 <ili9341_write_reg>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	332c      	adds	r3, #44	; 0x2c
 8001a84:	f107 010c 	add.w	r1, r7, #12
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 facd 	bl	800202a <ili9341_send_data>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]

    // Display Normal mode
    reg = ILI9341_NORMAL_MODE_ON;
 8001a98:	2313      	movs	r3, #19
 8001a9a:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	332c      	adds	r3, #44	; 0x2c
 8001aa0:	f107 010b 	add.w	r1, r7, #11
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 faad 	bl	8002006 <ili9341_write_reg>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]

    // Update Interface control
    reg = ILI9341_INTERFACE;
 8001ab4:	23f6      	movs	r3, #246	; 0xf6
 8001ab6:	72fb      	strb	r3, [r7, #11]
    ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	332c      	adds	r3, #44	; 0x2c
 8001abc:	f107 010b 	add.w	r1, r7, #11
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fa9f 	bl	8002006 <ili9341_write_reg>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4413      	add	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
    if(pInitParams->SwapRB)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <ILI9341_Init+0x1be>
    {
      parameter[0] = 0x49;
 8001ad8:	2349      	movs	r3, #73	; 0x49
 8001ada:	733b      	strb	r3, [r7, #12]
 8001adc:	e001      	b.n	8001ae2 <ILI9341_Init+0x1c2>
    }
    else
    {
      parameter[0] = 0x48;
 8001ade:	2348      	movs	r3, #72	; 0x48
 8001ae0:	733b      	strb	r3, [r7, #12]
    }
    parameter[1] = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	737b      	strb	r3, [r7, #13]
    if(pInitParams->Endian == ILI9341_ENDIAN_LITTLE)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <ILI9341_Init+0x1d4>
    {
      parameter[2] = 0x20;
 8001aee:	2320      	movs	r3, #32
 8001af0:	73bb      	strb	r3, [r7, #14]
 8001af2:	e001      	b.n	8001af8 <ILI9341_Init+0x1d8>
    }
    else
    {
      parameter[2] = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	73bb      	strb	r3, [r7, #14]
    }
    ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 3);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	332c      	adds	r3, #44	; 0x2c
 8001afc:	f107 010c 	add.w	r1, r7, #12
 8001b00:	2203      	movs	r2, #3
 8001b02:	4618      	mov	r0, r3
 8001b04:	f000 fa91 	bl	800202a <ili9341_send_data>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(pInitParams->TEMode == ILI9341_TE_MODE_1)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	7d1b      	ldrb	r3, [r3, #20]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d13c      	bne.n	8001b92 <ILI9341_Init+0x272>
    {
      // Set TE scan line
      reg = ILI9341_SET_TEAR_SCANLINE;
 8001b18:	2344      	movs	r3, #68	; 0x44
 8001b1a:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	332c      	adds	r3, #44	; 0x2c
 8001b20:	f107 010b 	add.w	r1, r7, #11
 8001b24:	2201      	movs	r2, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fa6d 	bl	8002006 <ili9341_write_reg>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4413      	add	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      parameter[0] = (pInitParams->TEScanline & 0x100);
 8001b34:	2300      	movs	r3, #0
 8001b36:	733b      	strb	r3, [r7, #12]
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	737b      	strb	r3, [r7, #13]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	332c      	adds	r3, #44	; 0x2c
 8001b44:	f107 010c 	add.w	r1, r7, #12
 8001b48:	2202      	movs	r2, #2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fa6d 	bl	800202a <ili9341_send_data>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4413      	add	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

      // Enable TE
      reg = ILI9341_TEON;
 8001b58:	2335      	movs	r3, #53	; 0x35
 8001b5a:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	332c      	adds	r3, #44	; 0x2c
 8001b60:	f107 010b 	add.w	r1, r7, #11
 8001b64:	2201      	movs	r2, #1
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 fa4d 	bl	8002006 <ili9341_write_reg>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]
      parameter[0] = 0; /* VSYNC Only */
 8001b74:	2300      	movs	r3, #0
 8001b76:	733b      	strb	r3, [r7, #12]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	332c      	adds	r3, #44	; 0x2c
 8001b7c:	f107 010c 	add.w	r1, r7, #12
 8001b80:	2201      	movs	r2, #1
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fa51 	bl	800202a <ili9341_send_data>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	e03d      	b.n	8001c0e <ILI9341_Init+0x2ee>
    }
    else if(pInitParams->TEMode == ILI9341_TE_MODE_2)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	7d1b      	ldrb	r3, [r3, #20]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d139      	bne.n	8001c0e <ILI9341_Init+0x2ee>
    {
      // Reset TE scan line
      reg = ILI9341_SET_TEAR_SCANLINE;
 8001b9a:	2344      	movs	r3, #68	; 0x44
 8001b9c:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	332c      	adds	r3, #44	; 0x2c
 8001ba2:	f107 010b 	add.w	r1, r7, #11
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f000 fa2c 	bl	8002006 <ili9341_write_reg>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      parameter[0] = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	733b      	strb	r3, [r7, #12]
      parameter[1] = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	737b      	strb	r3, [r7, #13]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	332c      	adds	r3, #44	; 0x2c
 8001bc2:	f107 010c 	add.w	r1, r7, #12
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f000 fa2e 	bl	800202a <ili9341_send_data>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]

      // Enable TE
      reg = ILI9341_TEON;
 8001bd6:	2335      	movs	r3, #53	; 0x35
 8001bd8:	72fb      	strb	r3, [r7, #11]
      ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	332c      	adds	r3, #44	; 0x2c
 8001bde:	f107 010b 	add.w	r1, r7, #11
 8001be2:	2201      	movs	r2, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fa0e 	bl	8002006 <ili9341_write_reg>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
      parameter[0] = 1; /* VSYNC + HSYNC */
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	733b      	strb	r3, [r7, #12]
      ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	332c      	adds	r3, #44	; 0x2c
 8001bfa:	f107 010c 	add.w	r1, r7, #12
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fa12 	bl	800202a <ili9341_send_data>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
    }
  }

  if(ret != ILI9341_OK)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <ILI9341_Init+0x2fa>
  {
    ret = ILI9341_ERROR;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
 8001c18:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8001c1a:	693b      	ldr	r3, [r7, #16]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000058 	.word	0x20000058

08001c28 <ILI9341_DeInit>:
  * @brief  De-Initialize the ili9341 LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ILI9341_DeInit(ILI9341_Object_t *pObj)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return pObj->IO.DeInit();
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4798      	blx	r3
 8001c36:	4603      	mov	r3, r0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ILI9341_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ILI9341_ReadID(ILI9341_Object_t *pObj, uint32_t *Id)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO data[4] = {ILI9341_READ_ID4, 0, 0, 0 };
 8001c4a:	23d3      	movs	r3, #211	; 0xd3
 8001c4c:	60bb      	str	r3, [r7, #8]

  if(ili9341_recv_data(&pObj->Ctx, (uint8_t *)data, 4) != ILI9341_OK)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	332c      	adds	r3, #44	; 0x2c
 8001c52:	f107 0108 	add.w	r1, r7, #8
 8001c56:	2204      	movs	r2, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 f9f8 	bl	800204e <ili9341_recv_data>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <ILI9341_ReadID+0x2c>
  {
    ret = ILI9341_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e014      	b.n	8001c96 <ILI9341_ReadID+0x56>
  }
  else
  {
    *Id = ((*(uint8_t *)&data[1] << 16) | (*(uint8_t *)&data[2] << 8) | *(uint8_t *)&data[3]);
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	3301      	adds	r3, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	021b      	lsls	r3, r3, #8
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f107 0208 	add.w	r2, r7, #8
 8001c86:	3203      	adds	r2, #3
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	601a      	str	r2, [r3, #0]
    ret = ILI9341_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <ILI9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOn(ILI9341_Object_t *pObj)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ILI9341_DISPLAY_ON;
 8001ca8:	2329      	movs	r3, #41	; 0x29
 8001caa:	73fb      	strb	r3, [r7, #15]

  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	332c      	adds	r3, #44	; 0x2c
 8001cb0:	f107 010f 	add.w	r1, r7, #15
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f9a5 	bl	8002006 <ili9341_write_reg>
 8001cbc:	4603      	mov	r3, r0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <ILI9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ILI9341_DisplayOff(ILI9341_Object_t *pObj)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ILI9341_DISPLAY_OFF;
 8001cce:	2328      	movs	r3, #40	; 0x28
 8001cd0:	73fb      	strb	r3, [r7, #15]

  return ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	332c      	adds	r3, #44	; 0x2c
 8001cd6:	f107 010f 	add.w	r1, r7, #15
 8001cda:	2201      	movs	r2, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f992 	bl	8002006 <ili9341_write_reg>
 8001ce2:	4603      	mov	r3, r0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <ILI9341_SetOrientation>:
  * @param  Orientation ILI9341_ORIENTATION_PORTRAIT, ILI9341_ORIENTATION_PORTRAIT_ROT180
  *                     ILI9341_ORIENTATION_LANDSCAPE or ILI9341_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ILI9341_SetOrientation(ILI9341_Object_t *pObj, uint32_t Orientation)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO parameter;
  uint8_t __IO reg;

  parameter = (uint8_t)OrientationTab[Orientation];
 8001cf6:	4a24      	ldr	r2, [pc, #144]	; (8001d88 <ILI9341_SetOrientation+0x9c>)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	72fb      	strb	r3, [r7, #11]
  reg = ILI9341_MAC;
 8001d02:	2336      	movs	r3, #54	; 0x36
 8001d04:	72bb      	strb	r3, [r7, #10]
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	332c      	adds	r3, #44	; 0x2c
 8001d0a:	f107 010a 	add.w	r1, r7, #10
 8001d0e:	2201      	movs	r2, #1
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 f978 	bl	8002006 <ili9341_write_reg>
 8001d16:	60f8      	str	r0, [r7, #12]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)&parameter, 1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	332c      	adds	r3, #44	; 0x2c
 8001d1c:	f107 010b 	add.w	r1, r7, #11
 8001d20:	2201      	movs	r2, #1
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 f981 	bl	800202a <ili9341_send_data>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]

  if(ret == ILI9341_OK)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d11f      	bne.n	8001d76 <ILI9341_SetOrientation+0x8a>
  {
    ILI9341Ctx.Orientation = Orientation;
 8001d36:	4a15      	ldr	r2, [pc, #84]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	6093      	str	r3, [r2, #8]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3b02      	subs	r3, #2

    switch (Orientation)
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d807      	bhi.n	8001d54 <ILI9341_SetOrientation+0x68>
    {
      case ILI9341_ORIENTATION_LANDSCAPE:
      case ILI9341_ORIENTATION_LANDSCAPE_ROT180:
        ILI9341Ctx.Width  = ILI9341_HEIGHT;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d4a:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_WIDTH;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d4e:	22f0      	movs	r2, #240	; 0xf0
 8001d50:	605a      	str	r2, [r3, #4]
      break;
 8001d52:	e007      	b.n	8001d64 <ILI9341_SetOrientation+0x78>
      default:
      case ILI9341_ORIENTATION_PORTRAIT_ROT180:
      case ILI9341_ORIENTATION_PORTRAIT:
        ILI9341Ctx.Width  = ILI9341_WIDTH;
 8001d54:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d56:	22f0      	movs	r2, #240	; 0xf0
 8001d58:	601a      	str	r2, [r3, #0]
        ILI9341Ctx.Height = ILI9341_HEIGHT;
 8001d5a:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d60:	605a      	str	r2, [r3, #4]
      break;
 8001d62:	bf00      	nop
    }

    pObj->XSize = ILI9341Ctx.Width;
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	64da      	str	r2, [r3, #76]	; 0x4c
    pObj->YSize = ILI9341Ctx.Height;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <ILI9341_SetOrientation+0xa0>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	651a      	str	r2, [r3, #80]	; 0x50
 8001d74:	e002      	b.n	8001d7c <ILI9341_SetOrientation+0x90>
  }
  else
  {
    ret = ILI9341_ERROR;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000058 	.word	0x20000058
 8001d8c:	20000448 	.word	0x20000448

08001d90 <ILI9341_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation pointer to the LCD orientation
  * @retval The component status
  */
int32_t ILI9341_GetOrientation(ILI9341_Object_t *pObj, uint32_t *Orientation)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Orientation = ILI9341Ctx.Orientation;
 8001d9a:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <ILI9341_GetOrientation+0x20>)
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20000448 	.word	0x20000448

08001db4 <ILI9341_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ILI9341_GetXSize(ILI9341_Object_t *pObj, uint32_t *XSize)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ILI9341Ctx.Width;
 8001dbe:	4b05      	ldr	r3, [pc, #20]	; (8001dd4 <ILI9341_GetXSize+0x20>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20000448 	.word	0x20000448

08001dd8 <ILI9341_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ILI9341_GetYSize(ILI9341_Object_t *pObj, uint32_t *YSize)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ILI9341Ctx.Height;
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <ILI9341_GetYSize+0x20>)
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	601a      	str	r2, [r3, #0]

  return ILI9341_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	20000448 	.word	0x20000448

08001dfc <ILI9341_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
int32_t ILI9341_SetDisplayWindow(ILI9341_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t __IO parameter[4];
  uint8_t __IO reg = ILI9341_CASET;
 8001e0a:	232a      	movs	r3, #42	; 0x2a
 8001e0c:	75fb      	strb	r3, [r7, #23]

  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	332c      	adds	r3, #44	; 0x2c
 8001e12:	f107 0117 	add.w	r1, r7, #23
 8001e16:	2201      	movs	r2, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 f8f4 	bl	8002006 <ili9341_write_reg>
 8001e1e:	61f8      	str	r0, [r7, #28]
  parameter [0] = (uint8_t)(Xpos >> 8U);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	3b01      	subs	r3, #1
 8001e36:	0a1b      	lsrs	r3, r3, #8
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4413      	add	r3, r2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	76fb      	strb	r3, [r7, #27]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	332c      	adds	r3, #44	; 0x2c
 8001e52:	f107 0118 	add.w	r1, r7, #24
 8001e56:	2204      	movs	r2, #4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 f8e6 	bl	800202a <ili9341_send_data>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	61fb      	str	r3, [r7, #28]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  reg = ILI9341_RASET;
 8001e66:	232b      	movs	r3, #43	; 0x2b
 8001e68:	75fb      	strb	r3, [r7, #23]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	332c      	adds	r3, #44	; 0x2c
 8001e6e:	f107 0117 	add.w	r1, r7, #23
 8001e72:	2201      	movs	r2, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f8c6 	bl	8002006 <ili9341_write_reg>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	61fb      	str	r3, [r7, #28]
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e94:	4413      	add	r3, r2
 8001e96:	3b01      	subs	r3, #1
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	76fb      	strb	r3, [r7, #27]
  ret += ili9341_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	332c      	adds	r3, #44	; 0x2c
 8001eb4:	f107 0118 	add.w	r1, r7, #24
 8001eb8:	2204      	movs	r2, #4
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f8b5 	bl	800202a <ili9341_send_data>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	61fb      	str	r3, [r7, #28]

  reg = ILI9341_GRAM;
 8001ec8:	232c      	movs	r3, #44	; 0x2c
 8001eca:	75fb      	strb	r3, [r7, #23]
  ret += ili9341_write_reg(&pObj->Ctx, &reg, 1);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	332c      	adds	r3, #44	; 0x2c
 8001ed0:	f107 0117 	add.w	r1, r7, #23
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f895 	bl	8002006 <ili9341_write_reg>
 8001edc:	4602      	mov	r2, r0
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	61fb      	str	r3, [r7, #28]

  if(ret != ILI9341_OK)
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <ILI9341_SetDisplayWindow+0xf4>
  {
    ret = ILI9341_ERROR;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <ILI9341_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_ReadRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, Length);
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	68b8      	ldr	r0, [r7, #8]
 8001f12:	4798      	blx	r3
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <ILI9341_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ILI9341_WriteRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b086      	sub	sp, #24
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, Length);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	68b8      	ldr	r0, [r7, #8]
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <ILI9341_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	68b8      	ldr	r0, [r7, #8]
 8001f5a:	4798      	blx	r3
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <ILI9341_SendDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_SendDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b086      	sub	sp, #24
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendDataDMA(pData, Length);
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	68b8      	ldr	r0, [r7, #8]
 8001f7e:	4798      	blx	r3
 8001f80:	4603      	mov	r3, r0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <ILI9341_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	68b8      	ldr	r0, [r7, #8]
 8001fa2:	4798      	blx	r3
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <ILI9341_RecvDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ILI9341_RecvDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  ILI9341_Object_t *pObj = (ILI9341_Object_t *)Handle;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvDataDMA(pData, Length);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	4798      	blx	r3
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ILI9341_Delay>:
  * @brief  ILI9341 delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ILI9341_Delay(ILI9341_Object_t *pObj, uint32_t Delay)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	4798      	blx	r3
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001fe6:	bf00      	nop
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	4798      	blx	r3
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d8f5      	bhi.n	8001fe8 <ILI9341_Delay+0x16>
  {
  }
  return ILI9341_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <ili9341_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t ili9341_write_reg(ili9341_ctx_t *ctx, volatile uint8_t* reg, uint32_t length)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
  return ctx->WriteReg(ctx->handle, reg, length);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	6990      	ldr	r0, [r2, #24]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	68b9      	ldr	r1, [r7, #8]
 800201e:	4798      	blx	r3
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <ili9341_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t ili9341_send_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	6990      	ldr	r0, [r2, #24]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	4798      	blx	r3
 8002044:	4603      	mov	r3, r0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <ili9341_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t ili9341_recv_data(ili9341_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b084      	sub	sp, #16
 8002052:	af00      	add	r7, sp, #0
 8002054:	60f8      	str	r0, [r7, #12]
 8002056:	60b9      	str	r1, [r7, #8]
 8002058:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	6990      	ldr	r0, [r2, #24]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	4798      	blx	r3
 8002068:	4603      	mov	r3, r0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <MX25L6433F_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Memory status
  */
int32_t MX25L6433F_RegisterBusIO(MX25L6433F_Object_t *pObj, MX25L6433F_IO_t *pIO)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <MX25L6433F_RegisterBusIO+0x1c>
  {
    ret = MX25L6433F_ERROR;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e02b      	b.n	80020e6 <MX25L6433F_RegisterBusIO+0x74>
  }
  else
  {
    pObj->IO.Init         = pIO->Init;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	605a      	str	r2, [r3, #4]
    pObj->IO.Address      = pIO->Address;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
    pObj->IO.SendData     = pIO->SendData;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60da      	str	r2, [r3, #12]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
    pObj->IO.RecvData     = pIO->RecvData;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	695a      	ldr	r2, [r3, #20]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	615a      	str	r2, [r3, #20]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	699a      	ldr	r2, [r3, #24]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	619a      	str	r2, [r3, #24]
    pObj->IO.GetTick      = pIO->GetTick;
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	69da      	ldr	r2, [r3, #28]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	61da      	str	r2, [r3, #28]

    if(pObj->IO.Init != NULL)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <MX25L6433F_RegisterBusIO+0x6e>
    {
      ret = pObj->IO.Init();
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4798      	blx	r3
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	e002      	b.n	80020e6 <MX25L6433F_RegisterBusIO+0x74>
    }
    else
    {
      ret = MX25L6433F_ERROR;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80020e6:	68fb      	ldr	r3, [r7, #12]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <MX25L6433F_Init>:
  * @brief  Initialize the MX25L6433F device
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_Init(MX25L6433F_Object_t *pObj)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d103      	bne.n	800210a <MX25L6433F_Init+0x1a>
  {
    ret = MX25L6433F_ERROR;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	e01e      	b.n	8002148 <MX25L6433F_Init+0x58>
  }
  else if (pObj->IsInitialized == 0)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d119      	bne.n	8002148 <MX25L6433F_Init+0x58>
  {
    /* Reset Memory */
    ret = MX25L6433F_ResetEnable(pObj);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fbb7 	bl	8002888 <MX25L6433F_ResetEnable>
 800211a:	60f8      	str	r0, [r7, #12]
    if(ret == MX25L6433F_OK)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d112      	bne.n	8002148 <MX25L6433F_Init+0x58>
    {
      ret = MX25L6433F_ResetMemory(pObj);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fbd3 	bl	80028ce <MX25L6433F_ResetMemory>
 8002128:	60f8      	str	r0, [r7, #12]
      if(ret == MX25L6433F_OK)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <MX25L6433F_Init+0x58>
      {
        ret = MX25L6433F_WriteBurstReadLength(pObj, MX25L6433F_WRAP_AROUND_16BYTE);
 8002130:	2101      	movs	r1, #1
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fb6a 	bl	800280c <MX25L6433F_WriteBurstReadLength>
 8002138:	60f8      	str	r0, [r7, #12]
        if(ret == MX25L6433F_OK)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d103      	bne.n	8002148 <MX25L6433F_Init+0x58>
        {
          pObj->IsInitialized = 1;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2020 	strb.w	r2, [r3, #32]
        }
      }
    }
  }

  return ret;
 8002148:	68fb      	ldr	r3, [r7, #12]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <MX25L6433F_DeInit>:
  * @brief  De-Initialize the MX25L6433F device.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_DeInit(MX25L6433F_Object_t *pObj)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b084      	sub	sp, #16
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <MX25L6433F_DeInit+0x1a>
  {
    ret = MX25L6433F_ERROR;
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	e012      	b.n	8002192 <MX25L6433F_DeInit+0x40>
  }
  else if (pObj->IsInitialized == 1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <MX25L6433F_DeInit+0x40>
  {
    if(pObj->IO.DeInit() == BSP_ERROR_NONE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4798      	blx	r3
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <MX25L6433F_DeInit+0x3a>
    {
      pObj->IsInitialized = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2020 	strb.w	r2, [r3, #32]
 800218a:	e002      	b.n	8002192 <MX25L6433F_DeInit+0x40>
    }
    else
    {
      ret = MX25L6433F_ERROR;
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <MX25L6433F_GetFlashInfo>:
  * @brief  Get Flash information
  * @param  pInfo pointer to information structure
  * @retval Memory status
  */
int32_t MX25L6433F_GetFlashInfo(MX25L6433F_Info_t *pInfo)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25L6433F_FLASH_SIZE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021aa:	601a      	str	r2, [r3, #0]
  pInfo->EraseBlockSize         = MX25L6433F_BLOCK_64K;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021b2:	605a      	str	r2, [r3, #4]
  pInfo->EraseBlocksNumber      = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_64K);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2280      	movs	r2, #128	; 0x80
 80021b8:	609a      	str	r2, [r3, #8]
  pInfo->EraseSubBlockSize      = MX25L6433F_BLOCK_32K;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021c0:	60da      	str	r2, [r3, #12]
  pInfo->EraseSubBlocksNumber   = (MX25L6433F_FLASH_SIZE/MX25L6433F_BLOCK_32K);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021c8:	611a      	str	r2, [r3, #16]
  pInfo->EraseSectorSize        = MX25L6433F_SECTOR_4K;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021d0:	615a      	str	r2, [r3, #20]
  pInfo->EraseSectorsNumber     = (MX25L6433F_FLASH_SIZE/MX25L6433F_SECTOR_4K);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021d8:	619a      	str	r2, [r3, #24]
  pInfo->ProgPageSize           = MX25L6433F_PAGE_SIZE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e0:	61da      	str	r2, [r3, #28]
  pInfo->ProgPagesNumber        = (MX25L6433F_FLASH_SIZE/MX25L6433F_PAGE_SIZE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80021e8:	621a      	str	r2, [r3, #32]

  return MX25L6433F_OK;
 80021ea:	2300      	movs	r3, #0
};
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <MX25L6433F_AutoPollingMemReady>:
  * @brief  This function read the SR of the memory and wait the EOP.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_AutoPollingMemReady(MX25L6433F_Object_t *pObj)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  uint32_t max_timeout = 5000000U;
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <MX25L6433F_AutoPollingMemReady+0x5c>)
 8002206:	613b      	str	r3, [r7, #16]

  //wait until WIP is cleared
  uint8_t status;
  do
  {
    if(MX25L6433F_ReadStatusRegister(pObj, &status) != MX25L6433F_OK)
 8002208:	f107 030f 	add.w	r3, r7, #15
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fac7 	bl	80027a2 <MX25L6433F_ReadStatusRegister>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <MX25L6433F_AutoPollingMemReady+0x28>
    {
      ret = MX25L6433F_ERROR;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	617b      	str	r3, [r7, #20]
    }
    max_timeout--;
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	3b01      	subs	r3, #1
 8002224:	613b      	str	r3, [r7, #16]
  } while ((ret == MX25L6433F_OK) && (max_timeout > 0) && ((status & MX25L6433F_MEMORY_READY_MASK_VALUE) != 0));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d107      	bne.n	800223c <MX25L6433F_AutoPollingMemReady+0x44>
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <MX25L6433F_AutoPollingMemReady+0x44>
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1e5      	bne.n	8002208 <MX25L6433F_AutoPollingMemReady+0x10>

  if(max_timeout == 0)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <MX25L6433F_AutoPollingMemReady+0x50>
  {
    ret = MX25L6433F_ERROR;
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8002248:	697b      	ldr	r3, [r7, #20]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	004c4b40 	.word	0x004c4b40

08002258 <MX25L6433F_Read>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval Memory status
  */
int32_t MX25L6433F_Read(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	460b      	mov	r3, r1
 8002266:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 800226c:	7afb      	ldrb	r3, [r7, #11]
 800226e:	2b04      	cmp	r3, #4
 8002270:	d81b      	bhi.n	80022aa <MX25L6433F_Read+0x52>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <MX25L6433F_Read+0x20>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	0800228d 	.word	0x0800228d
 800227c:	08002293 	.word	0x08002293
 8002280:	08002299 	.word	0x08002299
 8002284:	0800229f 	.word	0x0800229f
 8002288:	080022a5 	.word	0x080022a5
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_READ_CMD;
 800228c:	2303      	movs	r3, #3
 800228e:	743b      	strb	r3, [r7, #16]
      break;
 8002290:	e00e      	b.n	80022b0 <MX25L6433F_Read+0x58>

    case MX25L6433F_DUAL_OUT_MODE :
      cmd[0] = MX25L6433F_DUAL_OUT_READ_CMD;
 8002292:	233b      	movs	r3, #59	; 0x3b
 8002294:	743b      	strb	r3, [r7, #16]
      break;
 8002296:	e00b      	b.n	80022b0 <MX25L6433F_Read+0x58>

    case MX25L6433F_DUAL_IO_MODE :
      cmd[0] = MX25L6433F_DUAL_INOUT_READ_CMD;
 8002298:	23bb      	movs	r3, #187	; 0xbb
 800229a:	743b      	strb	r3, [r7, #16]
      break;
 800229c:	e008      	b.n	80022b0 <MX25L6433F_Read+0x58>

    case MX25L6433F_QUAD_OUT_MODE :
      cmd[0] = MX25L6433F_QUAD_OUT_READ_CMD;
 800229e:	236b      	movs	r3, #107	; 0x6b
 80022a0:	743b      	strb	r3, [r7, #16]
      break;
 80022a2:	e005      	b.n	80022b0 <MX25L6433F_Read+0x58>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_INOUT_READ_CMD;
 80022a4:	23eb      	movs	r3, #235	; 0xeb
 80022a6:	743b      	strb	r3, [r7, #16]
      break;
 80022a8:	e002      	b.n	80022b0 <MX25L6433F_Read+0x58>

    default :
      return MX25L6433F_ERROR;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	e037      	b.n	8002320 <MX25L6433F_Read+0xc8>
  }

  cmd[1] = ((ReadAddr>>16) & 0xFF);  // A23~A16
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	0c1b      	lsrs	r3, r3, #16
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((ReadAddr>>8)  & 0xFF);  // A15~A8
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (ReadAddr       & 0xFF);  // A7~A0
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff ff96 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <MX25L6433F_Read+0x80>
  {
    return MX25L6433F_ERROR;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e023      	b.n	8002320 <MX25L6433F_Read+0xc8>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80022d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 80022e2:	f107 0310 	add.w	r3, r7, #16
 80022e6:	2104      	movs	r1, #4
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fabb 	bl	8000864 <BSP_SPI2_Send>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <MX25L6433F_Read+0xa4>
  {
    ret = MX25L6433F_ERROR;
 80022f4:	f04f 33ff 	mov.w	r3, #4294967295
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e00b      	b.n	8002314 <MX25L6433F_Read+0xbc>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv(pData, Size) != BSP_ERROR_NONE)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe faca 	bl	800089c <BSP_SPI2_Recv>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <MX25L6433F_Read+0xbc>
  {
    ret = MX25L6433F_ERROR;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8002314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002318:	f44f 7280 	mov.w	r2, #256	; 0x100
 800231c:	619a      	str	r2, [r3, #24]

  return ret;
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <MX25L6433F_ReadDMA>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval Memory status
  */
int32_t MX25L6433F_ReadDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	460b      	mov	r3, r1
 8002336:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d81b      	bhi.n	800237a <MX25L6433F_ReadDMA+0x52>
 8002342:	a201      	add	r2, pc, #4	; (adr r2, 8002348 <MX25L6433F_ReadDMA+0x20>)
 8002344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002363 	.word	0x08002363
 8002350:	08002369 	.word	0x08002369
 8002354:	0800236f 	.word	0x0800236f
 8002358:	08002375 	.word	0x08002375
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_READ_CMD;
 800235c:	2303      	movs	r3, #3
 800235e:	743b      	strb	r3, [r7, #16]
      break;
 8002360:	e00e      	b.n	8002380 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_DUAL_OUT_MODE :
      cmd[0] = MX25L6433F_DUAL_OUT_READ_CMD;
 8002362:	233b      	movs	r3, #59	; 0x3b
 8002364:	743b      	strb	r3, [r7, #16]
      break;
 8002366:	e00b      	b.n	8002380 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_DUAL_IO_MODE :
      cmd[0] = MX25L6433F_DUAL_INOUT_READ_CMD;
 8002368:	23bb      	movs	r3, #187	; 0xbb
 800236a:	743b      	strb	r3, [r7, #16]
      break;
 800236c:	e008      	b.n	8002380 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_QUAD_OUT_MODE :
      cmd[0] = MX25L6433F_QUAD_OUT_READ_CMD;
 800236e:	236b      	movs	r3, #107	; 0x6b
 8002370:	743b      	strb	r3, [r7, #16]
      break;
 8002372:	e005      	b.n	8002380 <MX25L6433F_ReadDMA+0x58>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_INOUT_READ_CMD;
 8002374:	23eb      	movs	r3, #235	; 0xeb
 8002376:	743b      	strb	r3, [r7, #16]
      break;
 8002378:	e002      	b.n	8002380 <MX25L6433F_ReadDMA+0x58>

    default :
      return MX25L6433F_ERROR;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	e032      	b.n	80023e6 <MX25L6433F_ReadDMA+0xbe>
  }

  cmd[1] = ((ReadAddr>>16) & 0xFF);  // A23~A16
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	0c1b      	lsrs	r3, r3, #16
 8002384:	b2db      	uxtb	r3, r3
 8002386:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((ReadAddr>>8)  & 0xFF);  // A15~A8
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b2db      	uxtb	r3, r3
 800238e:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (ReadAddr       & 0xFF);  // A7~A0
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f7ff ff2e 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <MX25L6433F_ReadDMA+0x80>
  {
    return MX25L6433F_ERROR;
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	e01e      	b.n	80023e6 <MX25L6433F_ReadDMA+0xbe>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80023a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80023ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 80023b2:	f107 0310 	add.w	r3, r7, #16
 80023b6:	2104      	movs	r1, #4
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fa53 	bl	8000864 <BSP_SPI2_Send>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <MX25L6433F_ReadDMA+0xa4>
  {
    ret = MX25L6433F_ERROR;
 80023c4:	f04f 33ff 	mov.w	r3, #4294967295
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e00b      	b.n	80023e4 <MX25L6433F_ReadDMA+0xbc>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv_DMA(pData, Size) != BSP_ERROR_NONE)
 80023cc:	6a3b      	ldr	r3, [r7, #32]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	4619      	mov	r1, r3
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fa9a 	bl	800090c <BSP_SPI2_Recv_DMA>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <MX25L6433F_ReadDMA+0xbc>
  {
    ret = MX25L6433F_ERROR;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80023e4:	697b      	ldr	r3, [r7, #20]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop

080023f0 <MX25L6433F_PageProgram>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_PageProgram(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	460b      	mov	r3, r1
 80023fe:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 8002404:	7afb      	ldrb	r3, [r7, #11]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <MX25L6433F_PageProgram+0x20>
 800240a:	2b04      	cmp	r3, #4
 800240c:	d003      	beq.n	8002416 <MX25L6433F_PageProgram+0x26>
 800240e:	e005      	b.n	800241c <MX25L6433F_PageProgram+0x2c>
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_PAGE_PROG_CMD;
 8002410:	2302      	movs	r3, #2
 8002412:	743b      	strb	r3, [r7, #16]
      break;
 8002414:	e005      	b.n	8002422 <MX25L6433F_PageProgram+0x32>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_PAGE_PROG_CMD;
 8002416:	2338      	movs	r3, #56	; 0x38
 8002418:	743b      	strb	r3, [r7, #16]
      break;
 800241a:	e002      	b.n	8002422 <MX25L6433F_PageProgram+0x32>

    default :
      return MX25L6433F_ERROR;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	e04c      	b.n	80024bc <MX25L6433F_PageProgram+0xcc>
  }

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff fee8 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d002      	beq.n	8002434 <MX25L6433F_PageProgram+0x44>
  {
    return MX25L6433F_ERROR;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e043      	b.n	80024bc <MX25L6433F_PageProgram+0xcc>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f97c 	bl	8002732 <MX25L6433F_WriteEnable>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <MX25L6433F_PageProgram+0x56>
  {
    return MX25L6433F_ERROR;
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	e03a      	b.n	80024bc <MX25L6433F_PageProgram+0xcc>
  }

  cmd[1] = ((WriteAddr>>16) & 0xFF);  // A23~A16
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	b2db      	uxtb	r3, r3
 800244c:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((WriteAddr>>8)  & 0xFF);  // A15~A8
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	b2db      	uxtb	r3, r3
 8002454:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (WriteAddr       & 0xFF);  // A7~A0
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	74fb      	strb	r3, [r7, #19]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 800245c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002464:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	2104      	movs	r1, #4
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f9f9 	bl	8000864 <BSP_SPI2_Send>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <MX25L6433F_PageProgram+0x90>
  {
    ret = MX25L6433F_ERROR;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e00b      	b.n	8002498 <MX25L6433F_PageProgram+0xa8>
  }
  /* Transmission of the data */
  else if(MEM_SPI_Send(pData, Size) != BSP_ERROR_NONE)
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe f9ec 	bl	8000864 <BSP_SPI2_Send>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d002      	beq.n	8002498 <MX25L6433F_PageProgram+0xa8>
  {
    ret = MX25L6433F_ERROR;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
 8002496:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8002498:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800249c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a0:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d108      	bne.n	80024ba <MX25L6433F_PageProgram+0xca>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff fea5 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <MX25L6433F_PageProgram+0xca>
    {
      ret = MX25L6433F_ERROR;
 80024b4:	f04f 33ff 	mov.w	r3, #4294967295
 80024b8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80024ba:	697b      	ldr	r3, [r7, #20]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <MX25L6433F_PageProgramDMA>:
  * @note   Address size is forced to 3 Bytes when the 4 Bytes address size
  *         command is not available for the specified interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_PageProgramDMA(MX25L6433F_Object_t *pObj, MX25L6433F_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	460b      	mov	r3, r1
 80024d2:	72fb      	strb	r3, [r7, #11]
  int32_t ret = MX25L6433F_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(Mode)
 80024d8:	7afb      	ldrb	r3, [r7, #11]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <MX25L6433F_PageProgramDMA+0x20>
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d003      	beq.n	80024ea <MX25L6433F_PageProgramDMA+0x26>
 80024e2:	e005      	b.n	80024f0 <MX25L6433F_PageProgramDMA+0x2c>
  {
    case MX25L6433F_SPI_MODE :
      cmd[0] = MX25L6433F_PAGE_PROG_CMD;
 80024e4:	2302      	movs	r3, #2
 80024e6:	743b      	strb	r3, [r7, #16]
      break;
 80024e8:	e005      	b.n	80024f6 <MX25L6433F_PageProgramDMA+0x32>

    case MX25L6433F_QUAD_IO_MODE :
      cmd[0] = MX25L6433F_QUAD_PAGE_PROG_CMD;
 80024ea:	2338      	movs	r3, #56	; 0x38
 80024ec:	743b      	strb	r3, [r7, #16]
      break;
 80024ee:	e002      	b.n	80024f6 <MX25L6433F_PageProgramDMA+0x32>

    default :
      return MX25L6433F_ERROR;
 80024f0:	f04f 33ff 	mov.w	r3, #4294967295
 80024f4:	e03b      	b.n	800256e <MX25L6433F_PageProgramDMA+0xaa>
  }

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff fe7e 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d002      	beq.n	8002508 <MX25L6433F_PageProgramDMA+0x44>
  {
    return MX25L6433F_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295
 8002506:	e032      	b.n	800256e <MX25L6433F_PageProgramDMA+0xaa>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 f912 	bl	8002732 <MX25L6433F_WriteEnable>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d002      	beq.n	800251a <MX25L6433F_PageProgramDMA+0x56>
  {
    return MX25L6433F_ERROR;
 8002514:	f04f 33ff 	mov.w	r3, #4294967295
 8002518:	e029      	b.n	800256e <MX25L6433F_PageProgramDMA+0xaa>
  }

  cmd[1] = ((WriteAddr>>16) & 0xFF);  // A23~A16
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	0c1b      	lsrs	r3, r3, #16
 800251e:	b2db      	uxtb	r3, r3
 8002520:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((WriteAddr>>8)  & 0xFF);  // A15~A8
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	b2db      	uxtb	r3, r3
 8002528:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (WriteAddr       & 0xFF);  // A7~A0
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	74fb      	strb	r3, [r7, #19]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8002530:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002538:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 4) != BSP_ERROR_NONE)
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	2104      	movs	r1, #4
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f98f 	bl	8000864 <BSP_SPI2_Send>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <MX25L6433F_PageProgramDMA+0x90>
  {
    ret = MX25L6433F_ERROR;
 800254c:	f04f 33ff 	mov.w	r3, #4294967295
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e00b      	b.n	800256c <MX25L6433F_PageProgramDMA+0xa8>
  }
  /* Transmission of the data using DMA */
  else if(MEM_SPI_Send_DMA(pData, Size) != BSP_ERROR_NONE)
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7fe f9ba 	bl	80008d4 <BSP_SPI2_Send_DMA>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <MX25L6433F_PageProgramDMA+0xa8>
  {
    ret = MX25L6433F_ERROR;
 8002566:	f04f 33ff 	mov.w	r3, #4294967295
 800256a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800256c:	697b      	ldr	r3, [r7, #20]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <MX25L6433F_BlockErase>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize Block size to erase
  * @retval Memory status
  */
int32_t MX25L6433F_BlockErase(MX25L6433F_Object_t *pObj, uint32_t BlockAddress, MX25L6433F_Erase_t BlockSize)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	4613      	mov	r3, r2
 8002582:	71fb      	strb	r3, [r7, #7]
  int32_t ret = MX25L6433F_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd[4];

  switch(BlockSize)
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d006      	beq.n	800259c <MX25L6433F_BlockErase+0x26>
 800258e:	2b02      	cmp	r3, #2
 8002590:	dc0d      	bgt.n	80025ae <MX25L6433F_BlockErase+0x38>
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <MX25L6433F_BlockErase+0x32>
 8002596:	2b01      	cmp	r3, #1
 8002598:	d003      	beq.n	80025a2 <MX25L6433F_BlockErase+0x2c>
 800259a:	e008      	b.n	80025ae <MX25L6433F_BlockErase+0x38>
  {
    case MX25L6433F_ERASE_64K :
      cmd[0] = MX25L6433F_BLOCK_ERASE_CMD;
 800259c:	23d8      	movs	r3, #216	; 0xd8
 800259e:	743b      	strb	r3, [r7, #16]
      break;
 80025a0:	e008      	b.n	80025b4 <MX25L6433F_BlockErase+0x3e>
    case MX25L6433F_ERASE_32K :
      cmd[0] = MX25L6433F_SUBBLOCK_ERASE_CMD;
 80025a2:	2352      	movs	r3, #82	; 0x52
 80025a4:	743b      	strb	r3, [r7, #16]
      break;
 80025a6:	e005      	b.n	80025b4 <MX25L6433F_BlockErase+0x3e>
    case MX25L6433F_ERASE_4K :
      cmd[0] = MX25L6433F_SECTOR_ERASE_CMD;
 80025a8:	2320      	movs	r3, #32
 80025aa:	743b      	strb	r3, [r7, #16]
      break;
 80025ac:	e002      	b.n	80025b4 <MX25L6433F_BlockErase+0x3e>
    default :
      return MX25L6433F_ERROR;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e03a      	b.n	800262a <MX25L6433F_BlockErase+0xb4>
  }

  cmd[1] = ((BlockAddress>>16) & 0xFF);  // A23~A16
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	0c1b      	lsrs	r3, r3, #16
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	747b      	strb	r3, [r7, #17]
  cmd[2] = ((BlockAddress>>8)  & 0xFF);  // A15~A8
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	74bb      	strb	r3, [r7, #18]
  cmd[3] = (BlockAddress       & 0xFF);  // A7~A0
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	74fb      	strb	r3, [r7, #19]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f7ff fe14 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <MX25L6433F_BlockErase+0x66>
  {
    return MX25L6433F_ERROR;
 80025d6:	f04f 33ff 	mov.w	r3, #4294967295
 80025da:	e026      	b.n	800262a <MX25L6433F_BlockErase+0xb4>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f8a8 	bl	8002732 <MX25L6433F_WriteEnable>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <MX25L6433F_BlockErase+0x78>
  {
    return MX25L6433F_ERROR;
 80025e8:	f04f 33ff 	mov.w	r3, #4294967295
 80025ec:	e01d      	b.n	800262a <MX25L6433F_BlockErase+0xb4>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80025ee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80025f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  ret = MEM_SPI_Send((uint8_t *)cmd, 4);
 80025f8:	f107 0310 	add.w	r3, r7, #16
 80025fc:	2104      	movs	r1, #4
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe f930 	bl	8000864 <BSP_SPI2_Send>
 8002604:	6178      	str	r0, [r7, #20]

  /* Set the nCS */
  MEM_CS_HIGH();
 8002606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800260a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260e:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d108      	bne.n	8002628 <MX25L6433F_BlockErase+0xb2>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f7ff fdee 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <MX25L6433F_BlockErase+0xb2>
    {
      ret = MX25L6433F_ERROR;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8002628:	697b      	ldr	r3, [r7, #20]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <MX25L6433F_ChipErase>:
  * @param  pObj Component object pointer
  * @param  Mode Interface mode
  * @retval Memory status
  */
int32_t MX25L6433F_ChipErase(MX25L6433F_Object_t *pObj)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_CHIP_ERASE_CMD;
 800263e:	2360      	movs	r3, #96	; 0x60
 8002640:	72fb      	strb	r3, [r7, #11]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fdd8 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <MX25L6433F_ChipErase+0x22>
  {
    return MX25L6433F_ERROR;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
 8002652:	e026      	b.n	80026a2 <MX25L6433F_ChipErase+0x70>
  }

  // Enable Write operation
  if(MX25L6433F_WriteEnable(pObj) != MX25L6433F_OK)
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f86c 	bl	8002732 <MX25L6433F_WriteEnable>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d002      	beq.n	8002666 <MX25L6433F_ChipErase+0x34>
  {
    return MX25L6433F_ERROR;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e01d      	b.n	80026a2 <MX25L6433F_ChipErase+0x70>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8002666:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800266a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_CHIP_ERASE_CMD */
  ret = MEM_SPI_Send((uint8_t *)&cmd, 1);
 8002670:	f107 030b 	add.w	r3, r7, #11
 8002674:	2101      	movs	r1, #1
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe f8f4 	bl	8000864 <BSP_SPI2_Send>
 800267c:	60f8      	str	r0, [r7, #12]

  /* Set the nCS */
  MEM_CS_HIGH();
 800267e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002686:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <MX25L6433F_ChipErase+0x6e>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff fdb2 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <MX25L6433F_ChipErase+0x6e>
    {
      ret = MX25L6433F_ERROR;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80026a0:	68fb      	ldr	r3, [r7, #12]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3710      	adds	r7, #16
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <MX25L6433F_ReadID>:
  * @param  pObj Component object pointer
  * @param  ID 3 bytes IDs pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ReadID(MX25L6433F_Object_t *pObj, uint32_t *ID)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]
  uint8_t __IO cmd = MX25L6433F_READ_ID_CMD;
 80026b8:	239f      	movs	r3, #159	; 0x9f
 80026ba:	74fb      	strb	r3, [r7, #19]
  uint8_t __IO id[4] = {0x00, 0x00, 0x00, 0x00};
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fd99 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d002      	beq.n	80026d2 <MX25L6433F_ReadID+0x28>
  {
    return MX25L6433F_ERROR;
 80026cc:	f04f 33ff 	mov.w	r3, #4294967295
 80026d0:	e02b      	b.n	800272a <MX25L6433F_ReadID+0x80>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80026d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80026d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_READ_ID_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 80026dc:	f107 0313 	add.w	r3, r7, #19
 80026e0:	2101      	movs	r1, #1
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe f8be 	bl	8000864 <BSP_SPI2_Send>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <MX25L6433F_ReadID+0x4c>
  {
    ret = MX25L6433F_ERROR;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e00b      	b.n	800270e <MX25L6433F_ReadID+0x64>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv((uint8_t *)id, 3) != BSP_ERROR_NONE)
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	2103      	movs	r1, #3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe f8cd 	bl	800089c <BSP_SPI2_Recv>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <MX25L6433F_ReadID+0x64>
  {
    ret = MX25L6433F_ERROR;
 8002708:	f04f 33ff 	mov.w	r3, #4294967295
 800270c:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 800270e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002716:	619a      	str	r2, [r3, #24]

  if(ret == MX25L6433F_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d104      	bne.n	8002728 <MX25L6433F_ReadID+0x7e>
  {
    *ID = *(uint32_t *)id;
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002728:	697b      	ldr	r3, [r7, #20]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <MX25L6433F_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_WriteEnable(MX25L6433F_Object_t *pObj)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_WRITE_ENABLE_CMD;
 800273e:	2306      	movs	r3, #6
 8002740:	72fb      	strb	r3, [r7, #11]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fd58 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <MX25L6433F_WriteEnable+0x22>
  {
    return MX25L6433F_ERROR;
 800274e:	f04f 33ff 	mov.w	r3, #4294967295
 8002752:	e022      	b.n	800279a <MX25L6433F_WriteEnable+0x68>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8002754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_WRITE_ENABLE_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 800275e:	f107 030b 	add.w	r3, r7, #11
 8002762:	2101      	movs	r1, #1
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe f87d 	bl	8000864 <BSP_SPI2_Send>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <MX25L6433F_WriteEnable+0x44>
  {
    ret = MX25L6433F_ERROR;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295
 8002774:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8002776:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800277a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800277e:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d108      	bne.n	8002798 <MX25L6433F_WriteEnable+0x66>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fd36 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <MX25L6433F_WriteEnable+0x66>
    {
      ret = MX25L6433F_ERROR;
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002798:	68fb      	ldr	r3, [r7, #12]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <MX25L6433F_ReadStatusRegister>:
  * @param  pObj Component object pointer
  * @param  Value Status register value pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ReadStatusRegister(MX25L6433F_Object_t *pObj, uint8_t *Value)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b084      	sub	sp, #16
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  int32_t ret = MX25L6433F_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_READ_STATUS_REG_CMD;
 80027b0:	2305      	movs	r3, #5
 80027b2:	72fb      	strb	r3, [r7, #11]
  uint8_t __IO value;

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80027b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_READ_STATUS_REG_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 80027be:	f107 030b 	add.w	r3, r7, #11
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe f84d 	bl	8000864 <BSP_SPI2_Send>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <MX25L6433F_ReadStatusRegister+0x36>
  {
    ret = MX25L6433F_ERROR;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	e00b      	b.n	80027f0 <MX25L6433F_ReadStatusRegister+0x4e>
  }
  /* Reception of the data */
  else if(MEM_SPI_Recv((uint8_t *)&value, 1) != BSP_ERROR_NONE)
 80027d8:	f107 030a 	add.w	r3, r7, #10
 80027dc:	2101      	movs	r1, #1
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe f85c 	bl	800089c <BSP_SPI2_Recv>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <MX25L6433F_ReadStatusRegister+0x4e>
  {
    ret = MX25L6433F_ERROR;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 80027f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027f8:	619a      	str	r2, [r3, #24]

  *Value = value;
 80027fa:	7abb      	ldrb	r3, [r7, #10]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	701a      	strb	r2, [r3, #0]

  return ret;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <MX25L6433F_WriteBurstReadLength>:
  * @param  pObj Component object pointer
  * @param  Value New Burst length
  * @retval Memory status
  */
int32_t MX25L6433F_WriteBurstReadLength(MX25L6433F_Object_t *pObj, uint8_t Value)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	70fb      	strb	r3, [r7, #3]
  int32_t ret = MX25L6433F_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]

  uint8_t __IO cmd[2] = { MX25L6433F_SET_BURST_LENGTH_CMD, Value};
 800281c:	23c0      	movs	r3, #192	; 0xc0
 800281e:	743b      	strb	r3, [r7, #16]
 8002820:	78fb      	ldrb	r3, [r7, #3]
 8002822:	747b      	strb	r3, [r7, #17]
 8002824:	8a3b      	ldrh	r3, [r7, #16]
 8002826:	81bb      	strh	r3, [r7, #12]

  /* Wait till the memory is ready */
  if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f7ff fce5 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <MX25L6433F_WriteBurstReadLength+0x2e>
  {
    return MX25L6433F_ERROR;
 8002834:	f04f 33ff 	mov.w	r3, #4294967295
 8002838:	e022      	b.n	8002880 <MX25L6433F_WriteBurstReadLength+0x74>
  }

  /* Reset the nCS pin */
  MEM_CS_LOW();
 800283a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800283e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002842:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command */
  if(MEM_SPI_Send((uint8_t *)cmd, 2) != BSP_ERROR_NONE)
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	2102      	movs	r1, #2
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f80a 	bl	8000864 <BSP_SPI2_Send>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <MX25L6433F_WriteBurstReadLength+0x50>
  {
    ret = MX25L6433F_ERROR;
 8002856:	f04f 33ff 	mov.w	r3, #4294967295
 800285a:	617b      	str	r3, [r7, #20]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 800285c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002864:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <MX25L6433F_WriteBurstReadLength+0x72>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff fcc3 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <MX25L6433F_WriteBurstReadLength+0x72>
    {
      ret = MX25L6433F_ERROR;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295
 800287c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800287e:	697b      	ldr	r3, [r7, #20]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <MX25L6433F_ResetEnable>:
  * @brief  Flash reset enable command
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ResetEnable(MX25L6433F_Object_t *pObj)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_RESET_ENABLE_CMD;
 8002894:	2366      	movs	r3, #102	; 0x66
 8002896:	72fb      	strb	r3, [r7, #11]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 8002898:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800289c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_RESET_ENABLE_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 80028a2:	f107 030b 	add.w	r3, r7, #11
 80028a6:	2101      	movs	r1, #1
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd ffdb 	bl	8000864 <BSP_SPI2_Send>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <MX25L6433F_ResetEnable+0x32>
  {
    ret = MX25L6433F_ERROR;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 80028ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028c2:	619a      	str	r2, [r3, #24]

  return ret;
 80028c4:	68fb      	ldr	r3, [r7, #12]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <MX25L6433F_ResetMemory>:
  * @brief  Flash reset memory command
  * @param  pObj Component object pointer
  * @retval Memory status
  */
int32_t MX25L6433F_ResetMemory(MX25L6433F_Object_t *pObj)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  int32_t ret = MX25L6433F_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  uint8_t __IO cmd = MX25L6433F_RESET_MEMORY_CMD;
 80028da:	2399      	movs	r3, #153	; 0x99
 80028dc:	72fb      	strb	r3, [r7, #11]

  /* Reset the nCS pin */
  MEM_CS_LOW();
 80028de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80028e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Send the command MX25L6433F_RESET_MEMORY_CMD */
  if(MEM_SPI_Send((uint8_t *)&cmd, 1) != BSP_ERROR_NONE)
 80028e8:	f107 030b 	add.w	r3, r7, #11
 80028ec:	2101      	movs	r1, #1
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fd ffb8 	bl	8000864 <BSP_SPI2_Send>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <MX25L6433F_ResetMemory+0x32>
  {
    ret = MX25L6433F_ERROR;
 80028fa:	f04f 33ff 	mov.w	r3, #4294967295
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the nCS */
  MEM_CS_HIGH();
 8002900:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002908:	619a      	str	r2, [r3, #24]

  /* Wait till the memory is ready */
  if(ret == MX25L6433F_OK)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d108      	bne.n	8002922 <MX25L6433F_ResetMemory+0x54>
  {
    if(MX25L6433F_AutoPollingMemReady(pObj) != MX25L6433F_OK)
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fc71 	bl	80021f8 <MX25L6433F_AutoPollingMemReady>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <MX25L6433F_ResetMemory+0x54>
    {
      ret = MX25L6433F_ERROR;
 800291c:	f04f 33ff 	mov.w	r3, #4294967295
 8002920:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002922:	68fb      	ldr	r3, [r7, #12]
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <HAL_Init+0x3c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a0b      	ldr	r2, [pc, #44]	; (8002968 <HAL_Init+0x3c>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002940:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002942:	2003      	movs	r0, #3
 8002944:	f000 feec 	bl	8003720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002948:	2000      	movs	r0, #0
 800294a:	f000 f80f 	bl	800296c <HAL_InitTick>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d002      	beq.n	800295a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	e001      	b.n	800295e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800295a:	f7fd fe0b 	bl	8000574 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800295e:	79fb      	ldrb	r3, [r7, #7]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40022000 	.word	0x40022000

0800296c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_InitTick+0x6c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d023      	beq.n	80029c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002980:	4b16      	ldr	r3, [pc, #88]	; (80029dc <HAL_InitTick+0x70>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_InitTick+0x6c>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800298e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f000 ff05 	bl	80037a6 <HAL_SYSTICK_Config>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10f      	bne.n	80029c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b0f      	cmp	r3, #15
 80029a6:	d809      	bhi.n	80029bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029a8:	2200      	movs	r2, #0
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f000 fec1 	bl	8003736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HAL_InitTick+0x74>)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e007      	b.n	80029cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
 80029c0:	e004      	b.n	80029cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e001      	b.n	80029cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	2000006c 	.word	0x2000006c
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000068 	.word	0x20000068

080029e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_IncTick+0x20>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_IncTick+0x24>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a04      	ldr	r2, [pc, #16]	; (8002a08 <HAL_IncTick+0x24>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000006c 	.word	0x2000006c
 8002a08:	20000454 	.word	0x20000454

08002a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <HAL_GetTick+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000454 	.word	0x20000454

08002a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a2c:	f7ff ffee 	bl	8002a0c <HAL_GetTick>
 8002a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3c:	d005      	beq.n	8002a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <HAL_Delay+0x44>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a4a:	bf00      	nop
 8002a4c:	f7ff ffde 	bl	8002a0c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d8f7      	bhi.n	8002a4c <HAL_Delay+0x28>
  {
  }
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	2000006c 	.word	0x2000006c

08002a6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0ed      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d102      	bne.n	8002a90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7fd fd96 	bl	80005bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa0:	f7ff ffb4 	bl	8002a0c <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002aa6:	e012      	b.n	8002ace <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aa8:	f7ff ffb0 	bl	8002a0c <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b0a      	cmp	r3, #10
 8002ab4:	d90b      	bls.n	8002ace <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0c5      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0e5      	beq.n	8002aa8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0202 	bic.w	r2, r2, #2
 8002aea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aec:	f7ff ff8e 	bl	8002a0c <HAL_GetTick>
 8002af0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002af2:	e012      	b.n	8002b1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002af4:	f7ff ff8a 	bl	8002a0c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b0a      	cmp	r3, #10
 8002b00:	d90b      	bls.n	8002b1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2205      	movs	r2, #5
 8002b12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e09f      	b.n	8002c5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e5      	bne.n	8002af4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7e1b      	ldrb	r3, [r3, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	7e5b      	ldrb	r3, [r3, #25]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d108      	bne.n	8002b6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e007      	b.n	8002b7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e9b      	ldrb	r3, [r3, #26]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0220 	orr.w	r2, r2, #32
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	e007      	b.n	8002ba6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0220 	bic.w	r2, r2, #32
 8002ba4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	7edb      	ldrb	r3, [r3, #27]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0210 	bic.w	r2, r2, #16
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e007      	b.n	8002bd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0210 	orr.w	r2, r2, #16
 8002bce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7f1b      	ldrb	r3, [r3, #28]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0208 	orr.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e007      	b.n	8002bfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 0208 	bic.w	r2, r2, #8
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	7f5b      	ldrb	r3, [r3, #29]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f042 0204 	orr.w	r2, r2, #4
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e007      	b.n	8002c24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0204 	bic.w	r2, r2, #4
 8002c22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	ea42 0103 	orr.w	r1, r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	1e5a      	subs	r2, r3, #1
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b087      	sub	sp, #28
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d003      	beq.n	8002c88 <HAL_CAN_ConfigFilter+0x26>
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	f040 80aa 	bne.w	8002ddc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c8e:	f043 0201 	orr.w	r2, r3, #1
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d123      	bne.n	8002d0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	401a      	ands	r2, r3
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ce4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3248      	adds	r2, #72	; 0x48
 8002cea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d00:	6979      	ldr	r1, [r7, #20]
 8002d02:	3348      	adds	r3, #72	; 0x48
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d122      	bne.n	8002d58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002d32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3248      	adds	r2, #72	; 0x48
 8002d38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	3348      	adds	r3, #72	; 0x48
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	440b      	add	r3, r1
 8002d56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d72:	e007      	b.n	8002d84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d9e:	e007      	b.n	8002db0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d107      	bne.n	8002dc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e006      	b.n	8002dea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
  }
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d12e      	bne.n	8002e68 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e22:	f7ff fdf3 	bl	8002a0c <HAL_GetTick>
 8002e26:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e28:	e012      	b.n	8002e50 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e2a:	f7ff fdef 	bl	8002a0c <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b0a      	cmp	r3, #10
 8002e36:	d90b      	bls.n	8002e50 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2205      	movs	r2, #5
 8002e48:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e012      	b.n	8002e76 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1e5      	bne.n	8002e2a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e006      	b.n	8002e76 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b087      	sub	sp, #28
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e92:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d003      	beq.n	8002ea2 <HAL_CAN_GetRxMessage+0x24>
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	f040 80f3 	bne.w	8003088 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10e      	bne.n	8002ec6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e0e7      	b.n	8003096 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0303 	and.w	r3, r3, #3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d107      	bne.n	8002ee4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d8      	b.n	8003096 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	331b      	adds	r3, #27
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	4413      	add	r3, r2
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0204 	and.w	r2, r3, #4
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	331b      	adds	r3, #27
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	4413      	add	r3, r2
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	0d5b      	lsrs	r3, r3, #21
 8002f12:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e00b      	b.n	8002f34 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	331b      	adds	r3, #27
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4413      	add	r3, r2
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	08db      	lsrs	r3, r3, #3
 8002f2c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	331b      	adds	r3, #27
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0202 	and.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	331b      	adds	r3, #27
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 020f 	and.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	331b      	adds	r3, #27
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0a1b      	lsrs	r3, r3, #8
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	331b      	adds	r3, #27
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	4413      	add	r3, r2
 8002f86:	3304      	adds	r3, #4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0a1a      	lsrs	r2, r3, #8
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0c1a      	lsrs	r2, r3, #16
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0e1a      	lsrs	r2, r3, #24
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3303      	adds	r3, #3
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	3304      	adds	r3, #4
 800300a:	b2d2      	uxtb	r2, r2
 800300c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	4413      	add	r3, r2
 8003018:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0a1a      	lsrs	r2, r3, #8
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3305      	adds	r3, #5
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0c1a      	lsrs	r2, r3, #16
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3306      	adds	r3, #6
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4413      	add	r3, r2
 800304c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e1a      	lsrs	r2, r3, #24
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3307      	adds	r3, #7
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0220 	orr.w	r2, r2, #32
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	e007      	b.n	8003084 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	691a      	ldr	r2, [r3, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0220 	orr.w	r2, r2, #32
 8003082:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e006      	b.n	8003096 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d002      	beq.n	80030c0 <HAL_CAN_ActivateNotification+0x1e>
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d109      	bne.n	80030d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6959      	ldr	r1, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e006      	b.n	80030e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
  }
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b08a      	sub	sp, #40	; 0x28
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d07c      	beq.n	800322e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d023      	beq.n	8003186 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2201      	movs	r2, #1
 8003144:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f983 	bl	800345c <HAL_CAN_TxMailbox0CompleteCallback>
 8003156:	e016      	b.n	8003186 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	d004      	beq.n	800316c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
 800316a:	e00c      	b.n	8003186 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d004      	beq.n	8003180 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
 800317e:	e002      	b.n	8003186 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f97f 	bl	8003484 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318c:	2b00      	cmp	r3, #0
 800318e:	d024      	beq.n	80031da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003198:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fd ff73 	bl	8001090 <HAL_CAN_TxMailbox1CompleteCallback>
 80031aa:	e016      	b.n	80031da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
 80031be:	e00c      	b.n	80031da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	e002      	b.n	80031da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f95f 	bl	8003498 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d024      	beq.n	800322e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f939 	bl	8003470 <HAL_CAN_TxMailbox2CompleteCallback>
 80031fe:	e016      	b.n	800322e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d004      	beq.n	8003214 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	e00c      	b.n	800322e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
 8003226:	e002      	b.n	800322e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f93f 	bl	80034ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00c      	beq.n	8003252 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 0310 	and.w	r3, r3, #16
 800323e:	2b00      	cmp	r3, #0
 8003240:	d007      	beq.n	8003252 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003248:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2210      	movs	r2, #16
 8003250:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2208      	movs	r2, #8
 800326c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f926 	bl	80034c0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d002      	beq.n	8003292 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd ff0b 	bl	80010a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2210      	movs	r2, #16
 80032b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00b      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2208      	movs	r2, #8
 80032d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f908 	bl	80034e8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8ef 	bl	80034d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b00      	cmp	r3, #0
 8003308:	d006      	beq.n	8003318 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2210      	movs	r2, #16
 8003310:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f8f2 	bl	80034fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d006      	beq.n	800333a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2208      	movs	r2, #8
 8003332:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f8eb 	bl	8003510 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d07b      	beq.n	800343c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b00      	cmp	r3, #0
 800334c:	d072      	beq.n	8003434 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003354:	2b00      	cmp	r3, #0
 8003356:	d008      	beq.n	800336a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003370:	2b00      	cmp	r3, #0
 8003372:	d008      	beq.n	8003386 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003386:	6a3b      	ldr	r3, [r7, #32]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338c:	2b00      	cmp	r3, #0
 800338e:	d008      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d043      	beq.n	8003434 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d03e      	beq.n	8003434 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033bc:	2b60      	cmp	r3, #96	; 0x60
 80033be:	d02b      	beq.n	8003418 <HAL_CAN_IRQHandler+0x32a>
 80033c0:	2b60      	cmp	r3, #96	; 0x60
 80033c2:	d82e      	bhi.n	8003422 <HAL_CAN_IRQHandler+0x334>
 80033c4:	2b50      	cmp	r3, #80	; 0x50
 80033c6:	d022      	beq.n	800340e <HAL_CAN_IRQHandler+0x320>
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d82a      	bhi.n	8003422 <HAL_CAN_IRQHandler+0x334>
 80033cc:	2b40      	cmp	r3, #64	; 0x40
 80033ce:	d019      	beq.n	8003404 <HAL_CAN_IRQHandler+0x316>
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d826      	bhi.n	8003422 <HAL_CAN_IRQHandler+0x334>
 80033d4:	2b30      	cmp	r3, #48	; 0x30
 80033d6:	d010      	beq.n	80033fa <HAL_CAN_IRQHandler+0x30c>
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d822      	bhi.n	8003422 <HAL_CAN_IRQHandler+0x334>
 80033dc:	2b10      	cmp	r3, #16
 80033de:	d002      	beq.n	80033e6 <HAL_CAN_IRQHandler+0x2f8>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d005      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033e4:	e01d      	b.n	8003422 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	f043 0308 	orr.w	r3, r3, #8
 80033ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033ee:	e019      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	f043 0310 	orr.w	r3, r3, #16
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80033f8:	e014      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	f043 0320 	orr.w	r3, r3, #32
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003402:	e00f      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800340c:	e00a      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003416:	e005      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003420:	e000      	b.n	8003424 <HAL_CAN_IRQHandler+0x336>
            break;
 8003422:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003432:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2204      	movs	r2, #4
 800343a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	d008      	beq.n	8003454 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f868 	bl	8003524 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003454:	bf00      	nop
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003554:	4013      	ands	r3, r2
 8003556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800356a:	4a04      	ldr	r2, [pc, #16]	; (800357c <__NVIC_SetPriorityGrouping+0x44>)
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	60d3      	str	r3, [r2, #12]
}
 8003570:	bf00      	nop
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	e000ed00 	.word	0xe000ed00

08003580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <__NVIC_GetPriorityGrouping+0x18>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	0a1b      	lsrs	r3, r3, #8
 800358a:	f003 0307 	and.w	r3, r3, #7
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	e000ed00 	.word	0xe000ed00

0800359c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	db0b      	blt.n	80035c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ae:	79fb      	ldrb	r3, [r7, #7]
 80035b0:	f003 021f 	and.w	r2, r3, #31
 80035b4:	4907      	ldr	r1, [pc, #28]	; (80035d4 <__NVIC_EnableIRQ+0x38>)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	2001      	movs	r0, #1
 80035be:	fa00 f202 	lsl.w	r2, r0, r2
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	e000e100 	.word	0xe000e100

080035d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	db12      	blt.n	8003610 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	490a      	ldr	r1, [pc, #40]	; (800361c <__NVIC_DisableIRQ+0x44>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	095b      	lsrs	r3, r3, #5
 80035f8:	2001      	movs	r0, #1
 80035fa:	fa00 f202 	lsl.w	r2, r0, r2
 80035fe:	3320      	adds	r3, #32
 8003600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003604:	f3bf 8f4f 	dsb	sy
}
 8003608:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800360a:	f3bf 8f6f 	isb	sy
}
 800360e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ec:	d301      	bcc.n	80036f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ee:	2301      	movs	r3, #1
 80036f0:	e00f      	b.n	8003712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f2:	4a0a      	ldr	r2, [pc, #40]	; (800371c <SysTick_Config+0x40>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fa:	210f      	movs	r1, #15
 80036fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003700:	f7ff ff8e 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <SysTick_Config+0x40>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <SysTick_Config+0x40>)
 800370c:	2207      	movs	r2, #7
 800370e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	e000e010 	.word	0xe000e010

08003720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f7ff ff05 	bl	8003538 <__NVIC_SetPriorityGrouping>
}
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b086      	sub	sp, #24
 800373a:	af00      	add	r7, sp, #0
 800373c:	4603      	mov	r3, r0
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003748:	f7ff ff1a 	bl	8003580 <__NVIC_GetPriorityGrouping>
 800374c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	6978      	ldr	r0, [r7, #20]
 8003754:	f7ff ff8e 	bl	8003674 <NVIC_EncodePriority>
 8003758:	4602      	mov	r2, r0
 800375a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375e:	4611      	mov	r1, r2
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff5d 	bl	8003620 <__NVIC_SetPriority>
}
 8003766:	bf00      	nop
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b082      	sub	sp, #8
 8003772:	af00      	add	r7, sp, #0
 8003774:	4603      	mov	r3, r0
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff0d 	bl	800359c <__NVIC_EnableIRQ>
}
 8003782:	bf00      	nop
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	4603      	mov	r3, r0
 8003792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff ff1d 	bl	80035d8 <__NVIC_DisableIRQ>
}
 800379e:	bf00      	nop
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff ff94 	bl	80036dc <SysTick_Config>
 80037b4:	4603      	mov	r3, r0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e098      	b.n	8003904 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	4b4d      	ldr	r3, [pc, #308]	; (8003910 <HAL_DMA_Init+0x150>)
 80037da:	429a      	cmp	r2, r3
 80037dc:	d80f      	bhi.n	80037fe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b4b      	ldr	r3, [pc, #300]	; (8003914 <HAL_DMA_Init+0x154>)
 80037e6:	4413      	add	r3, r2
 80037e8:	4a4b      	ldr	r2, [pc, #300]	; (8003918 <HAL_DMA_Init+0x158>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	009a      	lsls	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a48      	ldr	r2, [pc, #288]	; (800391c <HAL_DMA_Init+0x15c>)
 80037fa:	641a      	str	r2, [r3, #64]	; 0x40
 80037fc:	e00e      	b.n	800381c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	4b46      	ldr	r3, [pc, #280]	; (8003920 <HAL_DMA_Init+0x160>)
 8003806:	4413      	add	r3, r2
 8003808:	4a43      	ldr	r2, [pc, #268]	; (8003918 <HAL_DMA_Init+0x158>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	009a      	lsls	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a42      	ldr	r2, [pc, #264]	; (8003924 <HAL_DMA_Init+0x164>)
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003840:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800384c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003858:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003876:	d039      	beq.n	80038ec <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <HAL_DMA_Init+0x15c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d11a      	bne.n	80038b8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003882:	4b29      	ldr	r3, [pc, #164]	; (8003928 <HAL_DMA_Init+0x168>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	f003 031c 	and.w	r3, r3, #28
 800388e:	210f      	movs	r1, #15
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	43db      	mvns	r3, r3
 8003896:	4924      	ldr	r1, [pc, #144]	; (8003928 <HAL_DMA_Init+0x168>)
 8003898:	4013      	ands	r3, r2
 800389a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800389c:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_DMA_Init+0x168>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a8:	f003 031c 	and.w	r3, r3, #28
 80038ac:	fa01 f303 	lsl.w	r3, r1, r3
 80038b0:	491d      	ldr	r1, [pc, #116]	; (8003928 <HAL_DMA_Init+0x168>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
 80038b6:	e019      	b.n	80038ec <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80038b8:	4b1c      	ldr	r3, [pc, #112]	; (800392c <HAL_DMA_Init+0x16c>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c0:	f003 031c 	and.w	r3, r3, #28
 80038c4:	210f      	movs	r1, #15
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	4917      	ldr	r1, [pc, #92]	; (800392c <HAL_DMA_Init+0x16c>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80038d2:	4b16      	ldr	r3, [pc, #88]	; (800392c <HAL_DMA_Init+0x16c>)
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038de:	f003 031c 	and.w	r3, r3, #28
 80038e2:	fa01 f303 	lsl.w	r3, r1, r3
 80038e6:	4911      	ldr	r1, [pc, #68]	; (800392c <HAL_DMA_Init+0x16c>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	40020407 	.word	0x40020407
 8003914:	bffdfff8 	.word	0xbffdfff8
 8003918:	cccccccd 	.word	0xcccccccd
 800391c:	40020000 	.word	0x40020000
 8003920:	bffdfbf8 	.word	0xbffdfbf8
 8003924:	40020400 	.word	0x40020400
 8003928:	400200a8 	.word	0x400200a8
 800392c:	400204a8 	.word	0x400204a8

08003930 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e072      	b.n	8003a28 <HAL_DMA_DeInit+0xf8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <HAL_DMA_DeInit+0x104>)
 800395a:	429a      	cmp	r2, r3
 800395c:	d80f      	bhi.n	800397e <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_DMA_DeInit+0x108>)
 8003966:	4413      	add	r3, r2
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <HAL_DMA_DeInit+0x10c>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	009a      	lsls	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_DMA_DeInit+0x110>)
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
 800397c:	e00e      	b.n	800399c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_DMA_DeInit+0x114>)
 8003986:	4413      	add	r3, r2
 8003988:	4a2c      	ldr	r2, [pc, #176]	; (8003a3c <HAL_DMA_DeInit+0x10c>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2b      	ldr	r2, [pc, #172]	; (8003a48 <HAL_DMA_DeInit+0x118>)
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a8:	f003 021c 	and.w	r2, r3, #28
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	605a      	str	r2, [r3, #4]

#if !defined (DMAMUX1)

  /* Reset DMA channel selection register */
  if (DMA1 == hdma->DmaBaseAddress)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <HAL_DMA_DeInit+0x110>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d10d      	bne.n	80039de <HAL_DMA_DeInit+0xae>
  {
    /* DMA1 */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039c2:	4b22      	ldr	r3, [pc, #136]	; (8003a4c <HAL_DMA_DeInit+0x11c>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f003 031c 	and.w	r3, r3, #28
 80039ce:	210f      	movs	r1, #15
 80039d0:	fa01 f303 	lsl.w	r3, r1, r3
 80039d4:	43db      	mvns	r3, r3
 80039d6:	491d      	ldr	r1, [pc, #116]	; (8003a4c <HAL_DMA_DeInit+0x11c>)
 80039d8:	4013      	ands	r3, r2
 80039da:	600b      	str	r3, [r1, #0]
 80039dc:	e00c      	b.n	80039f8 <HAL_DMA_DeInit+0xc8>
  }
  else
  {
    /* DMA2 */
    DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_DMA_DeInit+0x120>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f003 031c 	and.w	r3, r3, #28
 80039ea:	210f      	movs	r1, #15
 80039ec:	fa01 f303 	lsl.w	r3, r1, r3
 80039f0:	43db      	mvns	r3, r3
 80039f2:	4917      	ldr	r1, [pc, #92]	; (8003a50 <HAL_DMA_DeInit+0x120>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxRequestGenStatusMask = 0U;

#endif /* DMAMUX1 */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr
 8003a34:	40020407 	.word	0x40020407
 8003a38:	bffdfff8 	.word	0xbffdfff8
 8003a3c:	cccccccd 	.word	0xcccccccd
 8003a40:	40020000 	.word	0x40020000
 8003a44:	bffdfbf8 	.word	0xbffdfbf8
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	400200a8 	.word	0x400200a8
 8003a50:	400204a8 	.word	0x400204a8

08003a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_DMA_Start_IT+0x20>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e04b      	b.n	8003b0c <HAL_DMA_Start_IT+0xb8>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d13a      	bne.n	8003afe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 f921 	bl	8003cf4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 020e 	orr.w	r2, r2, #14
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	e00f      	b.n	8003aec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 020a 	orr.w	r2, r2, #10
 8003aea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f042 0201 	orr.w	r2, r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	e005      	b.n	8003b0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
 8003b08:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d005      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e029      	b.n	8003b8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 020e 	bic.w	r2, r2, #14
 8003b46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0201 	bic.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5c:	f003 021c 	and.w	r2, r3, #28
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f202 	lsl.w	r2, r1, r2
 8003b6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
    }
  }
  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb2:	f003 031c 	and.w	r3, r3, #28
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d026      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x7a>
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d021      	beq.n	8003c10 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0204 	bic.w	r2, r2, #4
 8003be8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f003 021c 	and.w	r2, r3, #28
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bfc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d071      	beq.n	8003cea <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c0e:	e06c      	b.n	8003cea <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 031c 	and.w	r3, r3, #28
 8003c18:	2202      	movs	r2, #2
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d02e      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xec>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d029      	beq.n	8003c82 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10b      	bne.n	8003c54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f022 020a 	bic.w	r2, r2, #10
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f003 021c 	and.w	r2, r3, #28
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c60:	2102      	movs	r1, #2
 8003c62:	fa01 f202 	lsl.w	r2, r1, r2
 8003c66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d038      	beq.n	8003cea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003c80:	e033      	b.n	8003cea <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f003 031c 	and.w	r3, r3, #28
 8003c8a:	2208      	movs	r2, #8
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4013      	ands	r3, r2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d02a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0308 	and.w	r3, r3, #8
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d025      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 020e 	bic.w	r2, r2, #14
 8003cae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f003 021c 	and.w	r2, r3, #28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
}
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	f003 021c 	and.w	r2, r3, #28
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f202 	lsl.w	r2, r1, r2
 8003d14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b10      	cmp	r3, #16
 8003d24:	d108      	bne.n	8003d38 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d36:	e007      	b.n	8003d48 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	60da      	str	r2, [r3, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d103      	bne.n	8003d74 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	605a      	str	r2, [r3, #4]
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
      break;
 8003d78:	bf00      	nop
  }

  return status;
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	371c      	adds	r7, #28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e003      	b.n	8003da4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003da2:	2300      	movs	r3, #0
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2201      	movs	r2, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_EXTI_IRQHandler+0x5c>)
 8003dda:	4413      	add	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	693a      	ldr	r2, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	4798      	blx	r3
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40010414 	.word	0x40010414

08003e10 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	0c1b      	lsrs	r3, r3, #16
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 031f 	and.w	r3, r3, #31
 8003e2e:	2201      	movs	r2, #1
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	613b      	str	r3, [r7, #16]

  /* Get pending register address */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <HAL_EXTI_ClearPending+0x44>)
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  *regaddr =  maskline;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	601a      	str	r2, [r3, #0]
}
 8003e46:	bf00      	nop
 8003e48:	371c      	adds	r7, #28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40010414 	.word	0x40010414

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b087      	sub	sp, #28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e66:	e17f      	b.n	8004168 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa01 f303 	lsl.w	r3, r1, r3
 8003e74:	4013      	ands	r3, r2
 8003e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f000 8171 	beq.w	8004162 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0303 	and.w	r3, r3, #3
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d005      	beq.n	8003e98 <HAL_GPIO_Init+0x40>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d130      	bne.n	8003efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43db      	mvns	r3, r3
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	4013      	ands	r3, r2
 8003eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ece:	2201      	movs	r2, #1
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	091b      	lsrs	r3, r3, #4
 8003ee4:	f003 0201 	and.w	r2, r3, #1
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d118      	bne.n	8003f38 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	08db      	lsrs	r3, r3, #3
 8003f22:	f003 0201 	and.w	r2, r3, #1
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d017      	beq.n	8003f74 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d123      	bne.n	8003fc8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	220f      	movs	r2, #15
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	6939      	ldr	r1, [r7, #16]
 8003fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0203 	and.w	r2, r3, #3
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80ac 	beq.w	8004162 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	4b5f      	ldr	r3, [pc, #380]	; (8004188 <HAL_GPIO_Init+0x330>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400e:	4a5e      	ldr	r2, [pc, #376]	; (8004188 <HAL_GPIO_Init+0x330>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6613      	str	r3, [r2, #96]	; 0x60
 8004016:	4b5c      	ldr	r3, [pc, #368]	; (8004188 <HAL_GPIO_Init+0x330>)
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_GPIO_Init+0x334>)
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	089b      	lsrs	r3, r3, #2
 8004028:	3302      	adds	r3, #2
 800402a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	220f      	movs	r2, #15
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	43db      	mvns	r3, r3
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	4013      	ands	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800404c:	d025      	beq.n	800409a <HAL_GPIO_Init+0x242>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_GPIO_Init+0x338>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <HAL_GPIO_Init+0x23e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4e      	ldr	r2, [pc, #312]	; (8004194 <HAL_GPIO_Init+0x33c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d019      	beq.n	8004092 <HAL_GPIO_Init+0x23a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a4d      	ldr	r2, [pc, #308]	; (8004198 <HAL_GPIO_Init+0x340>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d013      	beq.n	800408e <HAL_GPIO_Init+0x236>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a4c      	ldr	r2, [pc, #304]	; (800419c <HAL_GPIO_Init+0x344>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00d      	beq.n	800408a <HAL_GPIO_Init+0x232>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a4b      	ldr	r2, [pc, #300]	; (80041a0 <HAL_GPIO_Init+0x348>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <HAL_GPIO_Init+0x22e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a4a      	ldr	r2, [pc, #296]	; (80041a4 <HAL_GPIO_Init+0x34c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_GPIO_Init+0x22a>
 800407e:	2306      	movs	r3, #6
 8004080:	e00c      	b.n	800409c <HAL_GPIO_Init+0x244>
 8004082:	2307      	movs	r3, #7
 8004084:	e00a      	b.n	800409c <HAL_GPIO_Init+0x244>
 8004086:	2305      	movs	r3, #5
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x244>
 800408a:	2304      	movs	r3, #4
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x244>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x244>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x244>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x244>
 800409a:	2300      	movs	r3, #0
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ac:	4937      	ldr	r1, [pc, #220]	; (800418c <HAL_GPIO_Init+0x334>)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_GPIO_Init+0x350>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4013      	ands	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040de:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <HAL_GPIO_Init+0x350>)
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_GPIO_Init+0x350>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	4013      	ands	r3, r2
 80040f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <HAL_GPIO_Init+0x350>)
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_GPIO_Init+0x350>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4013      	ands	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_GPIO_Init+0x350>)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_GPIO_Init+0x350>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43db      	mvns	r3, r3
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800415c:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_GPIO_Init+0x350>)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	3301      	adds	r3, #1
 8004166:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa22 f303 	lsr.w	r3, r2, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	f47f ae78 	bne.w	8003e68 <HAL_GPIO_Init+0x10>
  }
}
 8004178:	bf00      	nop
 800417a:	bf00      	nop
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40021000 	.word	0x40021000
 800418c:	40010000 	.word	0x40010000
 8004190:	48000400 	.word	0x48000400
 8004194:	48000800 	.word	0x48000800
 8004198:	48000c00 	.word	0x48000c00
 800419c:	48001000 	.word	0x48001000
 80041a0:	48001400 	.word	0x48001400
 80041a4:	48001800 	.word	0x48001800
 80041a8:	40010400 	.word	0x40010400

080041ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80041ba:	e0cd      	b.n	8004358 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80041bc:	2201      	movs	r2, #1
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	4013      	ands	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80c0 	beq.w	8004352 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80041d2:	4a68      	ldr	r2, [pc, #416]	; (8004374 <HAL_GPIO_DeInit+0x1c8>)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	089b      	lsrs	r3, r3, #2
 80041d8:	3302      	adds	r3, #2
 80041da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041de:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	220f      	movs	r2, #15
 80041ea:	fa02 f303 	lsl.w	r3, r2, r3
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4013      	ands	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80041fa:	d025      	beq.n	8004248 <HAL_GPIO_DeInit+0x9c>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a5e      	ldr	r2, [pc, #376]	; (8004378 <HAL_GPIO_DeInit+0x1cc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d01f      	beq.n	8004244 <HAL_GPIO_DeInit+0x98>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_GPIO_DeInit+0x1d0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d019      	beq.n	8004240 <HAL_GPIO_DeInit+0x94>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a5c      	ldr	r2, [pc, #368]	; (8004380 <HAL_GPIO_DeInit+0x1d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_GPIO_DeInit+0x90>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_GPIO_DeInit+0x1d8>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00d      	beq.n	8004238 <HAL_GPIO_DeInit+0x8c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a5a      	ldr	r2, [pc, #360]	; (8004388 <HAL_GPIO_DeInit+0x1dc>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <HAL_GPIO_DeInit+0x88>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a59      	ldr	r2, [pc, #356]	; (800438c <HAL_GPIO_DeInit+0x1e0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d101      	bne.n	8004230 <HAL_GPIO_DeInit+0x84>
 800422c:	2306      	movs	r3, #6
 800422e:	e00c      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004230:	2307      	movs	r3, #7
 8004232:	e00a      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004234:	2305      	movs	r3, #5
 8004236:	e008      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004238:	2304      	movs	r3, #4
 800423a:	e006      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 800423c:	2303      	movs	r3, #3
 800423e:	e004      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004240:	2302      	movs	r3, #2
 8004242:	e002      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004244:	2301      	movs	r3, #1
 8004246:	e000      	b.n	800424a <HAL_GPIO_DeInit+0x9e>
 8004248:	2300      	movs	r3, #0
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	0092      	lsls	r2, r2, #2
 8004252:	4093      	lsls	r3, r2
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	429a      	cmp	r2, r3
 8004258:	d132      	bne.n	80042c0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800425a:	4b4d      	ldr	r3, [pc, #308]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	494b      	ldr	r1, [pc, #300]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 8004264:	4013      	ands	r3, r2
 8004266:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	43db      	mvns	r3, r3
 8004270:	4947      	ldr	r1, [pc, #284]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 8004272:	4013      	ands	r3, r2
 8004274:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 8004278:	68da      	ldr	r2, [r3, #12]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	4944      	ldr	r1, [pc, #272]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 8004280:	4013      	ands	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004284:	4b42      	ldr	r3, [pc, #264]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	4940      	ldr	r1, [pc, #256]	; (8004390 <HAL_GPIO_DeInit+0x1e4>)
 800428e:	4013      	ands	r3, r2
 8004290:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80042a2:	4a34      	ldr	r2, [pc, #208]	; (8004374 <HAL_GPIO_DeInit+0x1c8>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	3302      	adds	r3, #2
 80042aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	43da      	mvns	r2, r3
 80042b2:	4830      	ldr	r0, [pc, #192]	; (8004374 <HAL_GPIO_DeInit+0x1c8>)
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	089b      	lsrs	r3, r3, #2
 80042b8:	400a      	ands	r2, r1
 80042ba:	3302      	adds	r3, #2
 80042bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	2103      	movs	r1, #3
 80042ca:	fa01 f303 	lsl.w	r3, r1, r3
 80042ce:	431a      	orrs	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	08da      	lsrs	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3208      	adds	r2, #8
 80042dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	220f      	movs	r2, #15
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	08d2      	lsrs	r2, r2, #3
 80042f4:	4019      	ands	r1, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3208      	adds	r2, #8
 80042fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2103      	movs	r1, #3
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	2101      	movs	r1, #1
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	43db      	mvns	r3, r3
 8004322:	401a      	ands	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	2103      	movs	r1, #3
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	401a      	ands	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004342:	2101      	movs	r1, #1
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	401a      	ands	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	3301      	adds	r3, #1
 8004356:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	f47f af2b 	bne.w	80041bc <HAL_GPIO_DeInit+0x10>
  }
}
 8004366:	bf00      	nop
 8004368:	bf00      	nop
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	40010000 	.word	0x40010000
 8004378:	48000400 	.word	0x48000400
 800437c:	48000800 	.word	0x48000800
 8004380:	48000c00 	.word	0x48000c00
 8004384:	48001000 	.word	0x48001000
 8004388:	48001400 	.word	0x48001400
 800438c:	48001800 	.word	0x48001800
 8004390:	40010400 	.word	0x40010400

08004394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	807b      	strh	r3, [r7, #2]
 80043a0:	4613      	mov	r3, r2
 80043a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a4:	787b      	ldrb	r3, [r7, #1]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043aa:	887a      	ldrh	r2, [r7, #2]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043b0:	e002      	b.n	80043b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043b2:	887a      	ldrh	r2, [r7, #2]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043c8:	4b04      	ldr	r3, [pc, #16]	; (80043dc <HAL_PWREx_GetVoltageRange+0x18>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40007000 	.word	0x40007000

080043e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ee:	d130      	bne.n	8004452 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80043f0:	4b23      	ldr	r3, [pc, #140]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d038      	beq.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043fe:	4b20      	ldr	r3, [pc, #128]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800440c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800440e:	4b1d      	ldr	r3, [pc, #116]	; (8004484 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2232      	movs	r2, #50	; 0x32
 8004414:	fb02 f303 	mul.w	r3, r2, r3
 8004418:	4a1b      	ldr	r2, [pc, #108]	; (8004488 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800441a:	fba2 2303 	umull	r2, r3, r2, r3
 800441e:	0c9b      	lsrs	r3, r3, #18
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004424:	e002      	b.n	800442c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3b01      	subs	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800442c:	4b14      	ldr	r3, [pc, #80]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004438:	d102      	bne.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x60>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f2      	bne.n	8004426 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d110      	bne.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e00f      	b.n	8004472 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004452:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800445a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800445e:	d007      	beq.n	8004470 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004468:	4a05      	ldr	r2, [pc, #20]	; (8004480 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800446e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40007000 	.word	0x40007000
 8004484:	20000000 	.word	0x20000000
 8004488:	431bde83 	.word	0x431bde83

0800448c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e3ca      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800449e:	4b97      	ldr	r3, [pc, #604]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044a8:	4b94      	ldr	r3, [pc, #592]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 80e4 	beq.w	8004688 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <HAL_RCC_OscConfig+0x4a>
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f040 808b 	bne.w	80045e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	f040 8087 	bne.w	80045e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044d6:	4b89      	ldr	r3, [pc, #548]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d005      	beq.n	80044ee <HAL_RCC_OscConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	699b      	ldr	r3, [r3, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e3a2      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	4b82      	ldr	r3, [pc, #520]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_RCC_OscConfig+0x7c>
 80044fe:	4b7f      	ldr	r3, [pc, #508]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004506:	e005      	b.n	8004514 <HAL_RCC_OscConfig+0x88>
 8004508:	4b7c      	ldr	r3, [pc, #496]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800450a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450e:	091b      	lsrs	r3, r3, #4
 8004510:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004514:	4293      	cmp	r3, r2
 8004516:	d223      	bcs.n	8004560 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fd1d 	bl	8004f5c <RCC_SetFlashLatencyFromMSIRange>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d001      	beq.n	800452c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e383      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800452c:	4b73      	ldr	r3, [pc, #460]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a72      	ldr	r2, [pc, #456]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004532:	f043 0308 	orr.w	r3, r3, #8
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b70      	ldr	r3, [pc, #448]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	496d      	ldr	r1, [pc, #436]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800454a:	4b6c      	ldr	r3, [pc, #432]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	4968      	ldr	r1, [pc, #416]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800455a:	4313      	orrs	r3, r2
 800455c:	604b      	str	r3, [r1, #4]
 800455e:	e025      	b.n	80045ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004560:	4b66      	ldr	r3, [pc, #408]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a65      	ldr	r2, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004566:	f043 0308 	orr.w	r3, r3, #8
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b63      	ldr	r3, [pc, #396]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4960      	ldr	r1, [pc, #384]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800457e:	4b5f      	ldr	r3, [pc, #380]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	495b      	ldr	r1, [pc, #364]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d109      	bne.n	80045ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fcdd 	bl	8004f5c <RCC_SetFlashLatencyFromMSIRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e343      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ac:	f000 fc4a 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b52      	ldr	r3, [pc, #328]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	091b      	lsrs	r3, r3, #4
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	4950      	ldr	r1, [pc, #320]	; (8004700 <HAL_RCC_OscConfig+0x274>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	f003 031f 	and.w	r3, r3, #31
 80045c4:	fa22 f303 	lsr.w	r3, r2, r3
 80045c8:	4a4e      	ldr	r2, [pc, #312]	; (8004704 <HAL_RCC_OscConfig+0x278>)
 80045ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80045cc:	4b4e      	ldr	r3, [pc, #312]	; (8004708 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fe f9cb 	bl	800296c <HAL_InitTick>
 80045d6:	4603      	mov	r3, r0
 80045d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d052      	beq.n	8004686 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	e327      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d032      	beq.n	8004652 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a42      	ldr	r2, [pc, #264]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80045f8:	f7fe fa08 	bl	8002a0c <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004600:	f7fe fa04 	bl	8002a0c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e310      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004612:	4b3a      	ldr	r3, [pc, #232]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a36      	ldr	r2, [pc, #216]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004624:	f043 0308 	orr.w	r3, r3, #8
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b34      	ldr	r3, [pc, #208]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4931      	ldr	r1, [pc, #196]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004638:	4313      	orrs	r3, r2
 800463a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800463c:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	69db      	ldr	r3, [r3, #28]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	492c      	ldr	r1, [pc, #176]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
 8004650:	e01a      	b.n	8004688 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004652:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800465e:	f7fe f9d5 	bl	8002a0c <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004666:	f7fe f9d1 	bl	8002a0c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e2dd      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004678:	4b20      	ldr	r3, [pc, #128]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1f0      	bne.n	8004666 <HAL_RCC_OscConfig+0x1da>
 8004684:	e000      	b.n	8004688 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004686:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d074      	beq.n	800477e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d005      	beq.n	80046a6 <HAL_RCC_OscConfig+0x21a>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b0c      	cmp	r3, #12
 800469e:	d10e      	bne.n	80046be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d10b      	bne.n	80046be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a6:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d064      	beq.n	800477c <HAL_RCC_OscConfig+0x2f0>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d160      	bne.n	800477c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e2ba      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c6:	d106      	bne.n	80046d6 <HAL_RCC_OscConfig+0x24a>
 80046c8:	4b0c      	ldr	r3, [pc, #48]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a0b      	ldr	r2, [pc, #44]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d2:	6013      	str	r3, [r2, #0]
 80046d4:	e026      	b.n	8004724 <HAL_RCC_OscConfig+0x298>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046de:	d115      	bne.n	800470c <HAL_RCC_OscConfig+0x280>
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a05      	ldr	r2, [pc, #20]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a02      	ldr	r2, [pc, #8]	; (80046fc <HAL_RCC_OscConfig+0x270>)
 80046f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	e014      	b.n	8004724 <HAL_RCC_OscConfig+0x298>
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000
 8004700:	08007440 	.word	0x08007440
 8004704:	20000000 	.word	0x20000000
 8004708:	20000068 	.word	0x20000068
 800470c:	4ba0      	ldr	r3, [pc, #640]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a9f      	ldr	r2, [pc, #636]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b9d      	ldr	r3, [pc, #628]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a9c      	ldr	r2, [pc, #624]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800471e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d013      	beq.n	8004754 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe f96e 	bl	8002a0c <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004734:	f7fe f96a 	bl	8002a0c <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b64      	cmp	r3, #100	; 0x64
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e276      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004746:	4b92      	ldr	r3, [pc, #584]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x2a8>
 8004752:	e014      	b.n	800477e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004754:	f7fe f95a 	bl	8002a0c <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800475a:	e008      	b.n	800476e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800475c:	f7fe f956 	bl	8002a0c <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e262      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800476e:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1f0      	bne.n	800475c <HAL_RCC_OscConfig+0x2d0>
 800477a:	e000      	b.n	800477e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800477c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d060      	beq.n	800484c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b04      	cmp	r3, #4
 800478e:	d005      	beq.n	800479c <HAL_RCC_OscConfig+0x310>
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2b0c      	cmp	r3, #12
 8004794:	d119      	bne.n	80047ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d116      	bne.n	80047ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800479c:	4b7c      	ldr	r3, [pc, #496]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <HAL_RCC_OscConfig+0x328>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e23f      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b4:	4b76      	ldr	r3, [pc, #472]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	061b      	lsls	r3, r3, #24
 80047c2:	4973      	ldr	r1, [pc, #460]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047c8:	e040      	b.n	800484c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d023      	beq.n	800481a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d2:	4b6f      	ldr	r3, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a6e      	ldr	r2, [pc, #440]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fe f915 	bl	8002a0c <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e6:	f7fe f911 	bl	8002a0c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e21d      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047f8:	4b65      	ldr	r3, [pc, #404]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004804:	4b62      	ldr	r3, [pc, #392]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	495f      	ldr	r1, [pc, #380]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004814:	4313      	orrs	r3, r2
 8004816:	604b      	str	r3, [r1, #4]
 8004818:	e018      	b.n	800484c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481a:	4b5d      	ldr	r3, [pc, #372]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5c      	ldr	r2, [pc, #368]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fe f8f1 	bl	8002a0c <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800482e:	f7fe f8ed 	bl	8002a0c <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e1f9      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004840:	4b53      	ldr	r3, [pc, #332]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d03c      	beq.n	80048d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01c      	beq.n	800489a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004860:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004862:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004866:	4a4a      	ldr	r2, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004870:	f7fe f8cc 	bl	8002a0c <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004878:	f7fe f8c8 	bl	8002a0c <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b02      	cmp	r3, #2
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1d4      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ef      	beq.n	8004878 <HAL_RCC_OscConfig+0x3ec>
 8004898:	e01b      	b.n	80048d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800489a:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800489c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a0:	4a3b      	ldr	r2, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048aa:	f7fe f8af 	bl	8002a0c <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048b0:	e008      	b.n	80048c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048b2:	f7fe f8ab 	bl	8002a0c <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d901      	bls.n	80048c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e1b7      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048c4:	4b32      	ldr	r3, [pc, #200]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ef      	bne.n	80048b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0304 	and.w	r3, r3, #4
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80a6 	beq.w	8004a2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048e0:	2300      	movs	r3, #0
 80048e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80048e4:	4b2a      	ldr	r3, [pc, #168]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10d      	bne.n	800490c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048f0:	4b27      	ldr	r3, [pc, #156]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fa:	6593      	str	r3, [r2, #88]	; 0x58
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004904:	60bb      	str	r3, [r7, #8]
 8004906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004908:	2301      	movs	r3, #1
 800490a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800490c:	4b21      	ldr	r3, [pc, #132]	; (8004994 <HAL_RCC_OscConfig+0x508>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d118      	bne.n	800494a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_RCC_OscConfig+0x508>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1d      	ldr	r2, [pc, #116]	; (8004994 <HAL_RCC_OscConfig+0x508>)
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004924:	f7fe f872 	bl	8002a0c <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800492c:	f7fe f86e 	bl	8002a0c <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e17a      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800493e:	4b15      	ldr	r3, [pc, #84]	; (8004994 <HAL_RCC_OscConfig+0x508>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d108      	bne.n	8004964 <HAL_RCC_OscConfig+0x4d8>
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004962:	e029      	b.n	80049b8 <HAL_RCC_OscConfig+0x52c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b05      	cmp	r3, #5
 800496a:	d115      	bne.n	8004998 <HAL_RCC_OscConfig+0x50c>
 800496c:	4b08      	ldr	r3, [pc, #32]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004974:	f043 0304 	orr.w	r3, r3, #4
 8004978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800497c:	4b04      	ldr	r3, [pc, #16]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	4a03      	ldr	r2, [pc, #12]	; (8004990 <HAL_RCC_OscConfig+0x504>)
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800498c:	e014      	b.n	80049b8 <HAL_RCC_OscConfig+0x52c>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
 8004998:	4b9c      	ldr	r3, [pc, #624]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499e:	4a9b      	ldr	r2, [pc, #620]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 80049a0:	f023 0301 	bic.w	r3, r3, #1
 80049a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049a8:	4b98      	ldr	r3, [pc, #608]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	4a97      	ldr	r2, [pc, #604]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 80049b0:	f023 0304 	bic.w	r3, r3, #4
 80049b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d016      	beq.n	80049ee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c0:	f7fe f824 	bl	8002a0c <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049c6:	e00a      	b.n	80049de <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c8:	f7fe f820 	bl	8002a0c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e12a      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049de:	4b8b      	ldr	r3, [pc, #556]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 80049e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0ed      	beq.n	80049c8 <HAL_RCC_OscConfig+0x53c>
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ee:	f7fe f80d 	bl	8002a0c <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80049f4:	e00a      	b.n	8004a0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fe f809 	bl	8002a0c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e113      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a0c:	4b7f      	ldr	r3, [pc, #508]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1ed      	bne.n	80049f6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a1a:	7ffb      	ldrb	r3, [r7, #31]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d105      	bne.n	8004a2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a20:	4b7a      	ldr	r3, [pc, #488]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	4a79      	ldr	r2, [pc, #484]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 80fe 	beq.w	8004c32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	f040 80d0 	bne.w	8004be0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004a40:	4b72      	ldr	r3, [pc, #456]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f003 0203 	and.w	r2, r3, #3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d130      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d127      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d11f      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a80:	2a07      	cmp	r2, #7
 8004a82:	bf14      	ite	ne
 8004a84:	2201      	movne	r2, #1
 8004a86:	2200      	moveq	r2, #0
 8004a88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d113      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d109      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d06e      	beq.n	8004b94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b0c      	cmp	r3, #12
 8004aba:	d069      	beq.n	8004b90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d105      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0ad      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ad8:	4b4c      	ldr	r3, [pc, #304]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a4b      	ldr	r2, [pc, #300]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004ade:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ae2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ae4:	f7fd ff92 	bl	8002a0c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd ff8e 	bl	8002a0c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e09a      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	4b40      	ldr	r3, [pc, #256]	; (8004c10 <HAL_RCC_OscConfig+0x784>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	0112      	lsls	r2, r2, #4
 8004b1e:	4311      	orrs	r1, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b24:	0212      	lsls	r2, r2, #8
 8004b26:	4311      	orrs	r1, r2
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b2c:	0852      	lsrs	r2, r2, #1
 8004b2e:	3a01      	subs	r2, #1
 8004b30:	0552      	lsls	r2, r2, #21
 8004b32:	4311      	orrs	r1, r2
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b38:	0852      	lsrs	r2, r2, #1
 8004b3a:	3a01      	subs	r2, #1
 8004b3c:	0652      	lsls	r2, r2, #25
 8004b3e:	4311      	orrs	r1, r2
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b44:	0912      	lsrs	r2, r2, #4
 8004b46:	0452      	lsls	r2, r2, #17
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	4930      	ldr	r1, [pc, #192]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b50:	4b2e      	ldr	r3, [pc, #184]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2d      	ldr	r2, [pc, #180]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b5c:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b68:	f7fd ff50 	bl	8002a0c <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd ff4c 	bl	8002a0c <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e058      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b82:	4b22      	ldr	r3, [pc, #136]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b8e:	e050      	b.n	8004c32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e04f      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b94:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d148      	bne.n	8004c32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b1a      	ldr	r3, [pc, #104]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a19      	ldr	r2, [pc, #100]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bac:	4b17      	ldr	r3, [pc, #92]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	4a16      	ldr	r2, [pc, #88]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bb8:	f7fd ff28 	bl	8002a0c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fd ff24 	bl	8002a0c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e030      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x734>
 8004bde:	e028      	b.n	8004c32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d023      	beq.n	8004c2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_RCC_OscConfig+0x780>)
 8004bec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fd ff0b 	bl	8002a0c <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf8:	e00c      	b.n	8004c14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fd ff07 	bl	8002a0c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d905      	bls.n	8004c14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e013      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <HAL_RCC_OscConfig+0x7b0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ec      	bne.n	8004bfa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_RCC_OscConfig+0x7b0>)
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	4905      	ldr	r1, [pc, #20]	; (8004c3c <HAL_RCC_OscConfig+0x7b0>)
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_RCC_OscConfig+0x7b4>)
 8004c28:	4013      	ands	r3, r2
 8004c2a:	60cb      	str	r3, [r1, #12]
 8004c2c:	e001      	b.n	8004c32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e000      	b.n	8004c34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3720      	adds	r7, #32
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	feeefffc 	.word	0xfeeefffc

08004c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d101      	bne.n	8004c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0e7      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c58:	4b75      	ldr	r3, [pc, #468]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d910      	bls.n	8004c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f023 0207 	bic.w	r2, r3, #7
 8004c6e:	4970      	ldr	r1, [pc, #448]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c76:	4b6e      	ldr	r3, [pc, #440]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0cf      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0302 	and.w	r3, r3, #2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d010      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b66      	ldr	r3, [pc, #408]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d908      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca4:	4b63      	ldr	r3, [pc, #396]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4960      	ldr	r1, [pc, #384]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d04c      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cca:	4b5a      	ldr	r3, [pc, #360]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e0a6      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d107      	bne.n	8004cf2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce2:	4b54      	ldr	r3, [pc, #336]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d115      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e09a      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d107      	bne.n	8004d0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfa:	4b4e      	ldr	r3, [pc, #312]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e08e      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d0a:	4b4a      	ldr	r3, [pc, #296]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e086      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d1a:	4b46      	ldr	r3, [pc, #280]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f023 0203 	bic.w	r2, r3, #3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	4943      	ldr	r1, [pc, #268]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2c:	f7fd fe6e 	bl	8002a0c <HAL_GetTick>
 8004d30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d32:	e00a      	b.n	8004d4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d34:	f7fd fe6a 	bl	8002a0c <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d901      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	e06e      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4a:	4b3a      	ldr	r3, [pc, #232]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 020c 	and.w	r2, r3, #12
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d1eb      	bne.n	8004d34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d010      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	4b31      	ldr	r3, [pc, #196]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d208      	bcs.n	8004d8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	492b      	ldr	r1, [pc, #172]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d210      	bcs.n	8004dba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d98:	4b25      	ldr	r3, [pc, #148]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 0207 	bic.w	r2, r3, #7
 8004da0:	4923      	ldr	r1, [pc, #140]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da8:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <HAL_RCC_ClockConfig+0x1ec>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e036      	b.n	8004e28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dc6:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4918      	ldr	r1, [pc, #96]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d009      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004de4:	4b13      	ldr	r3, [pc, #76]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4910      	ldr	r1, [pc, #64]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004df8:	f000 f824 	bl	8004e44 <HAL_RCC_GetSysClockFreq>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCC_ClockConfig+0x1f0>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	490b      	ldr	r1, [pc, #44]	; (8004e38 <HAL_RCC_ClockConfig+0x1f4>)
 8004e0a:	5ccb      	ldrb	r3, [r1, r3]
 8004e0c:	f003 031f 	and.w	r3, r3, #31
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	4a09      	ldr	r2, [pc, #36]	; (8004e3c <HAL_RCC_ClockConfig+0x1f8>)
 8004e16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e18:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <HAL_RCC_ClockConfig+0x1fc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fd fda5 	bl	800296c <HAL_InitTick>
 8004e22:	4603      	mov	r3, r0
 8004e24:	72fb      	strb	r3, [r7, #11]

  return status;
 8004e26:	7afb      	ldrb	r3, [r7, #11]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40022000 	.word	0x40022000
 8004e34:	40021000 	.word	0x40021000
 8004e38:	08007440 	.word	0x08007440
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	20000068 	.word	0x20000068

08004e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b089      	sub	sp, #36	; 0x24
 8004e48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e52:	4b3e      	ldr	r3, [pc, #248]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 030c 	and.w	r3, r3, #12
 8004e5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e5c:	4b3b      	ldr	r3, [pc, #236]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0303 	and.w	r3, r3, #3
 8004e64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x34>
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	2b0c      	cmp	r3, #12
 8004e70:	d121      	bne.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d11e      	bne.n	8004eb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004e78:	4b34      	ldr	r3, [pc, #208]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004e84:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e005      	b.n	8004ea0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	091b      	lsrs	r3, r3, #4
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ea0:	4a2b      	ldr	r2, [pc, #172]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10d      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004eb4:	e00a      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d102      	bne.n	8004ec2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ebe:	61bb      	str	r3, [r7, #24]
 8004ec0:	e004      	b.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ec8:	4b23      	ldr	r3, [pc, #140]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8004eca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	2b0c      	cmp	r3, #12
 8004ed0:	d134      	bne.n	8004f3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ed2:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_GetSysClockFreq+0xa6>
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d003      	beq.n	8004ef0 <HAL_RCC_GetSysClockFreq+0xac>
 8004ee8:	e005      	b.n	8004ef6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004eea:	4b1a      	ldr	r3, [pc, #104]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x110>)
 8004eec:	617b      	str	r3, [r7, #20]
      break;
 8004eee:	e005      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ef0:	4b19      	ldr	r3, [pc, #100]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ef2:	617b      	str	r3, [r7, #20]
      break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	617b      	str	r3, [r7, #20]
      break;
 8004efa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004efc:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	3301      	adds	r3, #1
 8004f08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f0a:	4b10      	ldr	r3, [pc, #64]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	fb03 f202 	mul.w	r2, r3, r2
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f22:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <HAL_RCC_GetSysClockFreq+0x108>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	0e5b      	lsrs	r3, r3, #25
 8004f28:	f003 0303 	and.w	r3, r3, #3
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	08007450 	.word	0x08007450
 8004f54:	00f42400 	.word	0x00f42400
 8004f58:	007a1200 	.word	0x007a1200

08004f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f64:	2300      	movs	r3, #0
 8004f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f74:	f7ff fa26 	bl	80043c4 <HAL_PWREx_GetVoltageRange>
 8004f78:	6178      	str	r0, [r7, #20]
 8004f7a:	e014      	b.n	8004fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f7c:	4b25      	ldr	r3, [pc, #148]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	4a24      	ldr	r2, [pc, #144]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6593      	str	r3, [r2, #88]	; 0x58
 8004f88:	4b22      	ldr	r3, [pc, #136]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f94:	f7ff fa16 	bl	80043c4 <HAL_PWREx_GetVoltageRange>
 8004f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f9a:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f9e:	4a1d      	ldr	r2, [pc, #116]	; (8005014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fac:	d10b      	bne.n	8004fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b80      	cmp	r3, #128	; 0x80
 8004fb2:	d919      	bls.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8004fb8:	d902      	bls.n	8004fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fba:	2302      	movs	r3, #2
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e013      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	e010      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b80      	cmp	r3, #128	; 0x80
 8004fca:	d902      	bls.n	8004fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fcc:	2303      	movs	r3, #3
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	e00a      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d102      	bne.n	8004fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fd8:	2302      	movs	r3, #2
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	e004      	b.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d101      	bne.n	8004fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f023 0207 	bic.w	r2, r3, #7
 8004ff0:	4909      	ldr	r1, [pc, #36]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ff8:	4b07      	ldr	r3, [pc, #28]	; (8005018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d001      	beq.n	800500a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40021000 	.word	0x40021000
 8005018:	40022000 	.word	0x40022000

0800501c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e0b9      	b.n	80051a2 <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503e:	d009      	beq.n	8005054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
 8005046:	e005      	b.n	8005054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d12a      	bne.n	80050bc <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a4e      	ldr	r2, [pc, #312]	; (80051ac <HAL_SPI_Init+0x190>)
 8005072:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a4e      	ldr	r2, [pc, #312]	; (80051b0 <HAL_SPI_Init+0x194>)
 8005078:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a4d      	ldr	r2, [pc, #308]	; (80051b4 <HAL_SPI_Init+0x198>)
 800507e:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a4d      	ldr	r2, [pc, #308]	; (80051b8 <HAL_SPI_Init+0x19c>)
 8005084:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a4c      	ldr	r2, [pc, #304]	; (80051bc <HAL_SPI_Init+0x1a0>)
 800508a:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a4c      	ldr	r2, [pc, #304]	; (80051c0 <HAL_SPI_Init+0x1a4>)
 8005090:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4b      	ldr	r2, [pc, #300]	; (80051c4 <HAL_SPI_Init+0x1a8>)
 8005096:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a4b      	ldr	r2, [pc, #300]	; (80051c8 <HAL_SPI_Init+0x1ac>)
 800509c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d103      	bne.n	80050b2 <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a47      	ldr	r2, [pc, #284]	; (80051cc <HAL_SPI_Init+0x1b0>)
 80050ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050dc:	d902      	bls.n	80050e4 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050de:	2300      	movs	r3, #0
 80050e0:	60fb      	str	r3, [r7, #12]
 80050e2:	e002      	b.n	80050ea <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050f2:	d007      	beq.n	8005104 <HAL_SPI_Init+0xe8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050fc:	d002      	beq.n	8005104 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005114:	431a      	orrs	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	695b      	ldr	r3, [r3, #20]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	431a      	orrs	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699b      	ldr	r3, [r3, #24]
 800512e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	69db      	ldr	r3, [r3, #28]
 8005138:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800513c:	431a      	orrs	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005146:	ea42 0103 	orr.w	r1, r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 0204 	and.w	r2, r3, #4
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005180:	ea42 0103 	orr.w	r1, r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	0800665d 	.word	0x0800665d
 80051b0:	08006671 	.word	0x08006671
 80051b4:	08006685 	.word	0x08006685
 80051b8:	08006699 	.word	0x08006699
 80051bc:	080066ad 	.word	0x080066ad
 80051c0:	080066c1 	.word	0x080066c1
 80051c4:	080066d5 	.word	0x080066d5
 80051c8:	080066e9 	.word	0x080066e9
 80051cc:	0800523d 	.word	0x0800523d

080051d0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e025      	b.n	800522e <HAL_SPI_DeInit+0x5e>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f8:	601a      	str	r2, [r3, #0]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  if (hspi->MspDeInitCallback == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <HAL_SPI_DeInit+0x3c>
  {
    hspi->MspDeInitCallback = HAL_SPI_MspDeInit; /* Legacy weak MspDeInit  */
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <HAL_SPI_DeInit+0x68>)
 8005208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	08005251 	.word	0x08005251

0800523c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	460b      	mov	r3, r1
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d107      	bne.n	800528c <HAL_SPI_RegisterCallback+0x28>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005280:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e08b      	b.n	80053a4 <HAL_SPI_RegisterCallback+0x140>
  }
  /* Process locked */
  __HAL_LOCK(hspi);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005292:	2b01      	cmp	r3, #1
 8005294:	d101      	bne.n	800529a <HAL_SPI_RegisterCallback+0x36>
 8005296:	2302      	movs	r3, #2
 8005298:	e084      	b.n	80053a4 <HAL_SPI_RegisterCallback+0x140>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (HAL_SPI_STATE_READY == hspi->State)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d14e      	bne.n	800534c <HAL_SPI_RegisterCallback+0xe8>
  {
    switch (CallbackID)
 80052ae:	7afb      	ldrb	r3, [r7, #11]
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d842      	bhi.n	800533a <HAL_SPI_RegisterCallback+0xd6>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <HAL_SPI_RegisterCallback+0x58>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e5 	.word	0x080052e5
 80052c0:	080052ed 	.word	0x080052ed
 80052c4:	080052f5 	.word	0x080052f5
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	08005305 	.word	0x08005305
 80052d0:	0800530d 	.word	0x0800530d
 80052d4:	08005315 	.word	0x08005315
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	08005327 	.word	0x08005327
 80052e0:	08005331 	.word	0x08005331
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80052ea:	e056      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80052f2:	e052      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80052fa:	e04e      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8005302:	e04a      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800530a:	e046      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8005312:	e042      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800531a:	e03e      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8005324:	e039      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800532e:	e034      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005338:	e02f      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800533e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	75fb      	strb	r3, [r7, #23]
        break;
 800534a:	e026      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d118      	bne.n	800538a <HAL_SPI_RegisterCallback+0x126>
  {
    switch (CallbackID)
 8005358:	7afb      	ldrb	r3, [r7, #11]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d002      	beq.n	8005364 <HAL_SPI_RegisterCallback+0x100>
 800535e:	2b09      	cmp	r3, #9
 8005360:	d005      	beq.n	800536e <HAL_SPI_RegisterCallback+0x10a>
 8005362:	e009      	b.n	8005378 <HAL_SPI_RegisterCallback+0x114>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800536c:	e015      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8005376:	e010      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	661a      	str	r2, [r3, #96]	; 0x60

        /* Return error status */
        status =  HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	75fb      	strb	r3, [r7, #23]
        break;
 8005388:	e007      	b.n	800539a <HAL_SPI_RegisterCallback+0x136>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return error status */
    status =  HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return status;
 80053a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	4613      	mov	r3, r2
 80053be:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d101      	bne.n	80053d2 <HAL_SPI_Transmit+0x22>
 80053ce:	2302      	movs	r3, #2
 80053d0:	e158      	b.n	8005684 <HAL_SPI_Transmit+0x2d4>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053da:	f7fd fb17 	bl	8002a0c <HAL_GetTick>
 80053de:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d002      	beq.n	80053f6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053f0:	2302      	movs	r3, #2
 80053f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053f4:	e13d      	b.n	8005672 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_Transmit+0x52>
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005406:	e134      	b.n	8005672 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2203      	movs	r2, #3
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	88fa      	ldrh	r2, [r7, #6]
 8005420:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	88fa      	ldrh	r2, [r7, #6]
 8005426:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005452:	d10f      	bne.n	8005474 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005462:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005472:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	2b40      	cmp	r3, #64	; 0x40
 8005480:	d007      	beq.n	8005492 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005490:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800549a:	d94b      	bls.n	8005534 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <HAL_SPI_Transmit+0xfa>
 80054a4:	8afb      	ldrh	r3, [r7, #22]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d13e      	bne.n	8005528 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	881a      	ldrh	r2, [r3, #0]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ba:	1c9a      	adds	r2, r3, #2
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	3b01      	subs	r3, #1
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054ce:	e02b      	b.n	8005528 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d112      	bne.n	8005504 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ee:	1c9a      	adds	r2, r3, #2
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005502:	e011      	b.n	8005528 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005504:	f7fd fa82 	bl	8002a0c <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d803      	bhi.n	800551c <HAL_SPI_Transmit+0x16c>
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551a:	d102      	bne.n	8005522 <HAL_SPI_Transmit+0x172>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d102      	bne.n	8005528 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005526:	e0a4      	b.n	8005672 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1ce      	bne.n	80054d0 <HAL_SPI_Transmit+0x120>
 8005532:	e07c      	b.n	800562e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_SPI_Transmit+0x192>
 800553c:	8afb      	ldrh	r3, [r7, #22]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d170      	bne.n	8005624 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005546:	b29b      	uxth	r3, r3
 8005548:	2b01      	cmp	r3, #1
 800554a:	d912      	bls.n	8005572 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	881a      	ldrh	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	1c9a      	adds	r2, r3, #2
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005566:	b29b      	uxth	r3, r3
 8005568:	3b02      	subs	r3, #2
 800556a:	b29a      	uxth	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005570:	e058      	b.n	8005624 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	330c      	adds	r3, #12
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005584:	1c5a      	adds	r2, r3, #1
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005598:	e044      	b.n	8005624 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d12b      	bne.n	8005600 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d912      	bls.n	80055d8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	881a      	ldrh	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	1c9a      	adds	r2, r3, #2
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d6:	e025      	b.n	8005624 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	7812      	ldrb	r2, [r2, #0]
 80055e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055fe:	e011      	b.n	8005624 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005600:	f7fd fa04 	bl	8002a0c <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d803      	bhi.n	8005618 <HAL_SPI_Transmit+0x268>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d102      	bne.n	800561e <HAL_SPI_Transmit+0x26e>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005622:	e026      	b.n	8005672 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1b5      	bne.n	800559a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	6839      	ldr	r1, [r7, #0]
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f001 fb40 	bl	8006cb8 <SPI_EndRxTxTransaction>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800564c:	2300      	movs	r3, #0
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005666:	2b00      	cmp	r3, #0
 8005668:	d002      	beq.n	8005670 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	77fb      	strb	r3, [r7, #31]
 800566e:	e000      	b.n	8005672 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005670:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005682:	7ffb      	ldrb	r3, [r7, #31]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	4613      	mov	r3, r2
 800569a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056a8:	d112      	bne.n	80056d0 <HAL_SPI_Receive+0x44>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10e      	bne.n	80056d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2204      	movs	r2, #4
 80056b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f910 	bl	80058ec <HAL_SPI_TransmitReceive>
 80056cc:	4603      	mov	r3, r0
 80056ce:	e109      	b.n	80058e4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SPI_Receive+0x52>
 80056da:	2302      	movs	r3, #2
 80056dc:	e102      	b.n	80058e4 <HAL_SPI_Receive+0x258>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e6:	f7fd f991 	bl	8002a0c <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80056f8:	2302      	movs	r3, #2
 80056fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056fc:	e0e9      	b.n	80058d2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d002      	beq.n	800570a <HAL_SPI_Receive+0x7e>
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d102      	bne.n	8005710 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800570e:	e0e0      	b.n	80058d2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2204      	movs	r2, #4
 8005714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	88fa      	ldrh	r2, [r7, #6]
 8005728:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	88fa      	ldrh	r2, [r7, #6]
 8005730:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800575a:	d908      	bls.n	800576e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576a:	605a      	str	r2, [r3, #4]
 800576c:	e007      	b.n	800577e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800577c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005786:	d10f      	bne.n	80057a8 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057a6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b2:	2b40      	cmp	r3, #64	; 0x40
 80057b4:	d007      	beq.n	80057c6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057c4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057ce:	d867      	bhi.n	80058a0 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80057d0:	e030      	b.n	8005834 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d117      	bne.n	8005810 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f103 020c 	add.w	r2, r3, #12
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	b2d2      	uxtb	r2, r2
 80057f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800580e:	e011      	b.n	8005834 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005810:	f7fd f8fc 	bl	8002a0c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d803      	bhi.n	8005828 <HAL_SPI_Receive+0x19c>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005826:	d102      	bne.n	800582e <HAL_SPI_Receive+0x1a2>
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005832:	e04e      	b.n	80058d2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1c8      	bne.n	80057d2 <HAL_SPI_Receive+0x146>
 8005840:	e034      	b.n	80058ac <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b01      	cmp	r3, #1
 800584e:	d115      	bne.n	800587c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	b292      	uxth	r2, r2
 800585c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	1c9a      	adds	r2, r3, #2
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800587a:	e011      	b.n	80058a0 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800587c:	f7fd f8c6 	bl	8002a0c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d803      	bhi.n	8005894 <HAL_SPI_Receive+0x208>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005892:	d102      	bne.n	800589a <HAL_SPI_Receive+0x20e>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d102      	bne.n	80058a0 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800589e:	e018      	b.n	80058d2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ca      	bne.n	8005842 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f001 f9a9 	bl	8006c08 <SPI_EndRxTransaction>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2220      	movs	r2, #32
 80058c0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	75fb      	strb	r3, [r7, #23]
 80058ce:	e000      	b.n	80058d2 <HAL_SPI_Receive+0x246>
  }

error :
 80058d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80058fa:	2301      	movs	r3, #1
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x26>
 800590e:	2302      	movs	r3, #2
 8005910:	e1fb      	b.n	8005d0a <HAL_SPI_TransmitReceive+0x41e>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800591a:	f7fd f877 	bl	8002a0c <HAL_GetTick>
 800591e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005926:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800592e:	887b      	ldrh	r3, [r7, #2]
 8005930:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005932:	887b      	ldrh	r3, [r7, #2]
 8005934:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005936:	7efb      	ldrb	r3, [r7, #27]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d00e      	beq.n	800595a <HAL_SPI_TransmitReceive+0x6e>
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005942:	d106      	bne.n	8005952 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <HAL_SPI_TransmitReceive+0x66>
 800594c:	7efb      	ldrb	r3, [r7, #27]
 800594e:	2b04      	cmp	r3, #4
 8005950:	d003      	beq.n	800595a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005952:	2302      	movs	r3, #2
 8005954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005958:	e1cd      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d005      	beq.n	800596c <HAL_SPI_TransmitReceive+0x80>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d002      	beq.n	800596c <HAL_SPI_TransmitReceive+0x80>
 8005966:	887b      	ldrh	r3, [r7, #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005972:	e1c0      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800597a:	b2db      	uxtb	r3, r3
 800597c:	2b04      	cmp	r3, #4
 800597e:	d003      	beq.n	8005988 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2205      	movs	r2, #5
 8005984:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	887a      	ldrh	r2, [r7, #2]
 8005998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	887a      	ldrh	r2, [r7, #2]
 80059a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	887a      	ldrh	r2, [r7, #2]
 80059ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ca:	d802      	bhi.n	80059d2 <HAL_SPI_TransmitReceive+0xe6>
 80059cc:	8a3b      	ldrh	r3, [r7, #16]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d908      	bls.n	80059e4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059e0:	605a      	str	r2, [r3, #4]
 80059e2:	e007      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b40      	cmp	r3, #64	; 0x40
 8005a00:	d007      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a10:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a1a:	d97c      	bls.n	8005b16 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <HAL_SPI_TransmitReceive+0x13e>
 8005a24:	8a7b      	ldrh	r3, [r7, #18]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d169      	bne.n	8005afe <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3a:	1c9a      	adds	r2, r3, #2
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4e:	e056      	b.n	8005afe <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 0302 	and.w	r3, r3, #2
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d11b      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x1aa>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0x1aa>
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d113      	bne.n	8005a96 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a72:	881a      	ldrh	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7e:	1c9a      	adds	r2, r3, #2
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d11c      	bne.n	8005ade <HAL_SPI_TransmitReceive+0x1f2>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d016      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	b292      	uxth	r2, r2
 8005abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac2:	1c9a      	adds	r2, r3, #2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ade:	f7fc ff95 	bl	8002a0c <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d807      	bhi.n	8005afe <HAL_SPI_TransmitReceive+0x212>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af4:	d003      	beq.n	8005afe <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005afc:	e0fb      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1a3      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x164>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d19d      	bne.n	8005a50 <HAL_SPI_TransmitReceive+0x164>
 8005b14:	e0df      	b.n	8005cd6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x23a>
 8005b1e:	8a7b      	ldrh	r3, [r7, #18]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	f040 80cb 	bne.w	8005cbc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d912      	bls.n	8005b56 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b02      	subs	r3, #2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b54:	e0b2      	b.n	8005cbc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	330c      	adds	r3, #12
 8005b60:	7812      	ldrb	r2, [r2, #0]
 8005b62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7c:	e09e      	b.n	8005cbc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d134      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x30a>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d02f      	beq.n	8005bf6 <HAL_SPI_TransmitReceive+0x30a>
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d12c      	bne.n	8005bf6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d912      	bls.n	8005bcc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b02      	subs	r3, #2
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bca:	e012      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	7812      	ldrb	r2, [r2, #0]
 8005bd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	3b01      	subs	r3, #1
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d148      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x3aa>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d042      	beq.n	8005c96 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d923      	bls.n	8005c64 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	b292      	uxth	r2, r2
 8005c28:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	1c9a      	adds	r2, r3, #2
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b02      	subs	r3, #2
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d81f      	bhi.n	8005c92 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c60:	605a      	str	r2, [r3, #4]
 8005c62:	e016      	b.n	8005c92 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f103 020c 	add.w	r2, r3, #12
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	b2d2      	uxtb	r2, r2
 8005c74:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c92:	2301      	movs	r3, #1
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c96:	f7fc feb9 	bl	8002a0c <HAL_GetTick>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d803      	bhi.n	8005cae <HAL_SPI_TransmitReceive+0x3c2>
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d102      	bne.n	8005cb4 <HAL_SPI_TransmitReceive+0x3c8>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d103      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005cba:	e01c      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f47f af5b 	bne.w	8005b7e <HAL_SPI_TransmitReceive+0x292>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f47f af54 	bne.w	8005b7e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 ffec 	bl	8006cb8 <SPI_EndRxTxTransaction>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d006      	beq.n	8005cf4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
 8005cf2:	e000      	b.n	8005cf6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005cf4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3728      	adds	r7, #40	; 0x28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_SPI_Transmit_DMA+0x20>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e0d8      	b.n	8005ee6 <HAL_SPI_Transmit_DMA+0x1d2>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d4c:	e0c6      	b.n	8005edc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <HAL_SPI_Transmit_DMA+0x46>
 8005d54:	88fb      	ldrh	r3, [r7, #6]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d5e:	e0bd      	b.n	8005edc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2203      	movs	r2, #3
 8005d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	88fa      	ldrh	r2, [r7, #6]
 8005d78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	88fa      	ldrh	r2, [r7, #6]
 8005d7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005daa:	d10f      	bne.n	8005dcc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd0:	4a47      	ldr	r2, [pc, #284]	; (8005ef0 <HAL_SPI_Transmit_DMA+0x1dc>)
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd8:	4a46      	ldr	r2, [pc, #280]	; (8005ef4 <HAL_SPI_Transmit_DMA+0x1e0>)
 8005dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de0:	4a45      	ldr	r2, [pc, #276]	; (8005ef8 <HAL_SPI_Transmit_DMA+0x1e4>)
 8005de2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de8:	2200      	movs	r2, #0
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dfa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e04:	d82d      	bhi.n	8005e62 <HAL_SPI_Transmit_DMA+0x14e>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e10:	d127      	bne.n	8005e62 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10f      	bne.n	8005e40 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e2e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	085b      	lsrs	r3, r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e3e:	e010      	b.n	8005e62 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	085b      	lsrs	r3, r3, #1
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e78:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e7a:	f7fd fdeb 	bl	8003a54 <HAL_DMA_Start_IT>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00c      	beq.n	8005e9e <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005e9c:	e01e      	b.n	8005edc <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea8:	2b40      	cmp	r3, #64	; 0x40
 8005eaa:	d007      	beq.n	8005ebc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eba:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0220 	orr.w	r2, r2, #32
 8005eca:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0202 	orr.w	r2, r2, #2
 8005eda:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	08006903 	.word	0x08006903
 8005ef4:	08006719 	.word	0x08006719
 8005ef8:	0800695d 	.word	0x0800695d

08005efc <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d110      	bne.n	8005f38 <HAL_SPI_Receive_DMA+0x3c>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f1e:	d10b      	bne.n	8005f38 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2204      	movs	r2, #4
 8005f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	68b9      	ldr	r1, [r7, #8]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f908 	bl	8006144 <HAL_SPI_TransmitReceive_DMA>
 8005f34:	4603      	mov	r3, r0
 8005f36:	e0fb      	b.n	8006130 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_SPI_Receive_DMA+0x4a>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0f4      	b.n	8006130 <HAL_SPI_Receive_DMA+0x234>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f5e:	e0e2      	b.n	8006126 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d002      	beq.n	8005f6c <HAL_SPI_Receive_DMA+0x70>
 8005f66:	88fb      	ldrh	r3, [r7, #6]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d102      	bne.n	8005f72 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f70:	e0d9      	b.n	8006126 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2204      	movs	r2, #4
 8005f76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	88fa      	ldrh	r2, [r7, #6]
 8005f8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb6:	d10f      	bne.n	8005fd8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fd6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fe6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ff0:	d908      	bls.n	8006004 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	e042      	b.n	800608a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006012:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601e:	d134      	bne.n	800608a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800602e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006036:	b29b      	uxth	r3, r3
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d111      	bne.n	8006064 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800604e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006056:	b29b      	uxth	r3, r3
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006062:	e012      	b.n	800608a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006072:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800607a:	b29b      	uxth	r3, r3
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	b29b      	uxth	r3, r3
 8006080:	3301      	adds	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608e:	4a2a      	ldr	r2, [pc, #168]	; (8006138 <HAL_SPI_Receive_DMA+0x23c>)
 8006090:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006096:	4a29      	ldr	r2, [pc, #164]	; (800613c <HAL_SPI_Receive_DMA+0x240>)
 8006098:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	4a28      	ldr	r2, [pc, #160]	; (8006140 <HAL_SPI_Receive_DMA+0x244>)
 80060a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	2200      	movs	r2, #0
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	4619      	mov	r1, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80060c4:	f7fd fcc6 	bl	8003a54 <HAL_DMA_Start_IT>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00c      	beq.n	80060e8 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d2:	f043 0210 	orr.w	r2, r3, #16
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80060e6:	e01e      	b.n	8006126 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f2:	2b40      	cmp	r3, #64	; 0x40
 80060f4:	d007      	beq.n	8006106 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0220 	orr.w	r2, r2, #32
 8006114:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f042 0201 	orr.w	r2, r2, #1
 8006124:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800612e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	08006921 	.word	0x08006921
 800613c:	080067c3 	.word	0x080067c3
 8006140:	0800695d 	.word	0x0800695d

08006144 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800615c:	2b01      	cmp	r3, #1
 800615e:	d101      	bne.n	8006164 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006160:	2302      	movs	r3, #2
 8006162:	e16c      	b.n	800643e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006172:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800617a:	7dbb      	ldrb	r3, [r7, #22]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d00d      	beq.n	800619c <HAL_SPI_TransmitReceive_DMA+0x58>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006186:	d106      	bne.n	8006196 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d102      	bne.n	8006196 <HAL_SPI_TransmitReceive_DMA+0x52>
 8006190:	7dbb      	ldrb	r3, [r7, #22]
 8006192:	2b04      	cmp	r3, #4
 8006194:	d002      	beq.n	800619c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006196:	2302      	movs	r3, #2
 8006198:	75fb      	strb	r3, [r7, #23]
    goto error;
 800619a:	e14b      	b.n	8006434 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_TransmitReceive_DMA+0x6a>
 80061a8:	887b      	ldrh	r3, [r7, #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b2:	e13f      	b.n	8006434 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b04      	cmp	r3, #4
 80061be:	d003      	beq.n	80061c8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2205      	movs	r2, #5
 80061c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	887a      	ldrh	r2, [r7, #2]
 80061de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	887a      	ldrh	r2, [r7, #2]
 80061ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	887a      	ldrh	r2, [r7, #2]
 80061f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006210:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800621a:	d908      	bls.n	800622e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	e06f      	b.n	800630e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800623c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006248:	d126      	bne.n	8006298 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10f      	bne.n	8006276 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006264:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800626a:	b29b      	uxth	r3, r3
 800626c:	085b      	lsrs	r3, r3, #1
 800626e:	b29a      	uxth	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006274:	e010      	b.n	8006298 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006284:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800628a:	b29b      	uxth	r3, r3
 800628c:	085b      	lsrs	r3, r3, #1
 800628e:	b29b      	uxth	r3, r3
 8006290:	3301      	adds	r3, #1
 8006292:	b29a      	uxth	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062a2:	d134      	bne.n	800630e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062b2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d111      	bne.n	80062e8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062da:	b29b      	uxth	r3, r3
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	b29a      	uxth	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062e6:	e012      	b.n	800630e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062fe:	b29b      	uxth	r3, r3
 8006300:	085b      	lsrs	r3, r3, #1
 8006302:	b29b      	uxth	r3, r3
 8006304:	3301      	adds	r3, #1
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b04      	cmp	r3, #4
 8006318:	d108      	bne.n	800632c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631e:	4a4a      	ldr	r2, [pc, #296]	; (8006448 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006326:	4a49      	ldr	r2, [pc, #292]	; (800644c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006328:	62da      	str	r2, [r3, #44]	; 0x2c
 800632a:	e007      	b.n	800633c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006330:	4a47      	ldr	r2, [pc, #284]	; (8006450 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006338:	4a46      	ldr	r2, [pc, #280]	; (8006454 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006340:	4a45      	ldr	r2, [pc, #276]	; (8006458 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006342:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	2200      	movs	r2, #0
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	4619      	mov	r1, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006364:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006366:	f7fd fb75 	bl	8003a54 <HAL_DMA_Start_IT>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00c      	beq.n	800638a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006374:	f043 0210 	orr.w	r2, r3, #16
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006388:	e054      	b.n	8006434 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a6:	2200      	movs	r2, #0
 80063a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ae:	2200      	movs	r2, #0
 80063b0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b6:	2200      	movs	r2, #0
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	4619      	mov	r1, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	330c      	adds	r3, #12
 80063ca:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80063d2:	f7fd fb3f 	bl	8003a54 <HAL_DMA_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00c      	beq.n	80063f6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	f043 0210 	orr.w	r2, r3, #16
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80063f4:	e01e      	b.n	8006434 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d007      	beq.n	8006414 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006412:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0220 	orr.w	r2, r2, #32
 8006422:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0202 	orr.w	r2, r2, #2
 8006432:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	08006921 	.word	0x08006921
 800644c:	080067c3 	.word	0x080067c3
 8006450:	0800693f 	.word	0x0800693f
 8006454:	0800686f 	.word	0x0800686f
 8006458:	0800695d 	.word	0x0800695d

0800645c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	099b      	lsrs	r3, r3, #6
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
    return;
 800649e:	e0d8      	b.n	8006652 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	085b      	lsrs	r3, r3, #1
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_SPI_IRQHandler+0x66>
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d004      	beq.n	80064c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	4798      	blx	r3
    return;
 80064c0:	e0c7      	b.n	8006652 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10c      	bne.n	80064e8 <HAL_SPI_IRQHandler+0x8c>
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	099b      	lsrs	r3, r3, #6
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d106      	bne.n	80064e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	0a1b      	lsrs	r3, r3, #8
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	f000 80b5 	beq.w	8006652 <HAL_SPI_IRQHandler+0x1f6>
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	095b      	lsrs	r3, r3, #5
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ae 	beq.w	8006652 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	099b      	lsrs	r3, r3, #6
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d023      	beq.n	800654a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b03      	cmp	r3, #3
 800650c:	d011      	beq.n	8006532 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006512:	f043 0204 	orr.w	r2, r3, #4
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	617b      	str	r3, [r7, #20]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	e00b      	b.n	800654a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006532:	2300      	movs	r3, #0
 8006534:	613b      	str	r3, [r7, #16]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	613b      	str	r3, [r7, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	693b      	ldr	r3, [r7, #16]
        return;
 8006548:	e083      	b.n	8006652 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	f003 0301 	and.w	r3, r3, #1
 8006552:	2b00      	cmp	r3, #0
 8006554:	d014      	beq.n	8006580 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655a:	f043 0201 	orr.w	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00c      	beq.n	80065a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006590:	f043 0208 	orr.w	r2, r3, #8
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006598:	2300      	movs	r3, #0
 800659a:	60bb      	str	r3, [r7, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	60bb      	str	r3, [r7, #8]
 80065a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d050      	beq.n	8006650 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80065bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	f003 0302 	and.w	r3, r3, #2
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <HAL_SPI_IRQHandler+0x17e>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d034      	beq.n	8006644 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0203 	bic.w	r2, r2, #3
 80065e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d011      	beq.n	8006616 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f6:	4a18      	ldr	r2, [pc, #96]	; (8006658 <HAL_SPI_IRQHandler+0x1fc>)
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fd fa88 	bl	8003b14 <HAL_DMA_Abort_IT>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800661a:	2b00      	cmp	r3, #0
 800661c:	d017      	beq.n	800664e <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006622:	4a0d      	ldr	r2, [pc, #52]	; (8006658 <HAL_SPI_IRQHandler+0x1fc>)
 8006624:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662a:	4618      	mov	r0, r3
 800662c:	f7fd fa72 	bl	8003b14 <HAL_DMA_Abort_IT>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00b      	beq.n	800664e <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006642:	e004      	b.n	800664e <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800664c:	e000      	b.n	8006650 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 800664e:	bf00      	nop
    return;
 8006650:	bf00      	nop
  }
}
 8006652:	3720      	adds	r7, #32
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	0800699f 	.word	0x0800699f

0800665c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800670a:	b2db      	uxtb	r3, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006726:	f7fc f971 	bl	8002a0c <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b20      	cmp	r3, #32
 8006738:	d03c      	beq.n	80067b4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0220 	bic.w	r2, r2, #32
 8006748:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f022 0202 	bic.w	r2, r2, #2
 8006758:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	2164      	movs	r1, #100	; 0x64
 800675e:	6978      	ldr	r0, [r7, #20]
 8006760:	f000 faaa 	bl	8006cb8 <SPI_EndRxTxTransaction>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d10a      	bne.n	8006794 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2200      	movs	r2, #0
 8006798:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ae:	6978      	ldr	r0, [r7, #20]
 80067b0:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80067b2:	e003      	b.n	80067bc <SPI_DMATransmitCplt+0xa4>
    }
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b8:	6978      	ldr	r0, [r7, #20]
 80067ba:	4798      	blx	r3
#else
  HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d0:	f7fc f91c 	bl	8002a0c <HAL_GetTick>
 80067d4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0320 	and.w	r3, r3, #32
 80067e0:	2b20      	cmp	r3, #32
 80067e2:	d03d      	beq.n	8006860 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0220 	bic.w	r2, r2, #32
 80067f2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <SPI_DMAReceiveCplt+0x56>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006804:	d108      	bne.n	8006818 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f022 0203 	bic.w	r2, r2, #3
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	e007      	b.n	8006828 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	2164      	movs	r1, #100	; 0x64
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 f9eb 	bl	8006c08 <SPI_EndRxTransaction>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2220      	movs	r2, #32
 800683c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006852:	2b00      	cmp	r3, #0
 8006854:	d004      	beq.n	8006860 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800685e:	e003      	b.n	8006868 <SPI_DMAReceiveCplt+0xa6>
    }
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	4798      	blx	r3
#else
  HAL_SPI_RxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b084      	sub	sp, #16
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800687c:	f7fc f8c6 	bl	8002a0c <HAL_GetTick>
 8006880:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b20      	cmp	r3, #32
 800688e:	d031      	beq.n	80068f4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0220 	bic.w	r2, r2, #32
 800689e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	2164      	movs	r1, #100	; 0x64
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fa07 	bl	8006cb8 <SPI_EndRxTxTransaction>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068b4:	f043 0220 	orr.w	r2, r3, #32
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0203 	bic.w	r2, r2, #3
 80068ca:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d004      	beq.n	80068f4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068f2:	e003      	b.n	80068fc <SPI_DMATransmitReceiveCplt+0x8e>
    }
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	4798      	blx	r3
#else
  HAL_SPI_TxRxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}

08006902 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006914:	68f8      	ldr	r0, [r7, #12]
 8006916:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006918:	bf00      	nop
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	4798      	blx	r3
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0203 	bic.w	r2, r2, #3
 8006978:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697e:	f043 0210 	orr.w	r2, r3, #16
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069aa:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069c2:	bf00      	nop
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
	...

080069cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069dc:	f7fc f816 	bl	8002a0c <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4413      	add	r3, r2
 80069ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069ec:	f7fc f80e 	bl	8002a0c <HAL_GetTick>
 80069f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069f2:	4b39      	ldr	r3, [pc, #228]	; (8006ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	015b      	lsls	r3, r3, #5
 80069f8:	0d1b      	lsrs	r3, r3, #20
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	fb02 f303 	mul.w	r3, r2, r3
 8006a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	e054      	b.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0a:	d050      	beq.n	8006aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a0c:	f7fb fffe 	bl	8002a0c <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	69fa      	ldr	r2, [r7, #28]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d902      	bls.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d13d      	bne.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a3a:	d111      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a44:	d004      	beq.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	d107      	bne.n	8006a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a68:	d10f      	bne.n	8006a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e017      	b.n	8006ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d101      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689a      	ldr	r2, [r3, #8]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bf0c      	ite	eq
 8006abe:	2301      	moveq	r3, #1
 8006ac0:	2300      	movne	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d19b      	bne.n	8006a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3720      	adds	r7, #32
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000000 	.word	0x20000000

08006adc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006aee:	f7fb ff8d 	bl	8002a0c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	4413      	add	r3, r2
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006afe:	f7fb ff85 	bl	8002a0c <HAL_GetTick>
 8006b02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	330c      	adds	r3, #12
 8006b0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006b0c:	4b3d      	ldr	r3, [pc, #244]	; (8006c04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	00da      	lsls	r2, r3, #3
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	0d1b      	lsrs	r3, r3, #20
 8006b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b24:	e060      	b.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b2c:	d107      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d104      	bne.n	8006b3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b44:	d050      	beq.n	8006be8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b46:	f7fb ff61 	bl	8002a0c <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d902      	bls.n	8006b5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d13d      	bne.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b74:	d111      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b7e:	d004      	beq.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b88:	d107      	bne.n	8006b9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba2:	d10f      	bne.n	8006bc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e010      	b.n	8006bfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689a      	ldr	r2, [r3, #8]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d196      	bne.n	8006b26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3728      	adds	r7, #40	; 0x28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000000 	.word	0x20000000

08006c08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c1c:	d111      	bne.n	8006c42 <SPI_EndRxTransaction+0x3a>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c26:	d004      	beq.n	8006c32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c30:	d107      	bne.n	8006c42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	2180      	movs	r1, #128	; 0x80
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff febd 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e023      	b.n	8006cb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c70:	d11d      	bne.n	8006cae <SPI_EndRxTransaction+0xa6>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7a:	d004      	beq.n	8006c86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c84:	d113      	bne.n	8006cae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f7ff ff22 	bl	8006adc <SPI_WaitFifoStateUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca2:	f043 0220 	orr.w	r2, r3, #32
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e000      	b.n	8006cb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	9300      	str	r3, [sp, #0]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f7ff ff03 	bl	8006adc <SPI_WaitFifoStateUntilTimeout>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce0:	f043 0220 	orr.w	r2, r3, #32
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e027      	b.n	8006d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff fe68 	bl	80069cc <SPI_WaitFlagStateUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e014      	b.n	8006d3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f7ff fedc 	bl	8006adc <SPI_WaitFifoStateUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	f043 0220 	orr.w	r2, r3, #32
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e000      	b.n	8006d3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e049      	b.n	8006dea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7f9 fc7a 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f000 f968 	bl	8007058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d001      	beq.n	8006e0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e047      	b.n	8006e9c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <HAL_TIM_Base_Start+0xb4>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d01d      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e26:	d018      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a1f      	ldr	r2, [pc, #124]	; (8006eac <HAL_TIM_Base_Start+0xb8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1e      	ldr	r2, [pc, #120]	; (8006eb0 <HAL_TIM_Base_Start+0xbc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d00e      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1c      	ldr	r2, [pc, #112]	; (8006eb4 <HAL_TIM_Base_Start+0xc0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d009      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1b      	ldr	r2, [pc, #108]	; (8006eb8 <HAL_TIM_Base_Start+0xc4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIM_Base_Start+0x66>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a19      	ldr	r2, [pc, #100]	; (8006ebc <HAL_TIM_Base_Start+0xc8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d115      	bne.n	8006e86 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689a      	ldr	r2, [r3, #8]
 8006e60:	4b17      	ldr	r3, [pc, #92]	; (8006ec0 <HAL_TIM_Base_Start+0xcc>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	d015      	beq.n	8006e98 <HAL_TIM_Base_Start+0xa4>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e72:	d011      	beq.n	8006e98 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e84:	e008      	b.n	8006e98 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0201 	orr.w	r2, r2, #1
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	e000      	b.n	8006e9a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40013400 	.word	0x40013400
 8006ebc:	40014000 	.word	0x40014000
 8006ec0:	00010007 	.word	0x00010007

08006ec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d101      	bne.n	8006ee0 <HAL_TIM_ConfigClockSource+0x1c>
 8006edc:	2302      	movs	r3, #2
 8006ede:	e0b6      	b.n	800704e <HAL_TIM_ConfigClockSource+0x18a>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f1c:	d03e      	beq.n	8006f9c <HAL_TIM_ConfigClockSource+0xd8>
 8006f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f22:	f200 8087 	bhi.w	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2a:	f000 8086 	beq.w	800703a <HAL_TIM_ConfigClockSource+0x176>
 8006f2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f32:	d87f      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f34:	2b70      	cmp	r3, #112	; 0x70
 8006f36:	d01a      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0xaa>
 8006f38:	2b70      	cmp	r3, #112	; 0x70
 8006f3a:	d87b      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f3c:	2b60      	cmp	r3, #96	; 0x60
 8006f3e:	d050      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x11e>
 8006f40:	2b60      	cmp	r3, #96	; 0x60
 8006f42:	d877      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f44:	2b50      	cmp	r3, #80	; 0x50
 8006f46:	d03c      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0xfe>
 8006f48:	2b50      	cmp	r3, #80	; 0x50
 8006f4a:	d873      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d058      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x13e>
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d86f      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f54:	2b30      	cmp	r3, #48	; 0x30
 8006f56:	d064      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f58:	2b30      	cmp	r3, #48	; 0x30
 8006f5a:	d86b      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d060      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d867      	bhi.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d05c      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d05a      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x15e>
 8006f6c:	e062      	b.n	8007034 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6899      	ldr	r1, [r3, #8]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f000 f97f 	bl	8007280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	609a      	str	r2, [r3, #8]
      break;
 8006f9a:	e04f      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	6899      	ldr	r1, [r3, #8]
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f000 f968 	bl	8007280 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	689a      	ldr	r2, [r3, #8]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fbe:	609a      	str	r2, [r3, #8]
      break;
 8006fc0:	e03c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f000 f8dc 	bl	800718c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2150      	movs	r1, #80	; 0x50
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f935 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e02c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 f8fb 	bl	80071ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2160      	movs	r1, #96	; 0x60
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 f925 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8007000:	e01c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6818      	ldr	r0, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	6859      	ldr	r1, [r3, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	461a      	mov	r2, r3
 8007010:	f000 f8bc 	bl	800718c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2140      	movs	r1, #64	; 0x40
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f915 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8007020:	e00c      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f000 f90c 	bl	800724a <TIM_ITRx_SetConfig>
      break;
 8007032:	e003      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
      break;
 8007038:	e000      	b.n	800703c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800703a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a40      	ldr	r2, [pc, #256]	; (800716c <TIM_Base_SetConfig+0x114>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d013      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d00f      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a3d      	ldr	r2, [pc, #244]	; (8007170 <TIM_Base_SetConfig+0x118>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00b      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d007      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a3b      	ldr	r2, [pc, #236]	; (8007178 <TIM_Base_SetConfig+0x120>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a3a      	ldr	r2, [pc, #232]	; (800717c <TIM_Base_SetConfig+0x124>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d108      	bne.n	80070aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a2f      	ldr	r2, [pc, #188]	; (800716c <TIM_Base_SetConfig+0x114>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01f      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b8:	d01b      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2c      	ldr	r2, [pc, #176]	; (8007170 <TIM_Base_SetConfig+0x118>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d017      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2b      	ldr	r2, [pc, #172]	; (8007174 <TIM_Base_SetConfig+0x11c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d013      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2a      	ldr	r2, [pc, #168]	; (8007178 <TIM_Base_SetConfig+0x120>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00f      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a29      	ldr	r2, [pc, #164]	; (800717c <TIM_Base_SetConfig+0x124>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00b      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a28      	ldr	r2, [pc, #160]	; (8007180 <TIM_Base_SetConfig+0x128>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d007      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a27      	ldr	r2, [pc, #156]	; (8007184 <TIM_Base_SetConfig+0x12c>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d003      	beq.n	80070f2 <TIM_Base_SetConfig+0x9a>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a26      	ldr	r2, [pc, #152]	; (8007188 <TIM_Base_SetConfig+0x130>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d108      	bne.n	8007104 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a10      	ldr	r2, [pc, #64]	; (800716c <TIM_Base_SetConfig+0x114>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d00f      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a12      	ldr	r2, [pc, #72]	; (800717c <TIM_Base_SetConfig+0x124>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d00b      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a11      	ldr	r2, [pc, #68]	; (8007180 <TIM_Base_SetConfig+0x128>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d007      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a10      	ldr	r2, [pc, #64]	; (8007184 <TIM_Base_SetConfig+0x12c>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d003      	beq.n	8007150 <TIM_Base_SetConfig+0xf8>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a0f      	ldr	r2, [pc, #60]	; (8007188 <TIM_Base_SetConfig+0x130>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d103      	bne.n	8007158 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	691a      	ldr	r2, [r3, #16]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	615a      	str	r2, [r3, #20]
}
 800715e:	bf00      	nop
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	40012c00 	.word	0x40012c00
 8007170:	40000400 	.word	0x40000400
 8007174:	40000800 	.word	0x40000800
 8007178:	40000c00 	.word	0x40000c00
 800717c:	40013400 	.word	0x40013400
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800

0800718c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800718c:	b480      	push	{r7}
 800718e:	b087      	sub	sp, #28
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f023 030a 	bic.w	r3, r3, #10
 80071c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	621a      	str	r2, [r3, #32]
}
 80071de:	bf00      	nop
 80071e0:	371c      	adds	r7, #28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b087      	sub	sp, #28
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	60f8      	str	r0, [r7, #12]
 80071f2:	60b9      	str	r1, [r7, #8]
 80071f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0210 	bic.w	r2, r3, #16
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007214:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	031b      	lsls	r3, r3, #12
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007226:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800724a:	b480      	push	{r7}
 800724c:	b085      	sub	sp, #20
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
 8007252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4313      	orrs	r3, r2
 8007268:	f043 0307 	orr.w	r3, r3, #7
 800726c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	609a      	str	r2, [r3, #8]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
 800728c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800729a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	021a      	lsls	r2, r3, #8
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	609a      	str	r2, [r3, #8]
}
 80072b4:	bf00      	nop
 80072b6:	371c      	adds	r7, #28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e068      	b.n	80073aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2e      	ldr	r2, [pc, #184]	; (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d004      	beq.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a2d      	ldr	r2, [pc, #180]	; (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d108      	bne.n	800731e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007312:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1e      	ldr	r2, [pc, #120]	; (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800734a:	d018      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a18      	ldr	r2, [pc, #96]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a13      	ldr	r2, [pc, #76]	; (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a14      	ldr	r2, [pc, #80]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d10c      	bne.n	8007398 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4313      	orrs	r3, r2
 800738e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40012c00 	.word	0x40012c00
 80073bc:	40013400 	.word	0x40013400
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40014000 	.word	0x40014000

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	; (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	; (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	; (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	; (8007414 <__libc_init_array+0x44>)
 80073e4:	f000 f820 	bl	8007428 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	080074b4 	.word	0x080074b4
 800740c:	080074b4 	.word	0x080074b4
 8007410:	080074b4 	.word	0x080074b4
 8007414:	080074b8 	.word	0x080074b8

08007418 <memset>:
 8007418:	4402      	add	r2, r0
 800741a:	4603      	mov	r3, r0
 800741c:	4293      	cmp	r3, r2
 800741e:	d100      	bne.n	8007422 <memset+0xa>
 8007420:	4770      	bx	lr
 8007422:	f803 1b01 	strb.w	r1, [r3], #1
 8007426:	e7f9      	b.n	800741c <memset+0x4>

08007428 <_init>:
 8007428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800742a:	bf00      	nop
 800742c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742e:	bc08      	pop	{r3}
 8007430:	469e      	mov	lr, r3
 8007432:	4770      	bx	lr

08007434 <_fini>:
 8007434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007436:	bf00      	nop
 8007438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800743a:	bc08      	pop	{r3}
 800743c:	469e      	mov	lr, r3
 800743e:	4770      	bx	lr
